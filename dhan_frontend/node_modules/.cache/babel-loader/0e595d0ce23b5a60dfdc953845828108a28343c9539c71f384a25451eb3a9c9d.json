{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PlaceOrder.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [security_id, setSecurityId] = useState(\"12345\");\n//   const [exchange_segment, setExchangeSegment] = useState(\"NSE_EQ\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(1);\n//   const [price, setPrice] = useState(\"\");\n//   const [triggerPrice, setTriggerPrice] = useState(\"\");\n//   const [productType, setProductType] = useState(\"INTRADAY\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const handlePlaceOrder = async () => {\n//     setError(null);\n//     setSuccessMessage(null);\n\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n//       return;\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && triggerPrice <= 0) {\n//       setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     // Construct the order payload dynamically\n//     let orderData = {\n//       security_id,\n//       exchange_segment,\n//       transaction_type: side,\n//       quantity,\n//       order_type: orderType,\n//       product_type: productType,\n//     };\n\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType)) {\n//       orderData.price = parseFloat(price);\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType)) {\n//       orderData.trigger_price = parseFloat(triggerPrice);\n//     }\n//     if (orderType === \"LIMIT\") {\n//       orderData.timeInForce = timeInForce;\n//     }\n\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Order Response:\", response.data);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n\n//       if (response.data.status === \"offline\") {\n//         setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       } else if (response.data.status === \"success\") {\n//         setSuccessMessage(\"Order placed successfully.\");\n//       } else {\n//         setError(response.data?.remarks?.error_message || \"Failed to place order. Please try again.\");\n//       }\n//     } catch (err) {\n//       setError(`Error placing order: ${err.response?.data?.remarks?.error_message || err.message}`);\n//       console.error(\"Order Error:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">Security ID:</label>\n//           <input\n//             type=\"text\"\n//             value={security_id}\n//             onChange={(e) => setSecurityId(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Exchange Segment:</label>\n//           <select\n//             value={exchange_segment}\n//             onChange={(e) => setExchangeSegment(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"NSE_EQ\">NSE_EQ</option>\n//             <option value=\"BSE_EQ\">BSE_EQ</option>\n//             <option value=\"BSE_EQ\">MCX_EQ</option>\n//             <option value=\"BSE_EQ\">BSE_EQ</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Transaction Type:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"STOP_LOSS\">STOP-LOSS (SL)</option>\n//             <option value=\"STOP_LOSS_MARKET\">STOP-LOSS MARKET (SL-M)</option>\n//           </select>\n//         </div>\n//         {orderType !== \"MARKET\" && (\n//           <div>\n//             <label className=\"block mb-1\">Price:</label>\n//             <input\n//               type=\"number\"\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         {[\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (\n//           <div>\n//             <label className=\"block mb-1\">Trigger Price:</label>\n//             <input\n//               type=\"number\"\n//               value={triggerPrice}\n//               onChange={(e) => setTriggerPrice(e.target.value)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 1)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}        \n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//        </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {/* Order Table */}\n//       {orders.length > 0 && (\n//         <div className=\"mt-6\">\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Security id</th>\n//                   <th className=\"border border-gray-600 p-2\">Side</th>\n//                   <th className=\"border border-gray-600 p-2\">Order Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\n//                   <th className=\"border border-gray-600 p-2\">Product Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId || order.id || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.security_id || order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.transaction_type || order.side || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.order_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity || order.origQty || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.price > 0 ? order.price : \"-\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.product_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.status || \"Pending\"}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         </div>\n//       )}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [security_id, setSecurityId] = useState(\"\");\n//   const [exchange_segment, setExchangeSegment] = useState(\"NSE_EQ\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(1);\n//   const [price, setPrice] = useState(\"\");\n//   const [triggerPrice, setTriggerPrice] = useState(\"\");\n//   const [productType, setProductType] = useState(\"INTRADAY\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n//   const handleSearch = async () => {\n//     setError(null);\n//     setSearchResults([]); // Clear previous results\n\n//     if (!searchQuery.trim()) {\n//       setError(\"Please enter a search term.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/search?query=${searchQuery}`);\n\n//       console.log(\"Search Results:\", response.data);\n\n//       if (response.data.length > 0) {\n//         setSearchResults(response.data);\n//       } else {\n//         setSearchResults([]); // Ensure empty results are reflected in UI\n//         setError(\"No matching data found.\");\n//       }\n//     } catch (err) {\n//       setSearchResults([]); // Ensure searchResults is always updated\n//       setError(\"Error fetching search results. Please try again.\");\n//       console.error(\"Search Error:\", err);\n//     }\n//   };\n\n//   const handlePlaceOrder = async () => {\n//     setError(null);\n//     setSuccessMessage(null);\n\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n//       return;\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && triggerPrice <= 0) {\n//       setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     // Construct the order payload dynamically\n//     let orderData = {\n//       security_id,\n//       exchange_segment,\n//       transaction_type: side,\n//       quantity,\n//       order_type: orderType,\n//       product_type: productType,\n//     };\n\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType)) {\n//       orderData.price = parseFloat(price);\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType)) {\n//       orderData.trigger_price = parseFloat(triggerPrice);\n//     }\n//     if (orderType === \"LIMIT\") {\n//       orderData.timeInForce = timeInForce;\n//     }\n\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Order Response:\", response.data, response.data.saved_data);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n\n//       // if (response.data.status === \"offline\") {\n//       //   setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       // } else if (response.data.status === \"success\") {\n//       //   setSuccessMessage(\"Order placed successfully.\");\n//       // } else {\n//       //   setError(response.data?.remarks?.error_message || \"Failed to place order. Please try again.\");\n//       // }\n//     } catch (err) {\n//       setError(`Error placing order: ${err.response?.data?.remarks?.error_message || err.message}`);\n//       console.error(\"Order Error:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//         <div className=\"grid grid-cols-1 gap-2\">\n//           {/* Search Bar */}\n//         <div className=\"mb-4 flex\">\n//         <label className=\"block mb-0\">Search by security_id, Symbol_Name:</label>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search...\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//           <button\n//             onClick={handleSearch}\n//             className=\"ml-1 p-1 bg-green-500 text-black font-bold rounded hover:bg-green-500\"\n//           >\n//             Search\n//           </button>\n//         </div>\n\n//         {/* Display Search Results */\n//           }\n\n//         {searchResults.length > 0 && (\n//           <div className=\"mt-4\">\n//             <h3 className=\"text-xl font-bold mb-2\">Search Results</h3>\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Exchange Segment</th>\n//                   <th className=\"border border-gray-600 p-2\">Security ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Instrument Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Lot Size</th>\n//                   <th className=\"border border-gray-600 p-2\">Symbol Name</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {searchResults.map((result, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Exchange_segment || \"N/A\"}</td>\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Security_ID || \"N/A\"}</td>\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Instrument_Type || \"N/A\"}</td>\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Lot_Size || \"N/A\"}</td>\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Symbol_Name || \"N/A\"}</td>\n//                         </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Security ID:</label>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Security ID\"\n//             value={security_id}\n//             onChange={(e) => setSecurityId(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Exchange Segment:</label>\n//           <select\n//             value={exchange_segment}\n//             onChange={(e) => setExchangeSegment(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"NSE_EQ\">NSE_EQ</option>\n//             <option value=\"BSE_EQ\">BSE_EQ</option>\n//             <option value=\"BSE_EQ\">MCX_EQ</option>\n//             <option value=\"BSE_EQ\">BSE_EQ</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Transaction Type:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"STOP_LOSS\">STOP-LOSS (SL)</option>\n//             <option value=\"STOP_LOSS_MARKET\">STOP-LOSS MARKET (SL-M)</option>\n//           </select>\n//         </div>\n//         {orderType !== \"MARKET\" && (\n//           <div>\n//             <label className=\"block mb-1\">Price:</label>\n//             <input\n//               type=\"number\"\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         {[\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (\n//           <div>\n//             <label className=\"block mb-1\">Trigger Price:</label>\n//             <input\n//               type=\"number\"\n//               value={triggerPrice}\n//               onChange={(e) => setTriggerPrice(e.target.value)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 1)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}        \n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//        </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {/* Order Table */\n//       }\n//       {orders.length > 0 && (\n//         <div className=\"mt-6\">\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Security id</th>\n//                   <th className=\"border border-gray-600 p-2\">Side</th>\n//                   <th className=\"border border-gray-600 p-2\">Order Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\n//                   <th className=\"border border-gray-600 p-2\">Product Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                   <td className=\"border border-gray-600 p-2\">{order?.test_order_id || order?.order_id || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.security_id || order?.security_id || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.transaction_type || order?.transaction_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.order_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.quantity || order?.origQty || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.price > 0 ? order?.saved_data?.[0]?.price : \"-\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.product_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.status || \"Pending\"}</td>\n\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         </div>\n//       )}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaceOrder = () => {\n  _s();\n  const navigate = useNavigate();\n  const [security_id, setSecurityId] = useState(\"\");\n  const [exchange_segment, setExchangeSegment] = useState(\"NSE_EQ\");\n  const [side, setSide] = useState(\"BUY\");\n  const [orderType, setOrderType] = useState(\"LIMIT\");\n  const [quantity, setQuantity] = useState(1);\n  const [price, setPrice] = useState(\"\");\n  const [triggerPrice, setTriggerPrice] = useState(\"\");\n  const [productType, setProductType] = useState(\"INTRADAY\");\n  const [timeInForce, setTimeInForce] = useState(\"GTC\");\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const handleSearch = async () => {\n    setError(null);\n    setSearchResults([]);\n    if (!searchQuery.trim()) {\n      setError(\"Please enter a search term.\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:5000/api/search?query=${searchQuery}`);\n      setSearchResults(response.data.length > 0 ? response.data : []);\n    } catch (err) {\n      setError(\"Error fetching search results. Please try again.\");\n    }\n  };\n  const handleRowClick = data => {\n    setSecurityId(data.Security_ID || \"\");\n    setExchangeSegment(data.Exchange_segment || \"NSE_EQ\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search...\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value),\n        className: \"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        className: \"ml-2 p-2 bg-green-500 text-black font-bold rounded\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this), searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"w-full border-collapse border border-gray-600\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-700 text-white\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border p-2\",\n            children: \"Exchange\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border p-2\",\n            children: \"Security ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border p-2\",\n            children: \"Symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-800 cursor-pointer\",\n          onClick: () => handleRowClick(result),\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: result.Exchange_segment || \"N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: result.Security_ID || \"N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2\",\n            children: result.Symbol_Name || \"N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block\",\n        children: \"Security ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: security_id,\n        onChange: e => setSecurityId(e.target.value),\n        className: \"w-full p-2 rounded bg-gray-700 border\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block\",\n        children: \"Exchange Segment:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: exchange_segment,\n        readOnly: true,\n        className: \"w-full p-2 rounded bg-gray-700 border\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 608,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaceOrder, \"ZRmS1yVCkX9grDlFmHhMox6dVGM=\", false, function () {\n  return [useNavigate];\n});\n_c = PlaceOrder;\nexport default PlaceOrder;\nvar _c;\n$RefreshReg$(_c, \"PlaceOrder\");","map":{"version":3,"names":["React","useState","axios","useNavigate","jsxDEV","_jsxDEV","PlaceOrder","_s","navigate","security_id","setSecurityId","exchange_segment","setExchangeSegment","side","setSide","orderType","setOrderType","quantity","setQuantity","price","setPrice","triggerPrice","setTriggerPrice","productType","setProductType","timeInForce","setTimeInForce","error","setError","loading","setLoading","searchQuery","setSearchQuery","searchResults","setSearchResults","handleSearch","trim","response","get","data","length","err","handleRowClick","Security_ID","Exchange_segment","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","result","index","Symbol_Name","readOnly","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PlaceOrder.js"],"sourcesContent":["\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [security_id, setSecurityId] = useState(\"12345\");\n//   const [exchange_segment, setExchangeSegment] = useState(\"NSE_EQ\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(1);\n//   const [price, setPrice] = useState(\"\");\n//   const [triggerPrice, setTriggerPrice] = useState(\"\");\n//   const [productType, setProductType] = useState(\"INTRADAY\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n\n\n//   const handlePlaceOrder = async () => {\n//     setError(null);\n//     setSuccessMessage(null);\n\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n//       return;\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && triggerPrice <= 0) {\n//       setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     // Construct the order payload dynamically\n//     let orderData = {\n//       security_id,\n//       exchange_segment,\n//       transaction_type: side,\n//       quantity,\n//       order_type: orderType,\n//       product_type: productType,\n//     };\n\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType)) {\n//       orderData.price = parseFloat(price);\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType)) {\n//       orderData.trigger_price = parseFloat(triggerPrice);\n//     }\n//     if (orderType === \"LIMIT\") {\n//       orderData.timeInForce = timeInForce;\n//     }\n\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Order Response:\", response.data);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n\n//       if (response.data.status === \"offline\") {\n//         setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       } else if (response.data.status === \"success\") {\n//         setSuccessMessage(\"Order placed successfully.\");\n//       } else {\n//         setError(response.data?.remarks?.error_message || \"Failed to place order. Please try again.\");\n//       }\n//     } catch (err) {\n//       setError(`Error placing order: ${err.response?.data?.remarks?.error_message || err.message}`);\n//       console.error(\"Order Error:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">Security ID:</label>\n//           <input\n//             type=\"text\"\n//             value={security_id}\n//             onChange={(e) => setSecurityId(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Exchange Segment:</label>\n//           <select\n//             value={exchange_segment}\n//             onChange={(e) => setExchangeSegment(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"NSE_EQ\">NSE_EQ</option>\n//             <option value=\"BSE_EQ\">BSE_EQ</option>\n//             <option value=\"BSE_EQ\">MCX_EQ</option>\n//             <option value=\"BSE_EQ\">BSE_EQ</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Transaction Type:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"STOP_LOSS\">STOP-LOSS (SL)</option>\n//             <option value=\"STOP_LOSS_MARKET\">STOP-LOSS MARKET (SL-M)</option>\n//           </select>\n//         </div>\n//         {orderType !== \"MARKET\" && (\n//           <div>\n//             <label className=\"block mb-1\">Price:</label>\n//             <input\n//               type=\"number\"\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         {[\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (\n//           <div>\n//             <label className=\"block mb-1\">Trigger Price:</label>\n//             <input\n//               type=\"number\"\n//               value={triggerPrice}\n//               onChange={(e) => setTriggerPrice(e.target.value)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 1)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}        \n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//        </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {/* Order Table */}\n//       {orders.length > 0 && (\n//         <div className=\"mt-6\">\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Security id</th>\n//                   <th className=\"border border-gray-600 p-2\">Side</th>\n//                   <th className=\"border border-gray-600 p-2\">Order Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\n//                   <th className=\"border border-gray-600 p-2\">Product Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId || order.id || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.security_id || order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.transaction_type || order.side || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.order_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity || order.origQty || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.price > 0 ? order.price : \"-\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.product_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.status || \"Pending\"}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         </div>\n//       )}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [security_id, setSecurityId] = useState(\"\");\n//   const [exchange_segment, setExchangeSegment] = useState(\"NSE_EQ\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(1);\n//   const [price, setPrice] = useState(\"\");\n//   const [triggerPrice, setTriggerPrice] = useState(\"\");\n//   const [productType, setProductType] = useState(\"INTRADAY\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n\n\n//   const handleSearch = async () => {\n//     setError(null);\n//     setSearchResults([]); // Clear previous results\n  \n//     if (!searchQuery.trim()) {\n//       setError(\"Please enter a search term.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/search?query=${searchQuery}`);\n  \n//       console.log(\"Search Results:\", response.data);\n  \n//       if (response.data.length > 0) {\n//         setSearchResults(response.data);\n//       } else {\n//         setSearchResults([]); // Ensure empty results are reflected in UI\n//         setError(\"No matching data found.\");\n//       }\n//     } catch (err) {\n//       setSearchResults([]); // Ensure searchResults is always updated\n//       setError(\"Error fetching search results. Please try again.\");\n//       console.error(\"Search Error:\", err);\n//     }\n//   };\n  \n\n//   const handlePlaceOrder = async () => {\n//     setError(null);\n//     setSuccessMessage(null);\n\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n//       return;\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && triggerPrice <= 0) {\n//       setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     // Construct the order payload dynamically\n//     let orderData = {\n//       security_id,\n//       exchange_segment,\n//       transaction_type: side,\n//       quantity,\n//       order_type: orderType,\n//       product_type: productType,\n//     };\n\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType)) {\n//       orderData.price = parseFloat(price);\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType)) {\n//       orderData.trigger_price = parseFloat(triggerPrice);\n//     }\n//     if (orderType === \"LIMIT\") {\n//       orderData.timeInForce = timeInForce;\n//     }\n\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Order Response:\", response.data, response.data.saved_data);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n\n//       // if (response.data.status === \"offline\") {\n//       //   setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       // } else if (response.data.status === \"success\") {\n//       //   setSuccessMessage(\"Order placed successfully.\");\n//       // } else {\n//       //   setError(response.data?.remarks?.error_message || \"Failed to place order. Please try again.\");\n//       // }\n//     } catch (err) {\n//       setError(`Error placing order: ${err.response?.data?.remarks?.error_message || err.message}`);\n//       console.error(\"Order Error:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//         <div className=\"grid grid-cols-1 gap-2\">\n//           {/* Search Bar */}\n//         <div className=\"mb-4 flex\">\n//         <label className=\"block mb-0\">Search by security_id, Symbol_Name:</label>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search...\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//           <button\n//             onClick={handleSearch}\n//             className=\"ml-1 p-1 bg-green-500 text-black font-bold rounded hover:bg-green-500\"\n//           >\n//             Search\n//           </button>\n//         </div>\n\n//         {/* Display Search Results */\n//           }\n\n//         {searchResults.length > 0 && (\n//           <div className=\"mt-4\">\n//             <h3 className=\"text-xl font-bold mb-2\">Search Results</h3>\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Exchange Segment</th>\n//                   <th className=\"border border-gray-600 p-2\">Security ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Instrument Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Lot Size</th>\n//                   <th className=\"border border-gray-600 p-2\">Symbol Name</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {searchResults.map((result, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Exchange_segment || \"N/A\"}</td>\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Security_ID || \"N/A\"}</td>\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Instrument_Type || \"N/A\"}</td>\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Lot_Size || \"N/A\"}</td>\n//                     <td className=\"border border-gray-600 px-4 py-2\">{result?.Symbol_Name || \"N/A\"}</td>\n//                         </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Security ID:</label>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Security ID\"\n//             value={security_id}\n//             onChange={(e) => setSecurityId(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Exchange Segment:</label>\n//           <select\n//             value={exchange_segment}\n//             onChange={(e) => setExchangeSegment(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"NSE_EQ\">NSE_EQ</option>\n//             <option value=\"BSE_EQ\">BSE_EQ</option>\n//             <option value=\"BSE_EQ\">MCX_EQ</option>\n//             <option value=\"BSE_EQ\">BSE_EQ</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Transaction Type:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"STOP_LOSS\">STOP-LOSS (SL)</option>\n//             <option value=\"STOP_LOSS_MARKET\">STOP-LOSS MARKET (SL-M)</option>\n//           </select>\n//         </div>\n//         {orderType !== \"MARKET\" && (\n//           <div>\n//             <label className=\"block mb-1\">Price:</label>\n//             <input\n//               type=\"number\"\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         {[\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (\n//           <div>\n//             <label className=\"block mb-1\">Trigger Price:</label>\n//             <input\n//               type=\"number\"\n//               value={triggerPrice}\n//               onChange={(e) => setTriggerPrice(e.target.value)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 1)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}        \n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//        </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {/* Order Table */\n//       }\n//       {orders.length > 0 && (\n//         <div className=\"mt-6\">\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Security id</th>\n//                   <th className=\"border border-gray-600 p-2\">Side</th>\n//                   <th className=\"border border-gray-600 p-2\">Order Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\n//                   <th className=\"border border-gray-600 p-2\">Product Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                   <td className=\"border border-gray-600 p-2\">{order?.test_order_id || order?.order_id || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.security_id || order?.security_id || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.transaction_type || order?.transaction_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.order_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.quantity || order?.origQty || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.price > 0 ? order?.saved_data?.[0]?.price : \"-\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.saved_data?.[0]?.product_type || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order?.status || \"Pending\"}</td>\n\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         </div>\n//       )}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n\n\n\n\n\n\n\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst PlaceOrder = () => {\n  const navigate = useNavigate();\n  const [security_id, setSecurityId] = useState(\"\");\n  const [exchange_segment, setExchangeSegment] = useState(\"NSE_EQ\");\n  const [side, setSide] = useState(\"BUY\");\n  const [orderType, setOrderType] = useState(\"LIMIT\");\n  const [quantity, setQuantity] = useState(1);\n  const [price, setPrice] = useState(\"\");\n  const [triggerPrice, setTriggerPrice] = useState(\"\");\n  const [productType, setProductType] = useState(\"INTRADAY\");\n  const [timeInForce, setTimeInForce] = useState(\"GTC\");\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  const handleSearch = async () => {\n    setError(null);\n    setSearchResults([]);\n\n    if (!searchQuery.trim()) {\n      setError(\"Please enter a search term.\");\n      return;\n    }\n\n    try {\n      const response = await axios.get(`http://localhost:5000/api/search?query=${searchQuery}`);\n      setSearchResults(response.data.length > 0 ? response.data : []);\n    } catch (err) {\n      setError(\"Error fetching search results. Please try again.\");\n    }\n  };\n\n  const handleRowClick = (data) => {\n    setSecurityId(data.Security_ID || \"\");\n    setExchangeSegment(data.Exchange_segment || \"NSE_EQ\");\n  };\n\n  return (\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n      <div className=\"mb-4 flex\">\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n        />\n        <button onClick={handleSearch} className=\"ml-2 p-2 bg-green-500 text-black font-bold rounded\">\n          Search\n        </button>\n      </div>\n\n      {searchResults.length > 0 && (\n        <table className=\"w-full border-collapse border border-gray-600\">\n          <thead>\n            <tr className=\"bg-gray-700 text-white\">\n              <th className=\"border p-2\">Exchange</th>\n              <th className=\"border p-2\">Security ID</th>\n              <th className=\"border p-2\">Symbol</th>\n            </tr>\n          </thead>\n          <tbody>\n            {searchResults.map((result, index) => (\n              <tr key={index} className=\"bg-gray-800 cursor-pointer\" onClick={() => handleRowClick(result)}>\n                <td className=\"border p-2\">{result.Exchange_segment || \"N/A\"}</td>\n                <td className=\"border p-2\">{result.Security_ID || \"N/A\"}</td>\n                <td className=\"border p-2\">{result.Symbol_Name || \"N/A\"}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n\n      <div>\n        <label className=\"block\">Security ID:</label>\n        <input type=\"text\" value={security_id} onChange={(e) => setSecurityId(e.target.value)} className=\"w-full p-2 rounded bg-gray-700 border\" />\n      </div>\n      <div>\n        <label className=\"block\">Exchange Segment:</label>\n        <input type=\"text\" value={exchange_segment} readOnly className=\"w-full p-2 rounded bg-gray-700 border\" />\n      </div>\n    </div>\n  );\n};\n\nexport default PlaceOrder;\n"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAavC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,UAAU,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\stock-alphavantage\\\\src\\\\components\\\\PnlReport.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\n//       console.log(\"API Response:\", response.data); // Debugging API Response\n\n//       // ðŸ”¹ Check if the response is an object instead of an array\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data);\n//       } else if (typeof response.data === \"object\") {\n//         setPnlData([response.data]); // Wrap single object in an array\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => {\n//         setShowPopup(false);\n//       }, 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n//     // const interval = setInterval(fetchPnLReport, 20000); // Refresh every 20 sec\n\n//     // return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [socket, setSocket] = useState(null); // WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data);\n//       } else if (typeof response.data === \"object\") {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     const socketInstance = io(SOCKET_URL);\n//     setSocket(socketInstance);\n\n//     // Listen for real-time price updates\n//     socketInstance.on(\"price_update\", (data) => {\n//       console.log(\"WebSocket Price Update:\", data);\n\n//       // Update the price for matching orders\n//       setPnlData((prevData) =>\n//         prevData.map((order) =>\n//           order.symbol === Object.keys(data)[0] // Match the symbol\n//             ? { ...order, currentPrice: Object.values(data)[0] } // Update price\n//             : order\n//         )\n//       );\n//     });\n\n//     return () => {\n//       socketInstance.disconnect(); // Cleanup WebSocket connection\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"PnL %\", \n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">\n//                     {header}\n//                   </th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//   {pnlData\n//     .filter((order) => order) // Ensure only valid objects are processed\n//     .map((order, index) => (\n//       <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//         <td className=\"border border-gray-600 p-2 text-xs\">\n//           {order.timestamp || \"N/A\"}\n//         </td>\n//         <td className=\"border border-gray-600 p-2 text-xs\">\n//           {order.orderId || \"N/A\"}\n//         </td>\n//         <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//           {order.symbol || \"N/A\"}\n//         </td>\n//         <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//           {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//         </td>\n//         <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//           {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//         </td>\n//         <td className=\"border border-gray-600 p-2 text-xs\">\n//           {order.quantity || \"N/A\"}\n//         </td>\n//         <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//           {order.pnlPercentage !== undefined\n//             ? `${order.pnlPercentage.toFixed(2)}%`\n//             : \"N/A\"}\n//         </td>\n//         <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//           {order.sellStatus || \"N/A\"}\n//         </td>\n//       </tr>\n//     ))}\n// </tbody>\n\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState(() => []);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         // setPnlData(response.data);\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n// useEffect(() => {\n//   fetchPnLReport();\n\n//   // Establish WebSocket connection (only once)\n//   if (!socketRef.current) {\n//     socketRef.current = io(SOCKET_URL);\n\n//     socketRef.current.on(\"price_update\", (data) => {\n//       console.log(\"WebSocket Price Update:\", data);\n//       if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//         const symbol = Object.keys(data)[0];\n//         const newPrice = Object.values(data)[0];\n\n//         setPnlData((prevData) =>\n//           prevData\n//           .filter(order => order)\n//           .map((order) =>\n//             order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//           )\n//         );\n//       } else {\n//         console.warn(\"Received invalid WebSocket data:\", data);\n//       }\n//     });\n\n//     socketRef.current.on(\"connect_error\", (err) => {\n//       console.error(\"WebSocket Connection Error:\", err);\n//     });\n\n//     socketRef.current.on(\"disconnect\", () => {\n//       console.warn(\"WebSocket Disconnected\");\n//     });\n//   }\n\n//   return () => {\n//     socketRef.current?.disconnect();\n//     socketRef.current = null;\n//   };\n// }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// **************************************************************************************\n// *********************************************************************************************************\n// **********************************************************************************************************\n// \n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     console.log(\"Updated PnL Data:\", pnlData);\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL, {\n//         transports: [\"websocket\"], // Force WebSocket transport\n//       });\n\n//       // Log WebSocket connection status\n//       socketRef.current.on(\"connect\", () => {\n//         console.log(\"WebSocket Connected\");\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       // Listen for price updates\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         // Update the currentPrice for the corresponding order\n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol\n//               ? { ...order, currentPrice: data.currentPrice }  // Update currentPrice\n//               : order\n//           )\n//         );\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   },[]);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// // import { io } from \"socket.io-client\";\n\n// // Connect with WebSocket transport mode\n// const socket = io(\"http://localhost:5000\", {\n//   transports: [\"websocket\"], // Force WebSocket mode\n// });\n\n// socket.on(\"connect\", () => {\n//   console.log(\"Connected to WebSocket server\");\n// });\n\n// socket.on(\"price_update\", (data) => {\n//   console.log(\"Received price update:\", data);\n// });\n\n// socket.on(\"connect_error\", (err) => {\n//   console.error(\"Socket connection error:\", err);\n// });\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 300);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   useEffect(() => {\n//     console.log(\"Fetching PnL report...\");\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only if not already connected)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL, {\n//         transports: [\"websocket\"],\n//         reconnection: true, // Enable auto-reconnect\n//         reconnectionAttempts: 5, // Try reconnecting 5 times\n//         reconnectionDelay: 2000, // 2 seconds delay between reconnect attempts\n//       });\n\n//       // Log WebSocket events\n//       socketRef.current.on(\"connect\", () => console.log(\"WebSocket Connected\"));\n//       socketRef.current.on(\"disconnect\", () => console.warn(\"WebSocket Disconnected\"));\n//       socketRef.current.on(\"connect_error\", (err) => console.error(\"WebSocket Connection Error:\", err));\n\n//       // Listen for price updates\n//     // const socket = io(\"http://localhost:5000\"); \n//     //   socket.on(\"price_update\", (data) => {\n//     //   console.log(\"Received price update:\", data);\n//     //   if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//     //     const symbol = Object.keys(data)[0];\n//     //     const newPrice = Object.values(data)[0];\n\n//     //     setPnlData((prevData) =>\n//     //       prevData.map((order) =>\n//     //         order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//     //       )\n//     //     );\n//     //   } else {\n//     //     console.warn(\"Received invalid WebSocket data:\", data);\n//     //   }\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol ? { ...order, currentPrice: parseFloat(data.currentPrice) } : order\n//           )\n//         );\n//       });\n//     }\n\n//     return () => {  \n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PnLTable = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    // Fetch initial PnL data\n    const fetchPnLData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/pnl_report');\n        setPnlData(response.data);\n      } catch (error) {\n        console.error('Error fetching PnL data:', error);\n      }\n    };\n    fetchPnLData();\n\n    // Set up WebSocket connection\n    const newSocket = io('http://localhost:5000');\n    setSocket(newSocket);\n    newSocket.on('pnl_update', data => {\n      setPnlData(prevData => {\n        const updatedData = prevData.map(item => item.orderId === data.orderId ? {\n          ...item,\n          ...data\n        } : item);\n        return updatedData;\n      });\n    });\n    newSocket.on('price_update', data => {\n      setPnlData(prevData => {\n        const updatedData = prevData.map(item => item.symbol === data.symbol ? {\n          ...item,\n          currentPrice: data.currentPrice\n        } : item);\n        return updatedData;\n      });\n    });\n    return () => newSocket.close();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Timestamp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1073,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Order ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1074,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1075,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Buy Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1076,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Current Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1077,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1078,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Realized PnL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1079,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Unrealized PnL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1080,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"PnL Percentage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1081,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Profit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1082,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Loss\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1083,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sell Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1084,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1072,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: pnlData.map((data, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1090,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.orderId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1091,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1092,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.buyPrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1093,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.currentPrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1094,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.quantity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1095,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.realizedPnL\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1096,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.unrealizedPnL\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1097,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.pnlPercentage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1098,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.profit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1099,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.loss\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1100,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.sellStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1101,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1089,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1070,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1068,\n    columnNumber: 9\n  }, this);\n};\n_s(PnLTable, \"Lk84Dr/3aqeUzj8KHv12M8J6jy8=\");\n_c = PnLTable;\nexport default PnLTable;\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState(() => []);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         // setPnlData(response.data);\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData\n//             .filter(order => order)\n//             .map((order) =>\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//             )\n//           );\n//         } else {\n//           console.warn(\"Received invalid WebSocket data:\", data);\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                 <tr className=\"bg-gray-800 font-bold text-white\">\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null);\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData.map((order) => {\n//               if (order.symbol === symbol) {\n//                 const updatedCurrentPrice = newPrice;\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\n//                 const realizedPnL = order.realizedPnL || 0;\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\n\n//                 return {\n//                   ...order,\n//                   currentPrice: updatedCurrentPrice,\n//                   unrealizedPnL,\n//                   pnlPercentage,\n//                   profit,\n//                   loss,\n//                   realizedPnL,\n//                 };\n//               }\n//               return order;\n//             })\n//           );\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(4) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td> */}\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{(typeof order.pnlPercentage === \"number\" ? order.pnlPercentage : Number(order.pnlPercentage) || 0).toFixed(2)}%</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n\n//             <tfoot>\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n// const SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\n// const SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [selling, setSelling] = useState(false); // Track sell button state\n//   const socketRef = useRef(null);\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData.map((order) => {\n//               if (order.symbol === symbol) {\n//                 const updatedCurrentPrice = newPrice;\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\n//                 const realizedPnL = order.realizedPnL || 0;\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\n\n//                 return {\n//                   ...order,\n//                   currentPrice: updatedCurrentPrice,\n//                   unrealizedPnL,\n//                   pnlPercentage,\n//                   profit,\n//                   loss,\n//                   realizedPnL,\n//                 };\n//               }\n//               return order;\n//             })\n//           );\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   // Sell a single order\n//   const handleSellOrder = async (orderId) => {\n//     try {\n//       setSelling(true);\n//       await axios.post(SELL_API_URL, { order_id: orderId });\n//       fetchPnLReport(); // Refresh PnL after selling\n//     } catch (error) {\n//       console.error(\"Error selling order:\", error);\n//       setError(\"Failed to sell order.\");\n//     } finally {\n//       setSelling(false);\n//     }\n//   };\n\n//   // Sell all orders\n//   const handleSellAllOrders = async () => {\n//     try {\n//       setSelling(true);\n//       await axios.post(SELL_ALL_API_URL);\n//       fetchPnLReport(); // Refresh PnL after selling all\n//     } catch (error) {\n//       console.error(\"Error selling all orders:\", error);\n//       setError(\"Failed to sell all orders.\");\n//     } finally {\n//       setSelling(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//               {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\", \"Order Sell\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n\n//                   <td className=\"border border-gray-600 p-2\">\n//                     <button\n//                       onClick={() => handleSellOrder(order.orderId)}\n//                       className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-500\"\n//                       disabled={selling}\n//                     >\n//                       Sell\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\n//                  <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2 text-green-500\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2 text-red-500\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2\">\n//                     {/* Sell All Orders Button */}\n//                   <button\n//                     onClick={handleSellAllOrders}\n//                     disabled={selling}\n//                     className=\"bg-red-500 text-white px-2 py-2 rounded hover:bg-red-600\"\n//                   >\n//                     {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\n//                   </button>\n//                   </td> \n//                  </tr>\n//                 </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n//       {/* Success Popup */}\n//      {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n// const SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\n// const SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [selling, setSelling] = useState(false); // Track sell button state\n//   const socketRef = useRef(null);\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     if (!socketRef.current) {\n//       // socketRef.current = io(SOCKET_URL);\n//       socketRef.current = io(SOCKET_URL, { transports: [\"websocket\"] });\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData.map((order) => {\n//               if (order.symbol === symbol) {\n//                 const updatedCurrentPrice = newPrice;\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\n//                 const realizedPnL = order.realizedPnL || 0;\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\n\n//                 return {\n//                   ...order,\n//                   currentPrice: updatedCurrentPrice,\n//                   unrealizedPnL,\n//                   pnlPercentage,\n//                   profit,\n//                   loss,\n//                   realizedPnL,\n//                 };\n//               }\n//               return order;\n//             })\n//           );\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   // Sell a single order\n//   // const handleSellOrder = async (orderId) => {\n//   //   try {\n//   //     setSelling(true);\n//   //     await axios.post(SELL_API_URL, { order_id: orderId });\n//   //     fetchPnLReport(); // Refresh PnL after selling\n//   //   } catch (error) {\n//   //     console.error(\"Error selling order:\", error);\n//   //     setError(\"Failed to sell order.\");\n//   //   } finally {\n//   //     setSelling(false);\n//   //   }\n//   // };\n\n//   const handleSellOrder = async (symbol, orderId) => {\n//     try {\n//       setSelling(true);\n//       setError(null);\n\n//       const response = await axios.post(SELL_API_URL, {\n//         symbol: symbol,\n//         order_id: orderId,\n//       });\n\n//       alert(`Sell Order Placed: ${response.data.message}`);\n//       console.log(response.data);\n\n//       // âœ… Refresh Orders after Selling (Call API to get updated list)\n//       fetchPnLReport(); \n//     } catch (error) {\n//       console.error(\"Error selling order:\", error);\n//       setError(\"Failed to sell order.\");\n//     } finally {\n//       setSelling(false);\n//     }\n//   };\n\n//   // Sell all orders\n//   const handleSellAllOrders = async () => {\n//     try {\n//       setSelling(true);\n//       await axios.post(SELL_ALL_API_URL);\n//       fetchPnLReport(); // Refresh PnL after selling all\n//     } catch (error) {\n//       console.error(\"Error selling all orders:\", error);\n//       setError(\"Failed to sell all orders.\");\n//     } finally {\n//       setSelling(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//               {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\", \"Order Sell\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{typeof order.pnlPercentage === \"number\"? order.pnlPercentage.toFixed(2) + \"%\": \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n\n//                   <td className=\"border border-gray-600 p-2\">\n//                     <button\n//                       onClick={() => handleSellOrder(order.orderId)}\n//                       className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-500\"\n//                       disabled={selling}\n//                     >\n//                       Sell\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\n//                  <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2 text-green-500\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2 text-red-500\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2\">\n//                     {/* Sell All Orders Button */}\n//                   <button\n//                     onClick={handleSellAllOrders}\n//                     disabled={selling}\n//                     className=\"bg-red-500 text-white px-2 py-2 rounded hover:bg-red-600\"\n//                   >\n//                     {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\n//                   </button>\n//                   </td> \n//                  </tr>\n//                 </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n//       {/* Success Popup */}\n//      {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n\n//   );\n// };\n\n// export default PnLReport;\nvar _c;\n$RefreshReg$(_c, \"PnLTable\");","map":{"version":3,"names":["React","useEffect","useState","axios","io","jsxDEV","_jsxDEV","PnLTable","_s","pnlData","setPnlData","socket","setSocket","fetchPnLData","response","get","data","error","console","newSocket","on","prevData","updatedData","map","item","orderId","symbol","currentPrice","close","children","fileName","_jsxFileName","lineNumber","columnNumber","index","timestamp","buyPrice","quantity","realizedPnL","unrealizedPnL","pnlPercentage","profit","loss","sellStatus","_c","$RefreshReg$"],"sources":["D:/stock-alphavantage/src/components/PnlReport.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\r\n//       console.log(\"API Response:\", response.data); // Debugging API Response\r\n\r\n//       // ðŸ”¹ Check if the response is an object instead of an array\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data);\r\n//       } else if (typeof response.data === \"object\") {\r\n//         setPnlData([response.data]); // Wrap single object in an array\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => {\r\n//         setShowPopup(false);\r\n//       }, 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n//     // const interval = setInterval(fetchPnLReport, 20000); // Refresh every 20 sec\r\n\r\n//     // return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [socket, setSocket] = useState(null); // WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data);\r\n//       } else if (typeof response.data === \"object\") {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     const socketInstance = io(SOCKET_URL);\r\n//     setSocket(socketInstance);\r\n\r\n//     // Listen for real-time price updates\r\n//     socketInstance.on(\"price_update\", (data) => {\r\n//       console.log(\"WebSocket Price Update:\", data);\r\n\r\n//       // Update the price for matching orders\r\n//       setPnlData((prevData) =>\r\n//         prevData.map((order) =>\r\n//           order.symbol === Object.keys(data)[0] // Match the symbol\r\n//             ? { ...order, currentPrice: Object.values(data)[0] } // Update price\r\n//             : order\r\n//         )\r\n//       );\r\n//     });\r\n\r\n//     return () => {\r\n//       socketInstance.disconnect(); // Cleanup WebSocket connection\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"PnL %\", \r\n//                   \"Sell Status\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">\r\n//                     {header}\r\n//                   </th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//   {pnlData\r\n//     .filter((order) => order) // Ensure only valid objects are processed\r\n//     .map((order, index) => (\r\n//       <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//         <td className=\"border border-gray-600 p-2 text-xs\">\r\n//           {order.timestamp || \"N/A\"}\r\n//         </td>\r\n//         <td className=\"border border-gray-600 p-2 text-xs\">\r\n//           {order.orderId || \"N/A\"}\r\n//         </td>\r\n//         <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//           {order.symbol || \"N/A\"}\r\n//         </td>\r\n//         <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//           {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//         </td>\r\n//         <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//           {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//         </td>\r\n//         <td className=\"border border-gray-600 p-2 text-xs\">\r\n//           {order.quantity || \"N/A\"}\r\n//         </td>\r\n//         <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//           {order.pnlPercentage !== undefined\r\n//             ? `${order.pnlPercentage.toFixed(2)}%`\r\n//             : \"N/A\"}\r\n//         </td>\r\n//         <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//           {order.sellStatus || \"N/A\"}\r\n//         </td>\r\n//       </tr>\r\n//     ))}\r\n// </tbody>\r\n\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState(() => []);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null); // Persistent WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         // setPnlData(response.data);\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n  // useEffect(() => {\r\n  //   fetchPnLReport();\r\n\r\n  //   // Establish WebSocket connection (only once)\r\n  //   if (!socketRef.current) {\r\n  //     socketRef.current = io(SOCKET_URL);\r\n\r\n  //     socketRef.current.on(\"price_update\", (data) => {\r\n  //       console.log(\"WebSocket Price Update:\", data);\r\n  //       if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\r\n  //         const symbol = Object.keys(data)[0];\r\n  //         const newPrice = Object.values(data)[0];\r\n\r\n  //         setPnlData((prevData) =>\r\n  //           prevData\r\n  //           .filter(order => order)\r\n  //           .map((order) =>\r\n  //             order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\r\n  //           )\r\n  //         );\r\n  //       } else {\r\n  //         console.warn(\"Received invalid WebSocket data:\", data);\r\n  //       }\r\n  //     });\r\n\r\n  //     socketRef.current.on(\"connect_error\", (err) => {\r\n  //       console.error(\"WebSocket Connection Error:\", err);\r\n  //     });\r\n\r\n  //     socketRef.current.on(\"disconnect\", () => {\r\n  //       console.warn(\"WebSocket Disconnected\");\r\n  //     });\r\n  //   }\r\n\r\n  //   return () => {\r\n  //     socketRef.current?.disconnect();\r\n  //     socketRef.current = null;\r\n  //   };\r\n  // }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n// **************************************************************************************\r\n// *********************************************************************************************************\r\n// **********************************************************************************************************\r\n// \r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\r\n\r\n// const SOCKET_URL = \"ws://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null); // Persistent WebSocket instance\r\n  \r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     console.log(\"Updated PnL Data:\", pnlData);\r\n//     fetchPnLReport();\r\n  \r\n//     // Establish WebSocket connection (only once)\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL, {\r\n//         transports: [\"websocket\"], // Force WebSocket transport\r\n//       });\r\n  \r\n//       // Log WebSocket connection status\r\n//       socketRef.current.on(\"connect\", () => {\r\n//         console.log(\"WebSocket Connected\");\r\n//       });\r\n  \r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n  \r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n  \r\n//       // Listen for price updates\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n  \r\n//         // Update the currentPrice for the corresponding order\r\n//         setPnlData((prevData) =>\r\n//           prevData.map((order) =>\r\n//             order.symbol === data.symbol\r\n//               ? { ...order, currentPrice: data.currentPrice }  // Update currentPrice\r\n//               : order\r\n//           )\r\n//         );\r\n//       });\r\n//     }\r\n  \r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   },[]);\r\n  \r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             {/* Footer Row for Totals */}\r\n//               <tfoot>\r\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\r\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                      {pnlData.length > 0\r\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                   : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\r\n//                 </tr>\r\n//               </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\r\n\r\n// const SOCKET_URL = \"ws://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n\r\n\r\n// // import { io } from \"socket.io-client\";\r\n\r\n// // Connect with WebSocket transport mode\r\n// const socket = io(\"http://localhost:5000\", {\r\n//   transports: [\"websocket\"], // Force WebSocket mode\r\n// });\r\n\r\n// socket.on(\"connect\", () => {\r\n//   console.log(\"Connected to WebSocket server\");\r\n// });\r\n\r\n// socket.on(\"price_update\", (data) => {\r\n//   console.log(\"Received price update:\", data);\r\n// });\r\n\r\n// socket.on(\"connect_error\", (err) => {\r\n//   console.error(\"Socket connection error:\", err);\r\n// });\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null); // Persistent WebSocket instance\r\n  \r\n//   // const socket = io(\"http://localhost:5000\"); \r\n//   //   socket.on(\"price_update\", (data) => {\r\n//   //   console.log(\"Received price update:\", data);\r\n//   // });\r\n\r\n//   // const socket = io(\"http://localhost:5000\"); \r\n//   //   socket.on(\"price_update\", (data) => {\r\n//   //   console.log(\"Received price update:\", data);\r\n//   // });\r\n\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 300);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     console.log(\"Fetching PnL report...\");\r\n//     fetchPnLReport();\r\n  \r\n//     // Establish WebSocket connection (only if not already connected)\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL, {\r\n//         transports: [\"websocket\"],\r\n//         reconnection: true, // Enable auto-reconnect\r\n//         reconnectionAttempts: 5, // Try reconnecting 5 times\r\n//         reconnectionDelay: 2000, // 2 seconds delay between reconnect attempts\r\n//       });\r\n  \r\n//       // Log WebSocket events\r\n//       socketRef.current.on(\"connect\", () => console.log(\"WebSocket Connected\"));\r\n//       socketRef.current.on(\"disconnect\", () => console.warn(\"WebSocket Disconnected\"));\r\n//       socketRef.current.on(\"connect_error\", (err) => console.error(\"WebSocket Connection Error:\", err));\r\n  \r\n//       // Listen for price updates\r\n//     // const socket = io(\"http://localhost:5000\"); \r\n//     //   socket.on(\"price_update\", (data) => {\r\n//     //   console.log(\"Received price update:\", data);\r\n//     //   if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\r\n//     //     const symbol = Object.keys(data)[0];\r\n//     //     const newPrice = Object.values(data)[0];\r\n\r\n//     //     setPnlData((prevData) =>\r\n//     //       prevData.map((order) =>\r\n//     //         order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\r\n//     //       )\r\n//     //     );\r\n//     //   } else {\r\n//     //     console.warn(\"Received invalid WebSocket data:\", data);\r\n//     //   }\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n  \r\n//         setPnlData((prevData) =>\r\n//           prevData.map((order) =>\r\n//             order.symbol === data.symbol ? { ...order, currentPrice: parseFloat(data.currentPrice) } : order\r\n//           )\r\n//         );\r\n//       });\r\n//     }\r\n  \r\n//     return () => {  \r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n  \r\n  \r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             {/* Footer Row for Totals */}\r\n//               <tfoot>\r\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\r\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                      {pnlData.length > 0\r\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                   : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\r\n//                 </tr>\r\n//               </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\n\r\nconst PnLTable = () => {\r\n    const [pnlData, setPnlData] = useState([]);\r\n    const [socket, setSocket] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Fetch initial PnL data\r\n        const fetchPnLData = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/api/pnl_report');\r\n                setPnlData(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching PnL data:', error);\r\n            }\r\n        };\r\n\r\n        fetchPnLData();\r\n\r\n        // Set up WebSocket connection\r\n        const newSocket = io('http://localhost:5000');\r\n        setSocket(newSocket);\r\n\r\n        newSocket.on('pnl_update', (data) => {\r\n            setPnlData((prevData) => {\r\n                const updatedData = prevData.map((item) =>\r\n                    item.orderId === data.orderId ? { ...item, ...data } : item\r\n                );\r\n                return updatedData;\r\n            });\r\n        });\r\n\r\n        newSocket.on('price_update', (data) => {\r\n            setPnlData((prevData) => {\r\n                const updatedData = prevData.map((item) =>\r\n                    item.symbol === data.symbol ? { ...item, currentPrice: data.currentPrice } : item\r\n                );\r\n                return updatedData;\r\n            });\r\n        });\r\n\r\n        return () => newSocket.close();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>PnL Report</h2>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Timestamp</th>\r\n                        <th>Order ID</th>\r\n                        <th>Symbol</th>\r\n                        <th>Buy Price</th>\r\n                        <th>Current Price</th>\r\n                        <th>Quantity</th>\r\n                        <th>Realized PnL</th>\r\n                        <th>Unrealized PnL</th>\r\n                        <th>PnL Percentage</th>\r\n                        <th>Profit</th>\r\n                        <th>Loss</th>\r\n                        <th>Sell Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {pnlData.map((data, index) => (\r\n                        <tr key={index}>\r\n                            <td>{data.timestamp}</td>\r\n                            <td>{data.orderId}</td>\r\n                            <td>{data.symbol}</td>\r\n                            <td>{data.buyPrice}</td>\r\n                            <td>{data.currentPrice}</td>\r\n                            <td>{data.quantity}</td>\r\n                            <td>{data.realizedPnL}</td>\r\n                            <td>{data.unrealizedPnL}</td>\r\n                            <td>{data.pnlPercentage}</td>\r\n                            <td>{data.profit}</td>\r\n                            <td>{data.loss}</td>\r\n                            <td>{data.sellStatus}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PnLTable;\r\n\r\n\r\n\r\n\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState(() => []);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null); // Persistent WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         // setPnlData(response.data);\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection (only once)\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData\r\n//             .filter(order => order)\r\n//             .map((order) =>\r\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\r\n//             )\r\n//           );\r\n//         } else {\r\n//           console.warn(\"Received invalid WebSocket data:\", data);\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             {/* Footer Row for Totals */}\r\n//               <tfoot>\r\n//                 <tr className=\"bg-gray-800 font-bold text-white\">\r\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\r\n//                 </tr>\r\n//               </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null);\r\n  \r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData.map((order) => {\r\n//               if (order.symbol === symbol) {\r\n//                 const updatedCurrentPrice = newPrice;\r\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\r\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\r\n//                 const realizedPnL = order.realizedPnL || 0;\r\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\r\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\r\n\r\n//                 return {\r\n//                   ...order,\r\n//                   currentPrice: updatedCurrentPrice,\r\n//                   unrealizedPnL,\r\n//                   pnlPercentage,\r\n//                   profit,\r\n//                   loss,\r\n//                   realizedPnL,\r\n//                 };\r\n//               }\r\n//               return order;\r\n//             })\r\n//           );\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(4) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td> */}\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{(typeof order.pnlPercentage === \"number\" ? order.pnlPercentage : Number(order.pnlPercentage) || 0).toFixed(2)}%</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n\r\n//             <tfoot>\r\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\r\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\r\n//                 </tr>\r\n//               </tfoot>\r\n//           </table>\r\n\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n// const SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\r\n// const SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [selling, setSelling] = useState(false); // Track sell button state\r\n//   const socketRef = useRef(null);\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData.map((order) => {\r\n//               if (order.symbol === symbol) {\r\n//                 const updatedCurrentPrice = newPrice;\r\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\r\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\r\n//                 const realizedPnL = order.realizedPnL || 0;\r\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\r\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\r\n\r\n//                 return {\r\n//                   ...order,\r\n//                   currentPrice: updatedCurrentPrice,\r\n//                   unrealizedPnL,\r\n//                   pnlPercentage,\r\n//                   profit,\r\n//                   loss,\r\n//                   realizedPnL,\r\n//                 };\r\n//               }\r\n//               return order;\r\n//             })\r\n//           );\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   // Sell a single order\r\n//   const handleSellOrder = async (orderId) => {\r\n//     try {\r\n//       setSelling(true);\r\n//       await axios.post(SELL_API_URL, { order_id: orderId });\r\n//       fetchPnLReport(); // Refresh PnL after selling\r\n//     } catch (error) {\r\n//       console.error(\"Error selling order:\", error);\r\n//       setError(\"Failed to sell order.\");\r\n//     } finally {\r\n//       setSelling(false);\r\n//     }\r\n//   };\r\n\r\n//   // Sell all orders\r\n//   const handleSellAllOrders = async () => {\r\n//     try {\r\n//       setSelling(true);\r\n//       await axios.post(SELL_ALL_API_URL);\r\n//       fetchPnLReport(); // Refresh PnL after selling all\r\n//     } catch (error) {\r\n//       console.error(\"Error selling all orders:\", error);\r\n//       setError(\"Failed to sell all orders.\");\r\n//     } finally {\r\n//       setSelling(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n      \r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//               {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\", \"Order Sell\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n\r\n//                   <td className=\"border border-gray-600 p-2\">\r\n//                     <button\r\n//                       onClick={() => handleSellOrder(order.orderId)}\r\n//                       className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-500\"\r\n//                       disabled={selling}\r\n//                     >\r\n//                       Sell\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             <tfoot>\r\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\r\n//                  <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                    ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2\">\r\n//                     {/* Sell All Orders Button */}\r\n//                   <button\r\n//                     onClick={handleSellAllOrders}\r\n//                     disabled={selling}\r\n//                     className=\"bg-red-500 text-white px-2 py-2 rounded hover:bg-red-600\"\r\n//                   >\r\n//                     {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\r\n//                   </button>\r\n//                   </td> \r\n//                  </tr>\r\n//                 </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n//       {/* Success Popup */}\r\n//      {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n    \r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n// const SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\r\n// const SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [selling, setSelling] = useState(false); // Track sell button state\r\n//   const socketRef = useRef(null);\r\n\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     if (!socketRef.current) {\r\n//       // socketRef.current = io(SOCKET_URL);\r\n//       socketRef.current = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData.map((order) => {\r\n//               if (order.symbol === symbol) {\r\n//                 const updatedCurrentPrice = newPrice;\r\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\r\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\r\n//                 const realizedPnL = order.realizedPnL || 0;\r\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\r\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\r\n\r\n//                 return {\r\n//                   ...order,\r\n//                   currentPrice: updatedCurrentPrice,\r\n//                   unrealizedPnL,\r\n//                   pnlPercentage,\r\n//                   profit,\r\n//                   loss,\r\n//                   realizedPnL,\r\n//                 };\r\n//               }\r\n//               return order;\r\n//             })\r\n//           );\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   // Sell a single order\r\n//   // const handleSellOrder = async (orderId) => {\r\n//   //   try {\r\n//   //     setSelling(true);\r\n//   //     await axios.post(SELL_API_URL, { order_id: orderId });\r\n//   //     fetchPnLReport(); // Refresh PnL after selling\r\n//   //   } catch (error) {\r\n//   //     console.error(\"Error selling order:\", error);\r\n//   //     setError(\"Failed to sell order.\");\r\n//   //   } finally {\r\n//   //     setSelling(false);\r\n//   //   }\r\n//   // };\r\n\r\n//   const handleSellOrder = async (symbol, orderId) => {\r\n//     try {\r\n//       setSelling(true);\r\n//       setError(null);\r\n\r\n//       const response = await axios.post(SELL_API_URL, {\r\n//         symbol: symbol,\r\n//         order_id: orderId,\r\n//       });\r\n\r\n//       alert(`Sell Order Placed: ${response.data.message}`);\r\n//       console.log(response.data);\r\n\r\n//       // âœ… Refresh Orders after Selling (Call API to get updated list)\r\n//       fetchPnLReport(); \r\n//     } catch (error) {\r\n//       console.error(\"Error selling order:\", error);\r\n//       setError(\"Failed to sell order.\");\r\n//     } finally {\r\n//       setSelling(false);\r\n//     }\r\n//   };\r\n\r\n//   // Sell all orders\r\n//   const handleSellAllOrders = async () => {\r\n//     try {\r\n//       setSelling(true);\r\n//       await axios.post(SELL_ALL_API_URL);\r\n//       fetchPnLReport(); // Refresh PnL after selling all\r\n//     } catch (error) {\r\n//       console.error(\"Error selling all orders:\", error);\r\n//       setError(\"Failed to sell all orders.\");\r\n//     } finally {\r\n//       setSelling(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n      \r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//               {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\", \"Order Sell\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{typeof order.pnlPercentage === \"number\"? order.pnlPercentage.toFixed(2) + \"%\": \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n\r\n//                   <td className=\"border border-gray-600 p-2\">\r\n//                     <button\r\n//                       onClick={() => handleSellOrder(order.orderId)}\r\n//                       className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-500\"\r\n//                       disabled={selling}\r\n//                     >\r\n//                       Sell\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             <tfoot>\r\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\r\n//                  <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                    ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2\">\r\n//                     {/* Sell All Orders Button */}\r\n//                   <button\r\n//                     onClick={handleSellAllOrders}\r\n//                     disabled={selling}\r\n//                     className=\"bg-red-500 text-white px-2 py-2 rounded hover:bg-red-600\"\r\n//                   >\r\n//                     {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\r\n//                   </button>\r\n//                   </td> \r\n//                  </tr>\r\n//                 </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n//       {/* Success Popup */}\r\n//      {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n    \r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n"],"mappingsaeA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,sCAAsC,CAAC;QACxEL,UAAU,CAACI,QAAQ,CAACE,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IAEDJ,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMM,SAAS,GAAGf,EAAE,CAAC,uBAAuB,CAAC;IAC7CQ,SAAS,CAACO,SAAS,CAAC;IAEpBA,SAAS,CAACC,EAAE,CAAC,YAAY,EAAGJ,IAAI,IAAK;MACjCN,UAAU,CAAEW,QAAQ,IAAK;QACrB,MAAMC,WAAW,GAAGD,QAAQ,CAACE,GAAG,CAAEC,IAAI,IAClCA,IAAI,CAACC,OAAO,KAAKT,IAAI,CAACS,OAAO,GAAG;UAAE,GAAGD,IAAI;UAAE,GAAGR;QAAK,CAAC,GAAGQ,IAC3D,CAAC;QACD,OAAOF,WAAW;MACtB,CAAC,CAAC;IACN,CAAC,CAAC;IAEFH,SAAS,CAACC,EAAE,CAAC,cAAc,EAAGJ,IAAI,IAAK;MACnCN,UAAU,CAAEW,QAAQ,IAAK;QACrB,MAAMC,WAAW,GAAGD,QAAQ,CAACE,GAAG,CAAEC,IAAI,IAClCA,IAAI,CAACE,MAAM,KAAKV,IAAI,CAACU,MAAM,GAAG;UAAE,GAAGF,IAAI;UAAEG,YAAY,EAAEX,IAAI,CAACW;QAAa,CAAC,GAAGH,IACjF,CAAC;QACD,OAAOF,WAAW;MACtB,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAMH,SAAS,CAACS,KAAK,CAAC,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACItB,OAAA;IAAAuB,QAAA,gBACIvB,OAAA;MAAAuB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB3B,OAAA;MAAAuB,QAAA,gBACIvB,OAAA;QAAAuB,QAAA,eACIvB,OAAA;UAAAuB,QAAA,gBACIvB,OAAA;YAAAuB,QAAA,EAAI;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClB3B,OAAA;YAAAuB,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjB3B,OAAA;YAAAuB,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACf3B,OAAA;YAAAuB,QAAA,EAAI;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClB3B,OAAA;YAAAuB,QAAA,EAAI;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtB3B,OAAA;YAAAuB,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjB3B,OAAA;YAAAuB,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrB3B,OAAA;YAAAuB,QAAA,EAAI;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvB3B,OAAA;YAAAuB,QAAA,EAAI;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvB3B,OAAA;YAAAuB,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACf3B,OAAA;YAAAuB,QAAA,EAAI;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACb3B,OAAA;YAAAuB,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACR3B,OAAA;QAAAuB,QAAA,EACKpB,OAAO,CAACc,GAAG,CAAC,CAACP,IAAI,EAAEkB,KAAK,kBACrB5B,OAAA;UAAAuB,QAAA,gBACIvB,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACmB;UAAS;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACzB3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACS;UAAO;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACvB3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACU;UAAM;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACtB3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACoB;UAAQ;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxB3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACW;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5B3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACqB;UAAQ;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxB3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACsB;UAAW;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC3B3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACuB;UAAa;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC7B3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACwB;UAAa;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC7B3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAACyB;UAAM;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACtB3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAAC0B;UAAI;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpB3B,OAAA;YAAAuB,QAAA,EAAKb,IAAI,CAAC2B;UAAU;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,GAZrBC,KAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;AAACzB,EAAA,CAnFID,QAAQ;AAAAqC,EAAA,GAARrC,QAAQ;AAqFd,eAAeA,QAAQ;;AAKvB;AACA;AACA;AACA;AACA;AACA;;AAccaqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
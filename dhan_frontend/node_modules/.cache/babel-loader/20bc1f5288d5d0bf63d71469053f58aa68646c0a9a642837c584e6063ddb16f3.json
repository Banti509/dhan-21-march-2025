{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js\",\n  _s = $RefreshSig$();\n// **************************************************************************************\n// *********************************************************************************************************\n// **********************************************************************************************************\n// \n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000/ws\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       } \n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       console.log(\"****************** Error:\", err)\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     console.log(\"Updated PnL Data:\", pnlData);\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(\"/socket.io/?EIO=4&transport=websocket\", {\n//         transports: [\"websocket\"], // Force WebSocket transport\n\n//       });\n\n//       // Log WebSocket connection status\n//       socketRef.current.on(\"connect\", () => {\n//         console.log(\"WebSocket Connected\", socketRef);\n//         console.log(\"WebSocket Connecte=================d\", SOCKET_URL);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       // Listen for price updates\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         // Update the currentPrice for the corresponding order\n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol\n//               ? { ...order, currentPrice: data.currentPrice }  // Update currentPrice\n//               : order\n//           )\n//         );\n//       });\n//     }\n\n//     return () => {\n//       if (socketRef.current) {\n//         socketRef.current.disconnect();\n//         socketRef.current = null;\n//       }\n//     };\n//   }, []);\n\n//   //   return () => {\n//   //     socketRef.current?.disconnect();\n//   //     socketRef.current = null;\n//   //   };\n//   // },[]);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// // import { io } from \"socket.io-client\";\n\n// // Connect with WebSocket transport mode\n// const socket = io(\"http://localhost:5000\", {\n//   transports: [\"websocket\"], // Force WebSocket mode\n// });\n\n// socket.on(\"connect\", () => {\n//   console.log(\"Connected to WebSocket server\");\n// });\n\n// socket.on(\"price_update\", (data) => {\n//   console.log(\"Received price update:\", data);\n// });\n\n// socket.on(\"connect_error\", (err) => {\n//   console.error(\"Socket connection error:\", err);\n// });\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 300);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   useEffect(() => {\n//     console.log(\"Fetching PnL report...\");\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only if not already connected)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL, {\n//         transports: [\"websocket\"],\n//         reconnection: true, // Enable auto-reconnect\n//         reconnectionAttempts: 5, // Try reconnecting 5 times\n//         reconnectionDelay: 2000, // 2 seconds delay between reconnect attempts\n//       });\n\n//       // Log WebSocket events\n//       socketRef.current.on(\"connect\", () => console.log(\"WebSocket Connected\"));\n//       socketRef.current.on(\"disconnect\", () => console.warn(\"WebSocket Disconnected\"));\n//       socketRef.current.on(\"connect_error\", (err) => console.error(\"WebSocket Connection Error:\", err));\n\n//       // Listen for price updates\n//     // const socket = io(\"http://localhost:5000\"); \n//     //   socket.on(\"price_update\", (data) => {\n//     //   console.log(\"Received price update:\", data);\n//     //   if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//     //     const symbol = Object.keys(data)[0];\n//     //     const newPrice = Object.values(data)[0];\n\n//     //     setPnlData((prevData) =>\n//     //       prevData.map((order) =>\n//     //         order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//     //       )\n//     //     );\n//     //   } else {\n//     //     console.warn(\"Received invalid WebSocket data:\", data);\n//     //   }\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol ? { ...order, currentPrice: parseFloat(data.currentPrice) } : order\n//           )\n//         );\n//       });\n//     }\n\n//     return () => {  \n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n\n// import React, { useEffect, useState } from \"react\";\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n\n//     // Fetch PnL report from backend API\n//     const fetchPnlReport = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\") {\n//                 setPnlData(data.pnl_report);\n//             }\n//         } catch (error) {\n//             console.error(\"Error fetching PnL report:\", error);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     // Fetch data every 5 seconds\n//     useEffect(() => {\n//         fetchPnlReport();\n//         const interval = setInterval(fetchPnlReport, 500000);\n//         return () => clearInterval(interval);\n//     }, []);\n\n//     return (\n//         <div className=\"p-4\">\n//             <h2 className=\"text-xl font-bold mb-4\">Live PnL Report</h2>\n//             {loading ? (\n//                 <p>Loading...</p>\n//             ) : (\n//                 <table className=\"table-auto w-full border-collapse border border-green-200\">\n//                     <thead>\n//                         <tr className=\"bg-black-400\">\n//                             <th className=\"border p-2\">Order ID</th>\n//                             <th className=\"border p-2\">Security ID</th>\n//                             <th className=\"border p-2\">Exchange</th>\n//                             <th className=\"border p-2\">Type</th>\n//                             <th className=\"border p-2\">Quantity</th>\n//                             <th className=\"border p-2\">Order Price</th>\n//                             <th className=\"border p-2\">Latest Price</th>\n//                             <th className=\"border p-2\">PnL</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {pnlData.map((order) => (\n//                             <tr key={order.order_id}>\n//                                 <td className=\"border p-2\">{order.order_id}</td>\n//                                 <td className=\"border p-2\">{order.security_id}</td>\n//                                 <td className=\"border p-2\">{order.exchange_segment}</td>\n//                                 <td className=\"border p-2\">{order.transaction_type}</td>\n//                                 <td className=\"border p-2\">{order.quantity}</td>\n//                                 <td className=\"border p-2\">{order.order_price.toFixed(2)}</td>\n//                                 <td className=\"border p-2\">{order.latest_price.toFixed(2)}</td>\n//                                 <td className={`border p-2 ${order.pnl >= 0 ? \"text-green-600\" : \"text-red-600\"}`}>\n//                                     {order.pnl.toFixed(2)}\n//                                 </td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\nimport React, { useEffect, useState } from \"react\";\nimport { Loader } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PnlReport = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch PnL report from backend API\n  const fetchPnlReport = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.status === \"success\") {\n        setPnlData(data.pnl_report);\n      } else {\n        setError(\"Failed to load data\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching PnL report:\", error);\n      setError(\"Error fetching PnL report\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch data every 5 seconds\n  useEffect(() => {\n    fetchPnlReport();\n    const interval = setInterval(fetchPnlReport, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-100 min-h-screen flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-gray-800\",\n      children: \"\\uD83D\\uDCCA Live PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-20\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        className: \"animate-spin text-blue-500\",\n        size: 32\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-semibold\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-5xl bg-white shadow-md rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full text-sm text-gray-700\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-blue-600 text-white uppercase text-xs\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Order ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Security ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Exchange\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Order Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 646,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Latest Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"divide-y divide-gray-300\",\n            children: pnlData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"8\",\n                className: \"p-4 text-center text-gray-500\",\n                children: \"No orders available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 37\n            }, this) : pnlData.map(order => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"hover:bg-gray-100\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.order_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.security_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 662,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.exchange_segment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 663,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.transaction_type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 664,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.quantity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: order.order_price.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: order.latest_price.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 667,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 font-bold text-lg ${order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: order.pnl.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 45\n              }, this)]\n            }, order.order_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 626,\n    columnNumber: 9\n  }, this);\n};\n_s(PnlReport, \"Itcd+4SLNDjb8y3nzbw1gmo0oS8=\");\n_c = PnlReport;\nexport default PnlReport;\nvar _c;\n$RefreshReg$(_c, \"PnlReport\");","map":{"version":3,"names":["React","useEffect","useState","Loader","jsxDEV","_jsxDEV","PnlReport","_s","pnlData","setPnlData","loading","setLoading","error","setError","fetchPnlReport","response","fetch","ok","Error","status","data","json","pnl_report","console","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","length","colSpan","map","order","order_id","security_id","exchange_segment","transaction_type","quantity","order_price","toFixed","latest_price","pnl","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js"],"sourcesContent":["\n\n// **************************************************************************************\n// *********************************************************************************************************\n// **********************************************************************************************************\n// \n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000/ws\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n  \n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       } \n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       console.log(\"****************** Error:\", err)\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     console.log(\"Updated PnL Data:\", pnlData);\n//     fetchPnLReport();\n  \n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(\"/socket.io/?EIO=4&transport=websocket\", {\n//         transports: [\"websocket\"], // Force WebSocket transport\n        \n//       });\n  \n//       // Log WebSocket connection status\n//       socketRef.current.on(\"connect\", () => {\n//         console.log(\"WebSocket Connected\", socketRef);\n//         console.log(\"WebSocket Connecte=================d\", SOCKET_URL);\n//       });\n  \n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n  \n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n  \n//       // Listen for price updates\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n  \n//         // Update the currentPrice for the corresponding order\n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol\n//               ? { ...order, currentPrice: data.currentPrice }  // Update currentPrice\n//               : order\n//           )\n//         );\n//       });\n//     }\n\n//     return () => {\n//       if (socketRef.current) {\n//         socketRef.current.disconnect();\n//         socketRef.current = null;\n//       }\n//     };\n//   }, []);\n  \n//   //   return () => {\n//   //     socketRef.current?.disconnect();\n//   //     socketRef.current = null;\n//   //   };\n//   // },[]);\n\n  \n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n\n\n// // import { io } from \"socket.io-client\";\n\n// // Connect with WebSocket transport mode\n// const socket = io(\"http://localhost:5000\", {\n//   transports: [\"websocket\"], // Force WebSocket mode\n// });\n\n// socket.on(\"connect\", () => {\n//   console.log(\"Connected to WebSocket server\");\n// });\n\n// socket.on(\"price_update\", (data) => {\n//   console.log(\"Received price update:\", data);\n// });\n\n// socket.on(\"connect_error\", (err) => {\n//   console.error(\"Socket connection error:\", err);\n// });\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n  \n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 300);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   useEffect(() => {\n//     console.log(\"Fetching PnL report...\");\n//     fetchPnLReport();\n  \n//     // Establish WebSocket connection (only if not already connected)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL, {\n//         transports: [\"websocket\"],\n//         reconnection: true, // Enable auto-reconnect\n//         reconnectionAttempts: 5, // Try reconnecting 5 times\n//         reconnectionDelay: 2000, // 2 seconds delay between reconnect attempts\n//       });\n  \n//       // Log WebSocket events\n//       socketRef.current.on(\"connect\", () => console.log(\"WebSocket Connected\"));\n//       socketRef.current.on(\"disconnect\", () => console.warn(\"WebSocket Disconnected\"));\n//       socketRef.current.on(\"connect_error\", (err) => console.error(\"WebSocket Connection Error:\", err));\n  \n//       // Listen for price updates\n//     // const socket = io(\"http://localhost:5000\"); \n//     //   socket.on(\"price_update\", (data) => {\n//     //   console.log(\"Received price update:\", data);\n//     //   if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//     //     const symbol = Object.keys(data)[0];\n//     //     const newPrice = Object.values(data)[0];\n\n//     //     setPnlData((prevData) =>\n//     //       prevData.map((order) =>\n//     //         order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//     //       )\n//     //     );\n//     //   } else {\n//     //     console.warn(\"Received invalid WebSocket data:\", data);\n//     //   }\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n  \n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol ? { ...order, currentPrice: parseFloat(data.currentPrice) } : order\n//           )\n//         );\n//       });\n//     }\n  \n//     return () => {  \n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n  \n  \n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n\n//     // Fetch PnL report from backend API\n//     const fetchPnlReport = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\") {\n//                 setPnlData(data.pnl_report);\n//             }\n//         } catch (error) {\n//             console.error(\"Error fetching PnL report:\", error);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     // Fetch data every 5 seconds\n//     useEffect(() => {\n//         fetchPnlReport();\n//         const interval = setInterval(fetchPnlReport, 500000);\n//         return () => clearInterval(interval);\n//     }, []);\n\n//     return (\n//         <div className=\"p-4\">\n//             <h2 className=\"text-xl font-bold mb-4\">Live PnL Report</h2>\n//             {loading ? (\n//                 <p>Loading...</p>\n//             ) : (\n//                 <table className=\"table-auto w-full border-collapse border border-green-200\">\n//                     <thead>\n//                         <tr className=\"bg-black-400\">\n//                             <th className=\"border p-2\">Order ID</th>\n//                             <th className=\"border p-2\">Security ID</th>\n//                             <th className=\"border p-2\">Exchange</th>\n//                             <th className=\"border p-2\">Type</th>\n//                             <th className=\"border p-2\">Quantity</th>\n//                             <th className=\"border p-2\">Order Price</th>\n//                             <th className=\"border p-2\">Latest Price</th>\n//                             <th className=\"border p-2\">PnL</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {pnlData.map((order) => (\n//                             <tr key={order.order_id}>\n//                                 <td className=\"border p-2\">{order.order_id}</td>\n//                                 <td className=\"border p-2\">{order.security_id}</td>\n//                                 <td className=\"border p-2\">{order.exchange_segment}</td>\n//                                 <td className=\"border p-2\">{order.transaction_type}</td>\n//                                 <td className=\"border p-2\">{order.quantity}</td>\n//                                 <td className=\"border p-2\">{order.order_price.toFixed(2)}</td>\n//                                 <td className=\"border p-2\">{order.latest_price.toFixed(2)}</td>\n//                                 <td className={`border p-2 ${order.pnl >= 0 ? \"text-green-600\" : \"text-red-600\"}`}>\n//                                     {order.pnl.toFixed(2)}\n//                                 </td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { Loader } from \"lucide-react\";\n\nconst PnlReport = () => {\n    const [pnlData, setPnlData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Fetch PnL report from backend API\n    const fetchPnlReport = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (data.status === \"success\") {\n                setPnlData(data.pnl_report);\n            } else {\n                setError(\"Failed to load data\");\n            }\n        } catch (error) {\n            console.error(\"Error fetching PnL report:\", error);\n            setError(\"Error fetching PnL report\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Fetch data every 5 seconds\n    useEffect(() => {\n        fetchPnlReport();\n        const interval = setInterval(fetchPnlReport, 5000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"p-6 bg-gray-100 min-h-screen flex flex-col items-center\">\n            <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">📊 Live PnL Report</h2>\n\n            {loading ? (\n                <div className=\"flex justify-center items-center h-20\">\n                    <Loader className=\"animate-spin text-blue-500\" size={32} />\n                </div>\n            ) : error ? (\n                <p className=\"text-red-500 font-semibold\">{error}</p>\n            ) : (\n                <div className=\"w-full max-w-5xl bg-white shadow-md rounded-lg overflow-hidden\">\n                    <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm text-gray-700\">\n                            <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n                                <tr>\n                                    <th className=\"px-4 py-2\">Order ID</th>\n                                    <th className=\"px-4 py-2\">Security ID</th>\n                                    <th className=\"px-4 py-2\">Exchange</th>\n                                    <th className=\"px-4 py-2\">Type</th>\n                                    <th className=\"px-4 py-2\">Quantity</th>\n                                    <th className=\"px-4 py-2\">Order Price</th>\n                                    <th className=\"px-4 py-2\">Latest Price</th>\n                                    <th className=\"px-4 py-2\">PnL</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-gray-300\">\n                                {pnlData.length === 0 ? (\n                                    <tr>\n                                        <td colSpan=\"8\" className=\"p-4 text-center text-gray-500\">\n                                            No orders available.\n                                        </td>\n                                    </tr>\n                                ) : (\n                                    pnlData.map((order) => (\n                                        <tr key={order.order_id} className=\"hover:bg-gray-100\">\n                                            <td className=\"px-4 py-2\">{order.order_id}</td>\n                                            <td className=\"px-4 py-2\">{order.security_id}</td>\n                                            <td className=\"px-4 py-2\">{order.exchange_segment}</td>\n                                            <td className=\"px-4 py-2\">{order.transaction_type}</td>\n                                            <td className=\"px-4 py-2\">{order.quantity}</td>\n                                            <td className=\"px-4 py-2 font-semibold\">{order.order_price.toFixed(2)}</td>\n                                            <td className=\"px-4 py-2 font-semibold\">{order.latest_price.toFixed(2)}</td>\n                                            <td\n                                                className={`px-4 py-2 font-bold text-lg ${\n                                                    order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n                                                }`}\n                                            >\n                                                {order.pnl.toFixed(2)}\n                                            </td>\n                                        </tr>\n                                    ))\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PnlReport;\n"],"mappings":";;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAeA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AASA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\nconst PnlReport = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch initial data from Flask API\n  const fetchInitialData = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n      const data = await response.json();\n      if (data.status === \"success\" && Array.isArray(data.orders)) {\n        setPnlData(data.orders); // Initial data from API\n      } else {\n        setError(\"Invalid API response structure.\");\n      }\n    } catch (err) {\n      setError(\"API request failed.\");\n    }\n    setLoading(false);\n  };\n  useEffect(() => {\n    fetchInitialData(); // Fetch initial orders from Flask\n\n    // Listen for live PnL updates from WebSocket\n    socket.on(\"pnl_update\", data => {\n      if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n        setPnlData(data.pnl_report); // Update live data\n      } else {\n        setError(\"Invalid WebSocket data.\");\n      }\n    });\n    socket.on(\"connect_error\", err => {\n      console.error(\"Socket connection error:\", err);\n      setError(\"WebSocket connection failed.\");\n    });\n    return () => {\n      socket.off(\"pnl_update\");\n      socket.off(\"connect_error\");\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83D\\uDCCA Live PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-300\",\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-semibold\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full text-sm text-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-blue-600 text-white uppercase text-xs\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Order ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Security ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Entry Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Latest Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"divide-y divide-gray-700\",\n            children: pnlData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"8\",\n                className: \"p-4 text-center text-gray-500\",\n                children: \"No orders available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }, this) : pnlData.map(order => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"hover:bg-gray-700\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.order_id || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.security_id || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.transaction_type || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.quantity || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 font-bold text-lg ${order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: [order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\", \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 45\n              }, this)]\n            }, order.order_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(PnlReport, \"Itcd+4SLNDjb8y3nzbw1gmo0oS8=\");\n_c = PnlReport;\nexport default PnlReport;\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate total profit, total loss, and net PnL\n//     const totalProfit = pnlData\n//         .filter(order => order.pnl > 0)\n//         .reduce((sum, order) => sum + (order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const totalLoss = pnlData\n//         .filter(order => order.pnl < 0)\n//         .reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const netPnl = (totalProfit - totalLoss).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th> {/* New Column */}\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Total Profit & Loss */}\n//                             <tfoot className=\"bg-gray-900 text-white text-lg font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Profit:</td>\n//                                     <td className=\"px-4 py-3 text-green-500\">{totalProfit}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Loss:</td>\n//                                     <td className=\"px-4 py-3 text-red-500\">-{totalLoss}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Net PnL:</td>\n//                                     <td\n//                                         className={`px-4 py-3 font-bold ${\n//                                             netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                         }`}\n//                                     >\n//                                         {netPnl}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate totals for table columns\n//     // const totalQuantity = pnlData.reduce((sum, order) => sum + (order.quantity || 0), 0);\n//     const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n//     const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n//     const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n//     const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n//     const netPnl = totalProfit - totalLoss;\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-300 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Totals */}\n//                             <tfoot className=\"bg-gray-200 text-black font-bold\">\n//                                 <tr className=\"border-t border-gray-200 bg-gray-200\">\n//                                     <td className=\"px-12 py- text-right\" colSpan=\"4\">Total:</td>\n//                                     {/* <td className=\"px-4 py-3\">{totalQuantity}</td> */}\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n//                                     <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>\n//                                         {netPnl.toFixed(2)}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">loss</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const socket = io(\"http://127.0.0.1:5000\", {\n//             reconnectionAttempts: 5, // Try reconnecting 5 times\n//             reconnectionDelay: 2000, // Wait 2 seconds before retry\n//         });\n\n//         // Fetch initial PnL data\n//         const fetchInitialData = async () => {\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//                 const data = await response.json();\n//                 if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                     setPnlData(data.orders); // Set initial API data\n//                 } else {\n//                     setError(\"Invalid API response structure.\");\n//                 }\n//             } catch (err) {\n//                 setError(\"API request failed.\");\n//             }\n//             setLoading(false);\n//         };\n\n//         fetchInitialData();\n\n//         // Listen for real-time PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         // Handle WebSocket errors\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         // Cleanup WebSocket connection on unmount\n//         return () => {\n//             socket.disconnect();\n//         };\n//     }, []);\n\n//     // Total PnL Calculations\n//     const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n//     const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n//     const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n//     const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n//     const netPnl = totalProfit - totalLoss;\n//     const pnlPercentage = totalEntryPrice > 0 ? ((netPnl / totalEntryPrice) * 100).toFixed(2) : \"0.00\";\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-300 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Totals */}\n//                             <tfoot className=\"bg-gray-200 text-black font-bold\">\n//                                 <tr className=\"border-t border-gray-200 bg-gray-200\">\n//                                     <td className=\"px-12 py- text-right\" colSpan=\"4\">Total:</td>\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n//                                     <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>\n//                                         {netPnl.toFixed(2)}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\">{pnlPercentage}%</td>\n//                                     <td className=\"px-4 py-3\">{netPnl >= 0 ? \"Profit\" : \"Loss\"}</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const socket = io(\"http://127.0.0.1:5000\", {\n//             reconnectionAttempts: 5,\n//             reconnectionDelay: 2000,\n//         });\n\n//         const fetchInitialData = async () => {\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//                 const data = await response.json();\n//                 if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                     setPnlData(data.orders);\n//                 } else {\n//                     setError(\"Invalid API response structure.\");\n//                 }\n//             } catch (err) {\n//                 setError(\"API request failed.\");\n//             }\n//             setLoading(false);\n//         };\n\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.disconnect();\n//         };\n//     }, []);\n\n//     const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n//     const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n//     const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n//     const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n//     const netPnl = totalProfit - totalLoss;\n//     const pnlPercentage = totalEntryPrice > 0 ? ((netPnl / totalEntryPrice) * 100).toFixed(2) : \"0.00\";\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-300 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-200 text-black font-bold\">\n//                                 <tr className=\"border-t border-gray-200 bg-gray-200\">\n//                                     <td className=\"px-12 py-3 text-right\" colSpan=\"4\">Total:</td>\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n//                                     <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>{netPnl.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{pnlPercentage}%</td>\n//                                     <td className=\"px-4 py-3\">{netPnl >= 0 ? \"Profit\" : \"Loss\"}</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\nvar _c;\n$RefreshReg$(_c, \"PnlReport\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","socket","PnlReport","_s","pnlData","setPnlData","loading","setLoading","error","setError","fetchInitialData","response","fetch","data","json","status","Array","isArray","orders","err","on","pnl_report","console","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","colSpan","map","order","order_id","security_id","transaction_type","quantity","entry_price","undefined","toFixed","current_price","pnl","pnl_percentage","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js"],"sourcesContent":["\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\nconst PnlReport = () => {\n    const [pnlData, setPnlData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Fetch initial data from Flask API\n    const fetchInitialData = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n            const data = await response.json();\n            if (data.status === \"success\" && Array.isArray(data.orders)) {\n                setPnlData(data.orders); // Initial data from API\n            } else {\n                setError(\"Invalid API response structure.\");\n            }\n        } catch (err) {\n            setError(\"API request failed.\");\n        }\n        setLoading(false);\n    };\n\n    useEffect(() => {\n        fetchInitialData(); // Fetch initial orders from Flask\n\n        // Listen for live PnL updates from WebSocket\n        socket.on(\"pnl_update\", (data) => {\n            if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n                setPnlData(data.pnl_report); // Update live data\n            } else {\n                setError(\"Invalid WebSocket data.\");\n            }\n        });\n\n        socket.on(\"connect_error\", (err) => {\n            console.error(\"Socket connection error:\", err);\n            setError(\"WebSocket connection failed.\");\n        });\n\n        return () => {\n            socket.off(\"pnl_update\");\n            socket.off(\"connect_error\");\n        };\n    }, []);\n\n    return (\n        <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n            <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n            {loading ? (\n                <p className=\"text-gray-300\">Fetching data...</p>\n            ) : error ? (\n                <p className=\"text-red-500 font-semibold\">{error}</p>\n            ) : (\n                <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n                    <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm text-gray-300\">\n                            <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n                                <tr>\n                                    <th className=\"px-4 py-2\">Order ID</th>\n                                    <th className=\"px-4 py-2\">Security ID</th>\n                                    <th className=\"px-4 py-2\">Type</th>\n                                    <th className=\"px-4 py-2\">Quantity</th>\n                                    <th className=\"px-4 py-2\">Entry Price</th>\n                                    <th className=\"px-4 py-2\">Latest Price</th>\n                                    <th className=\"px-4 py-2\">PnL</th>\n                                    <th className=\"px-4 py-2\">PnL %</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-gray-700\">\n                                {pnlData.length === 0 ? (\n                                    <tr>\n                                        <td colSpan=\"8\" className=\"p-4 text-center text-gray-500\">\n                                            No orders available.\n                                        </td>\n                                    </tr>\n                                ) : (\n                                    pnlData.map((order) => (\n                                        <tr key={order.order_id} className=\"hover:bg-gray-700\">\n                                            <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td\n                                                className={`px-4 py-2 font-bold text-lg ${\n                                                    order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n                                                }`}\n                                            >\n                                                {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n                                            </td>\n                                        </tr>\n                                    ))\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PnlReport;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate total profit, total loss, and net PnL\n//     const totalProfit = pnlData\n//         .filter(order => order.pnl > 0)\n//         .reduce((sum, order) => sum + (order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const totalLoss = pnlData\n//         .filter(order => order.pnl < 0)\n//         .reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const netPnl = (totalProfit - totalLoss).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th> {/* New Column */}\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Total Profit & Loss */}\n//                             <tfoot className=\"bg-gray-900 text-white text-lg font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Profit:</td>\n//                                     <td className=\"px-4 py-3 text-green-500\">{totalProfit}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Loss:</td>\n//                                     <td className=\"px-4 py-3 text-red-500\">-{totalLoss}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Net PnL:</td>\n//                                     <td\n//                                         className={`px-4 py-3 font-bold ${\n//                                             netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                         }`}\n//                                     >\n//                                         {netPnl}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate totals for table columns\n//     // const totalQuantity = pnlData.reduce((sum, order) => sum + (order.quantity || 0), 0);\n//     const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n//     const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n//     const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n//     const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n//     const netPnl = totalProfit - totalLoss;\n    \n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-300 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Totals */}\n//                             <tfoot className=\"bg-gray-200 text-black font-bold\">\n//                                 <tr className=\"border-t border-gray-200 bg-gray-200\">\n//                                     <td className=\"px-12 py- text-right\" colSpan=\"4\">Total:</td>\n//                                     {/* <td className=\"px-4 py-3\">{totalQuantity}</td> */}\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n//                                     <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>\n//                                         {netPnl.toFixed(2)}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">loss</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const socket = io(\"http://127.0.0.1:5000\", {\n//             reconnectionAttempts: 5, // Try reconnecting 5 times\n//             reconnectionDelay: 2000, // Wait 2 seconds before retry\n//         });\n\n//         // Fetch initial PnL data\n//         const fetchInitialData = async () => {\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//                 const data = await response.json();\n//                 if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                     setPnlData(data.orders); // Set initial API data\n//                 } else {\n//                     setError(\"Invalid API response structure.\");\n//                 }\n//             } catch (err) {\n//                 setError(\"API request failed.\");\n//             }\n//             setLoading(false);\n//         };\n\n//         fetchInitialData();\n\n//         // Listen for real-time PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         // Handle WebSocket errors\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         // Cleanup WebSocket connection on unmount\n//         return () => {\n//             socket.disconnect();\n//         };\n//     }, []);\n\n//     // Total PnL Calculations\n//     const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n//     const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n//     const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n//     const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n//     const netPnl = totalProfit - totalLoss;\n//     const pnlPercentage = totalEntryPrice > 0 ? ((netPnl / totalEntryPrice) * 100).toFixed(2) : \"0.00\";\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-300 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Totals */}\n//                             <tfoot className=\"bg-gray-200 text-black font-bold\">\n//                                 <tr className=\"border-t border-gray-200 bg-gray-200\">\n//                                     <td className=\"px-12 py- text-right\" colSpan=\"4\">Total:</td>\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n//                                     <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>\n//                                         {netPnl.toFixed(2)}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\">{pnlPercentage}%</td>\n//                                     <td className=\"px-4 py-3\">{netPnl >= 0 ? \"Profit\" : \"Loss\"}</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const socket = io(\"http://127.0.0.1:5000\", {\n//             reconnectionAttempts: 5,\n//             reconnectionDelay: 2000,\n//         });\n\n//         const fetchInitialData = async () => {\n//             try {\n//                 const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//                 const data = await response.json();\n//                 if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                     setPnlData(data.orders);\n//                 } else {\n//                     setError(\"Invalid API response structure.\");\n//                 }\n//             } catch (err) {\n//                 setError(\"API request failed.\");\n//             }\n//             setLoading(false);\n//         };\n\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.disconnect();\n//         };\n//     }, []);\n\n//     const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n//     const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n//     const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n//     const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n//     const netPnl = totalProfit - totalLoss;\n//     const pnlPercentage = totalEntryPrice > 0 ? ((netPnl / totalEntryPrice) * 100).toFixed(2) : \"0.00\";\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-300 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-200 text-black font-bold\">\n//                                 <tr className=\"border-t border-gray-200 bg-gray-200\">\n//                                     <td className=\"px-12 py-3 text-right\" colSpan=\"4\">Total:</td>\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n//                                     <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>{netPnl.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{pnlPercentage}%</td>\n//                                     <td className=\"px-4 py-3\">{netPnl >= 0 ? \"Profit\" : \"Loss\"}</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
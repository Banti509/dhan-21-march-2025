{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js\",\n  _s = $RefreshSig$();\n// ####################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! Status: ${response.status}`);\n//             }\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (data.status === \"success\" && data.live_prices) {\n//             setLivePrices(prevLivePrices => ({\n//                 ...prevLivePrices,\n//                 ...data.live_prices,\n//             }));\n//         } else {\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// ##########################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n//     forceNew: true,\n//     path: \"/socket.io\",\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     latest_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (!data || data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data received:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n\n//         // Extract updated prices from WebSocket data\n//         const updatedPrices = data.pnl_report.reduce((acc, order) => {\n//             acc[order.security_id] = order.current_price;\n//             return acc;\n//         }, {});\n\n//         console.log(\"✅ Extracted Live Prices:\", updatedPrices);\n\n//         // Update livePrices state\n//         setLivePrices(prev => {\n//             const newPrices = { ...prev, ...updatedPrices };\n//             console.log(\"✅ Updated Live Prices State:\", newPrices);\n//             return newPrices;\n//         });\n\n//         // Update pnlData state with latest prices\n//         setPnlData(prev => {\n//             const updatedData = prev.map(order => {\n//                 const newPrice = updatedPrices[order.security_id] ?? order.latest_price ?? order.price;\n//                 return { ...order, latest_price: newPrice };\n//             });\n//             console.log(\"✅ Updated PnL Data:\", updatedData);\n//             return updatedData; // Return a new array to ensure re-render\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         console.log(\"✅ Setting up WebSocket listeners...\");\n//         socket.on(\"connect\", () => {\n//             console.log(\"✅ WebSocket Connected!\", socket.id);\n//         });\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket connection error:\", err));\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"test_event\", (data) => console.log(\"🔔 Test Event Received:\", data));\n//         socket.on(\"any\", (event, data) => console.log(\"🔍 Any Event Received:\", event, data));  // Catch all events\n\n//         return () => {\n//             console.log(\"🛑 Cleaning up WebSocket listeners...\");\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//             socket.off(\"test_event\");\n//             socket.off(\"any\");\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = order.latest_price ?? order.price; // Simplified fallback\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (currentPrice - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = order.latest_price ?? order.price;\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((currentPrice - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     console.log(\"🔍 Rendering with pnlData:\", pnlData);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = order.latest_price ?? order.price;\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     current_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Update Received:\", data);\n\n//         if (data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n\n//         setPnlData(prev => {\n//             const updatedData = data.pnl_report.map(report => ({\n//                 order_id: report.order_id,\n//                 security_id: report.security_id,\n//                 transaction_type: report.transaction_type,\n//                 quantity: report.quantity,\n//                 price: report.entry_price, // Keep original price as \"price\"\n//                 current_price: report.current_price, // Use current_price directly\n//             }));\n//             console.log(\"✅ Updated pnlData:\", updatedData);\n//             return updatedData; // Replace entire array for simplicity\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket Error:\", err));\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n\n//         return () => {\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (order.current_price - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((order.current_price - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Live Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((order.current_price - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{order.current_price}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\n\n// Initialize SocketIO connection\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000\", {\n  transports: [\"websocket\"],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 2000\n});\nconst PnlReport = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchInitialData = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      console.log(\"✅ Initial API Data:\", data);\n      if (data.status === \"success\") {\n        setPnlData(data.orders.map(order => {\n          var _data$live_prices$ord;\n          return {\n            ...order,\n            current_price: (_data$live_prices$ord = data.live_prices[order.security_id]) !== null && _data$live_prices$ord !== void 0 ? _data$live_prices$ord : order.price\n          };\n        }));\n      } else {\n        throw new Error(\"Invalid API response structure.\");\n      }\n    } catch (err) {\n      console.error(\"Error fetching initial data:\", err);\n      setError(\"Failed to fetch initial data.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handlePnLUpdate = useCallback(data => {\n    console.log(\"🔄 WebSocket Update Received:\", data);\n    if (data.status !== \"success\" || !data.pnl_report) {\n      console.error(\"❌ Invalid WebSocket data:\", data);\n      setError(\"Invalid WebSocket data.\");\n      return;\n    }\n    const updatedData = data.pnl_report.map(report => ({\n      order_id: report.order_id,\n      security_id: report.security_id,\n      transaction_type: report.transaction_type,\n      quantity: report.quantity,\n      price: report.entry_price,\n      // Map entry_price to price\n      current_price: report.current_price\n    }));\n    console.log(\"✅ Updated pnlData:\", updatedData);\n    setPnlData([...updatedData]); // Force new array to trigger re-render\n  }, []);\n  useEffect(() => {\n    fetchInitialData();\n    socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n    socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n    socket.on(\"connect_error\", err => console.error(\"❌ WebSocket Error:\", err));\n    socket.on(\"pnl_update\", handlePnLUpdate);\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"connect_error\");\n      socket.off(\"pnl_update\", handlePnLUpdate);\n    };\n  }, [handlePnLUpdate]);\n\n  // Debug log when pnlData changes\n  useEffect(() => {\n    console.log(\"📊 pnlData state updated:\", pnlData);\n  }, [pnlData]);\n  const totalPnL = pnlData.reduce((sum, order) => {\n    const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n    return sum + (order.current_price - order.price) * order.quantity * multiplier;\n  }, 0).toFixed(2);\n  const totalPnLPercentage = pnlData.reduce((sum, order) => {\n    const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n    return sum + (order.current_price - order.price) / order.price * 100 * multiplier;\n  }, 0).toFixed(2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83D\\uDCCA Live PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-300\",\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-semibold\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full text-sm text-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-blue-600 text-white uppercase text-xs\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Order ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Security ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 616,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Entry Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 617,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Live Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Profit/Loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"divide-y divide-gray-700\",\n            children: pnlData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"9\",\n                className: \"p-4 text-center text-gray-500\",\n                children: \"No orders available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 37\n            }, this) : pnlData.map(order => {\n              const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n              const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n              const pnlPercentage = ((order.current_price - order.price) / order.price * 100 * multiplier).toFixed(2);\n              const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"hover:bg-gray-700\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.order_id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.security_id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 640,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.transaction_type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 641,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.quantity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 642,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 643,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2 text-yellow-400 font-semibold\",\n                  children: order.current_price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 644,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: pnl\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 645,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: [pnlPercentage, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 646,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: profitLoss\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 647,\n                  columnNumber: 49\n                }, this)]\n              }, `${order.order_id}-${order.security_id}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 45\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n            className: \"bg-gray-700 text-white font-bold\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"6\",\n                className: \"px-6 py-2 text-left\",\n                children: \"Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: totalPnL\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: [totalPnLPercentage, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 657,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: \"\\u2014\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 601,\n    columnNumber: 9\n  }, this);\n};\n_s(PnlReport, \"JOOEXW21cIZD/fD1g1IAx3r5aX4=\");\n_c = PnlReport;\nexport default PnlReport;\nvar _c;\n$RefreshReg$(_c, \"PnlReport\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","io","jsxDEV","_jsxDEV","socket","transports","reconnectionAttempts","reconnectionDelay","PnlReport","_s","pnlData","setPnlData","loading","setLoading","error","setError","fetchInitialData","response","fetch","ok","Error","status","data","json","console","log","orders","map","order","_data$live_prices$ord","current_price","live_prices","security_id","price","err","handlePnLUpdate","pnl_report","updatedData","report","order_id","transaction_type","quantity","entry_price","on","id","off","totalPnL","reduce","sum","multiplier","toFixed","totalPnLPercentage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","colSpan","pnl","pnlPercentage","profitLoss","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js"],"sourcesContent":["\n// ####################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! Status: ${response.status}`);\n//             }\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (data.status === \"success\" && data.live_prices) {\n//             setLivePrices(prevLivePrices => ({\n//                 ...prevLivePrices,\n//                 ...data.live_prices,\n//             }));\n//         } else {\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n// ##########################################################################################################################################\n\n\n\n\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n//     forceNew: true,\n//     path: \"/socket.io\",\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     latest_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n    \n//         if (!data || data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data received:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n    \n//         // Extract updated prices from WebSocket data\n//         const updatedPrices = data.pnl_report.reduce((acc, order) => {\n//             acc[order.security_id] = order.current_price;\n//             return acc;\n//         }, {});\n    \n//         console.log(\"✅ Extracted Live Prices:\", updatedPrices);\n    \n//         // Update livePrices state\n//         setLivePrices(prev => {\n//             const newPrices = { ...prev, ...updatedPrices };\n//             console.log(\"✅ Updated Live Prices State:\", newPrices);\n//             return newPrices;\n//         });\n    \n//         // Update pnlData state with latest prices\n//         setPnlData(prev => {\n//             const updatedData = prev.map(order => {\n//                 const newPrice = updatedPrices[order.security_id] ?? order.latest_price ?? order.price;\n//                 return { ...order, latest_price: newPrice };\n//             });\n//             console.log(\"✅ Updated PnL Data:\", updatedData);\n//             return updatedData; // Return a new array to ensure re-render\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         console.log(\"✅ Setting up WebSocket listeners...\");\n//         socket.on(\"connect\", () => {\n//             console.log(\"✅ WebSocket Connected!\", socket.id);\n//         });\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket connection error:\", err));\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"test_event\", (data) => console.log(\"🔔 Test Event Received:\", data));\n//         socket.on(\"any\", (event, data) => console.log(\"🔍 Any Event Received:\", event, data));  // Catch all events\n\n//         return () => {\n//             console.log(\"🛑 Cleaning up WebSocket listeners...\");\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//             socket.off(\"test_event\");\n//             socket.off(\"any\");\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = order.latest_price ?? order.price; // Simplified fallback\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (currentPrice - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n    \n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = order.latest_price ?? order.price;\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((currentPrice - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     console.log(\"🔍 Rendering with pnlData:\", pnlData);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = order.latest_price ?? order.price;\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     current_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Update Received:\", data);\n\n//         if (data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n\n//         setPnlData(prev => {\n//             const updatedData = data.pnl_report.map(report => ({\n//                 order_id: report.order_id,\n//                 security_id: report.security_id,\n//                 transaction_type: report.transaction_type,\n//                 quantity: report.quantity,\n//                 price: report.entry_price, // Keep original price as \"price\"\n//                 current_price: report.current_price, // Use current_price directly\n//             }));\n//             console.log(\"✅ Updated pnlData:\", updatedData);\n//             return updatedData; // Replace entire array for simplicity\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket Error:\", err));\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n\n//         return () => {\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (order.current_price - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((order.current_price - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Live Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((order.current_price - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{order.current_price}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n\n\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\n\n// Initialize SocketIO connection\nconst socket = io(\"http://127.0.0.1:5000\", {\n    transports: [\"websocket\"],\n    reconnectionAttempts: 5,\n    reconnectionDelay: 2000,\n});\n\nconst PnlReport = () => {\n    const [pnlData, setPnlData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const fetchInitialData = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            const data = await response.json();\n            console.log(\"✅ Initial API Data:\", data);\n\n            if (data.status === \"success\") {\n                setPnlData(data.orders.map(order => ({\n                    ...order,\n                    current_price: data.live_prices[order.security_id] ?? order.price,\n                })));\n            } else {\n                throw new Error(\"Invalid API response structure.\");\n            }\n        } catch (err) {\n            console.error(\"Error fetching initial data:\", err);\n            setError(\"Failed to fetch initial data.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handlePnLUpdate = useCallback((data) => {\n        console.log(\"🔄 WebSocket Update Received:\", data);\n\n        if (data.status !== \"success\" || !data.pnl_report) {\n            console.error(\"❌ Invalid WebSocket data:\", data);\n            setError(\"Invalid WebSocket data.\");\n            return;\n        }\n\n        const updatedData = data.pnl_report.map(report => ({\n            order_id: report.order_id,\n            security_id: report.security_id,\n            transaction_type: report.transaction_type,\n            quantity: report.quantity,\n            price: report.entry_price, // Map entry_price to price\n            current_price: report.current_price,\n        }));\n        console.log(\"✅ Updated pnlData:\", updatedData);\n        setPnlData([...updatedData]); // Force new array to trigger re-render\n    }, []);\n\n    useEffect(() => {\n        fetchInitialData();\n\n        socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n        socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n        socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket Error:\", err));\n        socket.on(\"pnl_update\", handlePnLUpdate);\n\n        return () => {\n            socket.off(\"connect\");\n            socket.off(\"disconnect\");\n            socket.off(\"connect_error\");\n            socket.off(\"pnl_update\", handlePnLUpdate);\n        };\n    }, [handlePnLUpdate]);\n\n    // Debug log when pnlData changes\n    useEffect(() => {\n        console.log(\"📊 pnlData state updated:\", pnlData);\n    }, [pnlData]);\n\n    const totalPnL = pnlData.reduce((sum, order) => {\n        const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n        return sum + (order.current_price - order.price) * order.quantity * multiplier;\n    }, 0).toFixed(2);\n\n    const totalPnLPercentage = pnlData.reduce((sum, order) => {\n        const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n        return sum + (((order.current_price - order.price) / order.price) * 100) * multiplier;\n    }, 0).toFixed(2);\n\n    return (\n        <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n            <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n            {loading ? (\n                <p className=\"text-gray-300\">Fetching data...</p>\n            ) : error ? (\n                <p className=\"text-red-500 font-semibold\">{error}</p>\n            ) : (\n                <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n                    <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm text-gray-300\">\n                            <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n                                <tr>\n                                    <th className=\"px-4 py-2\">Order ID</th>\n                                    <th className=\"px-4 py-2\">Security ID</th>\n                                    <th className=\"px-4 py-2\">Type</th>\n                                    <th className=\"px-4 py-2\">Quantity</th>\n                                    <th className=\"px-4 py-2\">Entry Price</th>\n                                    <th className=\"px-4 py-2\">Live Price</th>\n                                    <th className=\"px-4 py-2\">PnL</th>\n                                    <th className=\"px-4 py-2\">PnL %</th>\n                                    <th className=\"px-4 py-2\">Profit/Loss</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-gray-700\">\n                                {pnlData.length === 0 ? (\n                                    <tr>\n                                        <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n                                        No orders available.\n                                    </td>\n                                    </tr>\n                                ) : (\n                                    pnlData.map((order) => {\n                                        const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n                                        const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n                                        const pnlPercentage = (((order.current_price - order.price) / order.price) * 100 * multiplier).toFixed(2);\n                                        const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n                                        return (\n                                            <tr key={`${order.order_id}-${order.security_id}`} className=\"hover:bg-gray-700\">\n                                                <td className=\"px-4 py-2\">{order.order_id}</td>\n                                                <td className=\"px-4 py-2\">{order.security_id}</td>\n                                                <td className=\"px-4 py-2\">{order.transaction_type}</td>\n                                                <td className=\"px-4 py-2\">{order.quantity}</td>\n                                                <td className=\"px-4 py-2\">{order.price}</td>\n                                                <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{order.current_price}</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n                                            </tr>\n                                        );\n                                    })\n                                )}\n                            </tbody>\n                            <tfoot className=\"bg-gray-700 text-white font-bold\">\n                                <tr>\n                                    <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n                                    <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n                                    <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n                                    <td className=\"px-4 py-2\">—</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PnlReport;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
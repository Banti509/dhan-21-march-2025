{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js\",\n  _s = $RefreshSig$();\n// ####################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! Status: ${response.status}`);\n//             }\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (data.status === \"success\" && data.live_prices) {\n//             setLivePrices(prevLivePrices => ({\n//                 ...prevLivePrices,\n//                 ...data.live_prices,\n//             }));\n//         } else {\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// ##########################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Function to fetch initial PnL data\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     // WebSocket update handler\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data); // Log the received data\n\n//         if (data?.status === \"success\" && data?.live_prices) {\n//             setLivePrices(prevLivePrices => {\n//                 const updatedPrices = { ...prevLivePrices, ...data.live_prices };\n//                 console.log(\"✅ Updated Prices:\", updatedPrices); // Log updated prices\n\n//                 // Update PnL Data with new prices\n//                 setPnlData(prevPnlData => {\n//                     return prevPnlData.map(order => {\n//                         const newPrice = updatedPrices[order.security_id] || order.price;\n//                         console.log(`🔹 Updating ${order.security_id}: ${order.price} -> ${newPrice}`);\n//                         return { ...order, latest_price: newPrice };\n//                     });\n//                 });\n\n//                 return updatedPrices;\n//             });\n//         } else {\n//             console.error(\"❌ Invalid WebSocket data received:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     // WebSocket connection setup\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"❌ WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, [handlePnLUpdate]);\n\n//     // Calculate total PnL\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000\", {\n  transports: [\"websocket\"],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 2000\n});\nconst PnlReport = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [livePrices, setLivePrices] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchInitialData = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      if (data.status === \"success\") {\n        setPnlData(data.orders || []);\n        setLivePrices(data.live_prices || {});\n      } else {\n        throw new Error(\"Invalid API response structure.\");\n      }\n    } catch (err) {\n      setError(\"Failed to fetch initial data.\");\n    }\n    setLoading(false);\n  };\n  const handlePnLUpdate = useCallback(data => {\n    if ((data === null || data === void 0 ? void 0 : data.status) === \"success\" && data !== null && data !== void 0 && data.live_prices) {\n      setLivePrices(prevLivePrices => {\n        const updatedPrices = {\n          ...prevLivePrices,\n          ...data.live_prices\n        };\n        setPnlData(prevPnlData => prevPnlData.map(order => ({\n          ...order,\n          latest_price: updatedPrices[order.security_id] || order.price\n        })));\n        return updatedPrices;\n      });\n    } else {\n      setError(\"Invalid WebSocket data.\");\n    }\n  }, []);\n  useEffect(() => {\n    fetchInitialData();\n    socket.on(\"pnl_update\", handlePnLUpdate);\n    socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected!\"));\n    socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n    socket.on(\"connect_error\", err => setError(\"WebSocket connection failed.\"));\n    return () => {\n      socket.off(\"pnl_update\", handlePnLUpdate);\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"connect_error\");\n    };\n  }, [handlePnLUpdate]);\n  const totalPnL = pnlData.reduce((sum, order) => {\n    const currentPrice = livePrices[order.security_id] || order.price;\n    return sum + (currentPrice - order.price) * order.quantity;\n  }, 0).toFixed(2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83D\\uDCCA Live PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-300\",\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-semibold\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"w-full text-sm text-gray-300\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"bg-blue-600 text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Order ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Security ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 50\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 70\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 83\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Entry Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Latest Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 53\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PnL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 74\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: pnlData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"7\",\n              className: \"p-4 text-center text-gray-500\",\n              children: \"No orders available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 33\n          }, this) : pnlData.map(order => {\n            const currentPrice = livePrices[order.security_id] || order.price;\n            const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"hover:bg-gray-700\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.order_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.security_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.transaction_type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.quantity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.price\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-yellow-400 font-semibold\",\n                children: currentPrice\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: pnl >= 0 ? \"text-green-500\" : \"text-red-500\",\n                children: pnl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 45\n              }, this)]\n            }, order.order_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 41\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n          className: \"bg-gray-700 text-white font-bold\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"6\",\n              children: \"Total PnL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\",\n              children: totalPnL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 9\n  }, this);\n};\n_s(PnlReport, \"MjKVYx6+pkbEh6wu3K+Jx77gHPs=\");\n_c = PnlReport;\nexport default PnlReport;\nvar _c;\n$RefreshReg$(_c, \"PnlReport\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","io","jsxDEV","_jsxDEV","socket","transports","reconnectionAttempts","reconnectionDelay","PnlReport","_s","pnlData","setPnlData","livePrices","setLivePrices","loading","setLoading","error","setError","fetchInitialData","response","fetch","ok","Error","status","data","json","orders","live_prices","err","handlePnLUpdate","prevLivePrices","updatedPrices","prevPnlData","map","order","latest_price","security_id","price","on","console","log","off","totalPnL","reduce","sum","currentPrice","quantity","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","colSpan","pnl","order_id","transaction_type","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js"],"sourcesContent":["\n// ####################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! Status: ${response.status}`);\n//             }\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (data.status === \"success\" && data.live_prices) {\n//             setLivePrices(prevLivePrices => ({\n//                 ...prevLivePrices,\n//                 ...data.live_prices,\n//             }));\n//         } else {\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n// ##########################################################################################################################################\n\n\n\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Function to fetch initial PnL data\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            \n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     // WebSocket update handler\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data); // Log the received data\n    \n//         if (data?.status === \"success\" && data?.live_prices) {\n//             setLivePrices(prevLivePrices => {\n//                 const updatedPrices = { ...prevLivePrices, ...data.live_prices };\n//                 console.log(\"✅ Updated Prices:\", updatedPrices); // Log updated prices\n    \n//                 // Update PnL Data with new prices\n//                 setPnlData(prevPnlData => {\n//                     return prevPnlData.map(order => {\n//                         const newPrice = updatedPrices[order.security_id] || order.price;\n//                         console.log(`🔹 Updating ${order.security_id}: ${order.price} -> ${newPrice}`);\n//                         return { ...order, latest_price: newPrice };\n//                     });\n//                 });\n    \n//                 return updatedPrices;\n//             });\n//         } else {\n//             console.error(\"❌ Invalid WebSocket data received:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n    \n    \n\n//     // WebSocket connection setup\n//     useEffect(() => {\n//         fetchInitialData();\n    \n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"❌ WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n    \n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, [handlePnLUpdate]);\n    \n\n//     // Calculate total PnL\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst socket = io(\"http://127.0.0.1:5000\", {\n    transports: [\"websocket\"],\n    reconnectionAttempts: 5,\n    reconnectionDelay: 2000,\n});\n\nconst PnlReport = () => {\n    const [pnlData, setPnlData] = useState([]);\n    const [livePrices, setLivePrices] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const fetchInitialData = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            \n            const data = await response.json();\n            if (data.status === \"success\") {\n                setPnlData(data.orders || []);\n                setLivePrices(data.live_prices || {});\n            } else {\n                throw new Error(\"Invalid API response structure.\");\n            }\n        } catch (err) {\n            setError(\"Failed to fetch initial data.\");\n        }\n        setLoading(false);\n    };\n\n    const handlePnLUpdate = useCallback((data) => {\n        if (data?.status === \"success\" && data?.live_prices) {\n            setLivePrices(prevLivePrices => {\n                const updatedPrices = { ...prevLivePrices, ...data.live_prices };\n                setPnlData(prevPnlData =>\n                    prevPnlData.map(order => ({\n                        ...order,\n                        latest_price: updatedPrices[order.security_id] || order.price,\n                    }))\n                );\n                return updatedPrices;\n            });\n        } else {\n            setError(\"Invalid WebSocket data.\");\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchInitialData();\n\n        socket.on(\"pnl_update\", handlePnLUpdate);\n        socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected!\"));\n        socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n        socket.on(\"connect_error\", (err) => setError(\"WebSocket connection failed.\"));\n\n        return () => {\n            socket.off(\"pnl_update\", handlePnLUpdate);\n            socket.off(\"connect\");\n            socket.off(\"disconnect\");\n            socket.off(\"connect_error\");\n        };\n    }, [handlePnLUpdate]);\n\n    const totalPnL = pnlData.reduce((sum, order) => {\n        const currentPrice = livePrices[order.security_id] || order.price;\n        return sum + (currentPrice - order.price) * order.quantity;\n    }, 0).toFixed(2);\n\n    return (\n        <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n            <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n            {loading ? (\n                <p className=\"text-gray-300\">Fetching data...</p>\n            ) : error ? (\n                <p className=\"text-red-500 font-semibold\">{error}</p>\n            ) : (\n                <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n                    <table className=\"w-full text-sm text-gray-300\">\n                        <thead className=\"bg-blue-600 text-white\">\n                            <tr>\n                                <th>Order ID</th><th>Security ID</th><th>Type</th><th>Quantity</th>\n                                <th>Entry Price</th><th>Latest Price</th><th>PnL</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {pnlData.length === 0 ? (\n                                <tr><td colSpan=\"7\" className=\"p-4 text-center text-gray-500\">No orders available.</td></tr>\n                            ) : (\n                                pnlData.map(order => {\n                                    const currentPrice = livePrices[order.security_id] || order.price;\n                                    const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n                                    return (\n                                        <tr key={order.order_id} className=\"hover:bg-gray-700\">\n                                            <td>{order.order_id}</td>\n                                            <td>{order.security_id}</td>\n                                            <td>{order.transaction_type}</td>\n                                            <td>{order.quantity}</td>\n                                            <td>{order.price}</td>\n                                            <td className=\"text-yellow-400 font-semibold\">{currentPrice}</td>\n                                            <td className={pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}>{pnl}</td>\n                                        </tr>\n                                    );\n                                })\n                            )}\n                        </tbody>\n                        <tfoot className=\"bg-gray-700 text-white font-bold\">\n                            <tr>\n                                <td colSpan=\"6\">Total PnL</td>\n                                <td className={totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}>{totalPnL}</td>\n                            </tr>\n                        </tfoot>\n                    </table>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PnlReport;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
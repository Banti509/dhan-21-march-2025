{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js\",\n  _s = $RefreshSig$();\n// ####################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! Status: ${response.status}`);\n//             }\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (data.status === \"success\" && data.live_prices) {\n//             setLivePrices(prevLivePrices => ({\n//                 ...prevLivePrices,\n//                 ...data.live_prices,\n//             }));\n//         } else {\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// ##########################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n//     forceNew: true,\n//     path: \"/socket.io\",\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     latest_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (!data || data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data received:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n\n//         // Extract updated prices from WebSocket data\n//         const updatedPrices = data.pnl_report.reduce((acc, order) => {\n//             acc[order.security_id] = order.current_price;\n//             return acc;\n//         }, {});\n\n//         console.log(\"✅ Extracted Live Prices:\", updatedPrices);\n\n//         // Update livePrices state\n//         setLivePrices(prev => {\n//             const newPrices = { ...prev, ...updatedPrices };\n//             console.log(\"✅ Updated Live Prices State:\", newPrices);\n//             return newPrices;\n//         });\n\n//         // Update pnlData state with latest prices\n//         setPnlData(prev => {\n//             const updatedData = prev.map(order => {\n//                 const newPrice = updatedPrices[order.security_id] ?? order.latest_price ?? order.price;\n//                 return { ...order, latest_price: newPrice };\n//             });\n//             console.log(\"✅ Updated PnL Data:\", updatedData);\n//             return updatedData; // Return a new array to ensure re-render\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         console.log(\"✅ Setting up WebSocket listeners...\");\n//         socket.on(\"connect\", () => {\n//             console.log(\"✅ WebSocket Connected!\", socket.id);\n//         });\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket connection error:\", err));\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"test_event\", (data) => console.log(\"🔔 Test Event Received:\", data));\n//         socket.on(\"any\", (event, data) => console.log(\"🔍 Any Event Received:\", event, data));  // Catch all events\n\n//         return () => {\n//             console.log(\"🛑 Cleaning up WebSocket listeners...\");\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//             socket.off(\"test_event\");\n//             socket.off(\"any\");\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = order.latest_price ?? order.price; // Simplified fallback\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (currentPrice - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = order.latest_price ?? order.price;\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((currentPrice - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     console.log(\"🔍 Rendering with pnlData:\", pnlData);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = order.latest_price ?? order.price;\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     current_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Update Received:\", data);\n\n//         if (data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n\n//         setPnlData(prev => {\n//             const updatedData = data.pnl_report.map(report => ({\n//                 order_id: report.order_id,\n//                 security_id: report.security_id,\n//                 transaction_type: report.transaction_type,\n//                 quantity: report.quantity,\n//                 price: report.entry_price, // Keep original price as \"price\"\n//                 current_price: report.current_price, // Use current_price directly\n//             }));\n//             console.log(\"✅ Updated pnlData:\", updatedData);\n//             return updatedData; // Replace entire array for simplicity\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket Error:\", err));\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n\n//         return () => {\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (order.current_price - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((order.current_price - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Live Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((order.current_price - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{order.current_price}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// // Initialize SocketIO connection\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     current_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Update Received:\", data);\n\n//         if (data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n\n//         // Update only the current_price field while keeping other order details intact\n//         setPnlData((prevPnlData) => \n//             prevPnlData.map(order => {\n//                 const updatedOrder = data.pnl_report.find(item => item.order_id === order.order_id);\n//                 return updatedOrder\n//                     ? { ...order, current_price: updatedOrder.current_price } // Update price only\n//                     : order;\n//             })\n//         );\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData(); // Fetch initial data on mount\n\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket Error:\", err));\n\n//         // Listen for WebSocket price updates\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n\n//         return () => {\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]); // Ensures latest function reference\n\n//     // Debug log when pnlData changes\n//     useEffect(() => {\n//         console.log(\"📊 pnlData state updated:\", pnlData);\n//     }, [pnlData]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (order.current_price - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((order.current_price - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Live Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                         No orders available.\n//                                     </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((order.current_price - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={`${order.order_id}-${order.security_id}`} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{order.current_price}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000\", {\n  transports: [\"websocket\"],\n  reconnection: true,\n  reconnectionAttempts: Infinity,\n  reconnectionDelay: 1000\n});\nconst PnlReport = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchInitialData = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      console.log(\"✅ Initial API Data:\", data);\n      if (data.status === \"success\") {\n        setPnlData(data.orders.map(order => {\n          var _data$live_prices$ord;\n          return {\n            ...order,\n            current_price: (_data$live_prices$ord = data.live_prices[order.security_id]) !== null && _data$live_prices$ord !== void 0 ? _data$live_prices$ord : order.price\n          };\n        }));\n      } else {\n        throw new Error(\"Invalid API response structure.\");\n      }\n    } catch (err) {\n      console.error(\"Error fetching initial data:\", err);\n      setError(\"Failed to fetch initial data.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handlePriceUpdate = useCallback(data => {\n    console.log(\"🔄 WebSocket Price Update Received:\", data);\n    if (data.status !== \"success\" || !data.prices) {\n      console.error(\"❌ Invalid WebSocket data:\", data);\n      setError(\"Invalid WebSocket data.\");\n      return;\n    }\n    setPnlData(prevPnlData => {\n      const updatedPnlData = prevPnlData.map(order => {\n        const newPrice = data.prices[order.security_id];\n        if (newPrice !== undefined) {\n          console.log(`Updating ${order.security_id} from ${order.current_price} to ${newPrice}`);\n          return {\n            ...order,\n            current_price: newPrice\n          };\n        }\n        return order;\n      });\n      return updatedPnlData;\n    });\n  }, []);\n  useEffect(() => {\n    fetchInitialData();\n    socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n    socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n    socket.on(\"connect_error\", err => console.error(\"❌ WebSocket Error:\", err));\n    socket.on(\"price_update\", handlePriceUpdate);\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"connect_error\");\n      socket.off(\"price_update\", handlePriceUpdate);\n    };\n  }, [handlePriceUpdate]);\n  useEffect(() => {\n    console.log(\"📊 pnlData state updated:\", pnlData);\n  }, [pnlData]);\n  const totalPnL = pnlData.reduce((sum, order) => {\n    const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n    return sum + (order.current_price - order.price) * order.quantity * multiplier;\n  }, 0).toFixed(2);\n  const totalPnLPercentage = pnlData.reduce((sum, order) => {\n    const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n    return sum + (order.current_price - order.price) / order.price * 100 * multiplier;\n  }, 0).toFixed(2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83D\\uDCCA Live PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-300\",\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 771,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-semibold\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full text-sm text-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-blue-600 text-white uppercase text-xs\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Order ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Security ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 782,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 783,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Entry Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Live Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 785,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 786,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Profit/Loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 788,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"divide-y divide-gray-700\",\n            children: pnlData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"9\",\n                className: \"p-4 text-center text-gray-500\",\n                children: \"No orders available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 37\n            }, this) : pnlData.map(order => {\n              const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n              const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n              const pnlPercentage = ((order.current_price - order.price) / order.price * 100 * multiplier).toFixed(2);\n              const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"hover:bg-gray-700\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.order_id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 806,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.security_id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 807,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.transaction_type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 808,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.quantity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 809,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 810,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2 text-yellow-400 font-semibold\",\n                  children: order.current_price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 811,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: pnl\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 812,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: [pnlPercentage, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 813,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: profitLoss\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 814,\n                  columnNumber: 49\n                }, this)]\n              }, `${order.order_id}-${order.security_id}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 805,\n                columnNumber: 45\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n            className: \"bg-gray-700 text-white font-bold\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"6\",\n                className: \"px-6 py-2 text-left\",\n                children: \"Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 822,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: totalPnL\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 823,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: [totalPnLPercentage, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 824,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: \"\\u2014\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 768,\n    columnNumber: 9\n  }, this);\n};\n_s(PnlReport, \"Ry+sxSdjnJyAJI6eKTUW6vZA+5c=\");\n_c = PnlReport;\nexport default PnlReport;\nvar _c;\n$RefreshReg$(_c, \"PnlReport\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","io","jsxDEV","_jsxDEV","socket","transports","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","PnlReport","_s","pnlData","setPnlData","loading","setLoading","error","setError","fetchInitialData","response","fetch","ok","Error","status","data","json","console","log","orders","map","order","_data$live_prices$ord","current_price","live_prices","security_id","price","err","handlePriceUpdate","prices","prevPnlData","updatedPnlData","newPrice","undefined","on","id","off","totalPnL","reduce","sum","multiplier","transaction_type","quantity","toFixed","totalPnLPercentage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","colSpan","pnl","pnlPercentage","profitLoss","order_id","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js"],"sourcesContent":["\n// ####################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! Status: ${response.status}`);\n//             }\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (data.status === \"success\" && data.live_prices) {\n//             setLivePrices(prevLivePrices => ({\n//                 ...prevLivePrices,\n//                 ...data.live_prices,\n//             }));\n//         } else {\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n// ##########################################################################################################################################\n\n\n\n\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n//     forceNew: true,\n//     path: \"/socket.io\",\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     latest_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n    \n//         if (!data || data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data received:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n    \n//         // Extract updated prices from WebSocket data\n//         const updatedPrices = data.pnl_report.reduce((acc, order) => {\n//             acc[order.security_id] = order.current_price;\n//             return acc;\n//         }, {});\n    \n//         console.log(\"✅ Extracted Live Prices:\", updatedPrices);\n    \n//         // Update livePrices state\n//         setLivePrices(prev => {\n//             const newPrices = { ...prev, ...updatedPrices };\n//             console.log(\"✅ Updated Live Prices State:\", newPrices);\n//             return newPrices;\n//         });\n    \n//         // Update pnlData state with latest prices\n//         setPnlData(prev => {\n//             const updatedData = prev.map(order => {\n//                 const newPrice = updatedPrices[order.security_id] ?? order.latest_price ?? order.price;\n//                 return { ...order, latest_price: newPrice };\n//             });\n//             console.log(\"✅ Updated PnL Data:\", updatedData);\n//             return updatedData; // Return a new array to ensure re-render\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         console.log(\"✅ Setting up WebSocket listeners...\");\n//         socket.on(\"connect\", () => {\n//             console.log(\"✅ WebSocket Connected!\", socket.id);\n//         });\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket connection error:\", err));\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"test_event\", (data) => console.log(\"🔔 Test Event Received:\", data));\n//         socket.on(\"any\", (event, data) => console.log(\"🔍 Any Event Received:\", event, data));  // Catch all events\n\n//         return () => {\n//             console.log(\"🛑 Cleaning up WebSocket listeners...\");\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//             socket.off(\"test_event\");\n//             socket.off(\"any\");\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = order.latest_price ?? order.price; // Simplified fallback\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (currentPrice - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n    \n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = order.latest_price ?? order.price;\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((currentPrice - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     console.log(\"🔍 Rendering with pnlData:\", pnlData);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = order.latest_price ?? order.price;\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price ?? \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     current_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Update Received:\", data);\n\n//         if (data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n\n//         setPnlData(prev => {\n//             const updatedData = data.pnl_report.map(report => ({\n//                 order_id: report.order_id,\n//                 security_id: report.security_id,\n//                 transaction_type: report.transaction_type,\n//                 quantity: report.quantity,\n//                 price: report.entry_price, // Keep original price as \"price\"\n//                 current_price: report.current_price, // Use current_price directly\n//             }));\n//             console.log(\"✅ Updated pnlData:\", updatedData);\n//             return updatedData; // Replace entire array for simplicity\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket Error:\", err));\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n\n//         return () => {\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (order.current_price - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((order.current_price - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Live Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((order.current_price - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{order.current_price}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n\n\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// // Initialize SocketIO connection\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"],\n//     reconnectionAttempts: 5,\n//     reconnectionDelay: 2000,\n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders.map(order => ({\n//                     ...order,\n//                     current_price: data.live_prices[order.security_id] ?? order.price,\n//                 })));\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Update Received:\", data);\n    \n//         if (data.status !== \"success\" || !data.pnl_report) {\n//             console.error(\"❌ Invalid WebSocket data:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//             return;\n//         }\n    \n//         // Update only the current_price field while keeping other order details intact\n//         setPnlData((prevPnlData) => \n//             prevPnlData.map(order => {\n//                 const updatedOrder = data.pnl_report.find(item => item.order_id === order.order_id);\n//                 return updatedOrder\n//                     ? { ...order, current_price: updatedOrder.current_price } // Update price only\n//                     : order;\n//             })\n//         );\n//     }, []);\n    \n    \n//     useEffect(() => {\n//         fetchInitialData(); // Fetch initial data on mount\n    \n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n//         socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket Error:\", err));\n        \n//         // Listen for WebSocket price updates\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n    \n//         return () => {\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]); // Ensures latest function reference\n    \n\n//     // Debug log when pnlData changes\n//     useEffect(() => {\n//         console.log(\"📊 pnlData state updated:\", pnlData);\n//     }, [pnlData]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (order.current_price - order.price) * order.quantity * multiplier;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//         return sum + (((order.current_price - order.price) / order.price) * 100) * multiplier;\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Live Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                         No orders available.\n//                                     </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n//                                         const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n//                                         const pnlPercentage = (((order.current_price - order.price) / order.price) * 100 * multiplier).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={`${order.order_id}-${order.security_id}`} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{order.current_price}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst socket = io(\"http://127.0.0.1:5000\", {\n    transports: [\"websocket\"],\n    reconnection: true,\n    reconnectionAttempts: Infinity,\n    reconnectionDelay: 1000,\n});\n\nconst PnlReport = () => {\n    const [pnlData, setPnlData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const fetchInitialData = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            const data = await response.json();\n            console.log(\"✅ Initial API Data:\", data);\n\n            if (data.status === \"success\") {\n                setPnlData(data.orders.map(order => ({\n                    ...order,\n                    current_price: data.live_prices[order.security_id] ?? order.price,\n                })));\n            } else {\n                throw new Error(\"Invalid API response structure.\");\n            }\n        } catch (err) {\n            console.error(\"Error fetching initial data:\", err);\n            setError(\"Failed to fetch initial data.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handlePriceUpdate = useCallback((data) => {\n        console.log(\"🔄 WebSocket Price Update Received:\", data);\n\n        if (data.status !== \"success\" || !data.prices) {\n            console.error(\"❌ Invalid WebSocket data:\", data);\n            setError(\"Invalid WebSocket data.\");\n            return;\n        }\n\n        setPnlData((prevPnlData) => {\n            const updatedPnlData = prevPnlData.map(order => {\n                const newPrice = data.prices[order.security_id];\n                if (newPrice !== undefined) {\n                    console.log(`Updating ${order.security_id} from ${order.current_price} to ${newPrice}`);\n                    return { ...order, current_price: newPrice };\n                }\n                return order;\n            });\n            return updatedPnlData;\n        });\n    }, []);\n\n    useEffect(() => {\n        fetchInitialData();\n\n        socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected:\", socket.id));\n        socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected\"));\n        socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket Error:\", err));\n        socket.on(\"price_update\", handlePriceUpdate);\n\n        return () => {\n            socket.off(\"connect\");\n            socket.off(\"disconnect\");\n            socket.off(\"connect_error\");\n            socket.off(\"price_update\", handlePriceUpdate);\n        };\n    }, [handlePriceUpdate]);\n\n    useEffect(() => {\n        console.log(\"📊 pnlData state updated:\", pnlData);\n    }, [pnlData]);\n\n    const totalPnL = pnlData.reduce((sum, order) => {\n        const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n        return sum + (order.current_price - order.price) * order.quantity * multiplier;\n    }, 0).toFixed(2);\n\n    const totalPnLPercentage = pnlData.reduce((sum, order) => {\n        const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n        return sum + (((order.current_price - order.price) / order.price) * 100) * multiplier;\n    }, 0).toFixed(2);\n\n    return (\n        <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n            <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n            {loading ? (\n                <p className=\"text-gray-300\">Fetching data...</p>\n            ) : error ? (\n                <p className=\"text-red-500 font-semibold\">{error}</p>\n            ) : (\n                <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n                    <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm text-gray-300\">\n                            <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n                                <tr>\n                                    <th className=\"px-4 py-2\">Order ID</th>\n                                    <th className=\"px-4 py-2\">Security ID</th>\n                                    <th className=\"px-4 py-2\">Type</th>\n                                    <th className=\"px-4 py-2\">Quantity</th>\n                                    <th className=\"px-4 py-2\">Entry Price</th>\n                                    <th className=\"px-4 py-2\">Live Price</th>\n                                    <th className=\"px-4 py-2\">PnL</th>\n                                    <th className=\"px-4 py-2\">PnL %</th>\n                                    <th className=\"px-4 py-2\">Profit/Loss</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-gray-700\">\n                                {pnlData.length === 0 ? (\n                                    <tr>\n                                        <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n                                            No orders available.\n                                        </td>\n                                    </tr>\n                                ) : (\n                                    pnlData.map((order) => {\n                                        const multiplier = order.transaction_type === \"BUY\" ? 1 : -1;\n                                        const pnl = ((order.current_price - order.price) * order.quantity * multiplier).toFixed(2);\n                                        const pnlPercentage = (((order.current_price - order.price) / order.price) * 100 * multiplier).toFixed(2);\n                                        const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n                                        return (\n                                            <tr key={`${order.order_id}-${order.security_id}`} className=\"hover:bg-gray-700\">\n                                                <td className=\"px-4 py-2\">{order.order_id}</td>\n                                                <td className=\"px-4 py-2\">{order.security_id}</td>\n                                                <td className=\"px-4 py-2\">{order.transaction_type}</td>\n                                                <td className=\"px-4 py-2\">{order.quantity}</td>\n                                                <td className=\"px-4 py-2\">{order.price}</td>\n                                                <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{order.current_price}</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n                                            </tr>\n                                        );\n                                    })\n                                )}\n                            </tbody>\n                            <tfoot className=\"bg-gray-700 text-white font-bold\">\n                                <tr>\n                                    <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n                                    <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n                                    <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n                                    <td className=\"px-4 py-2\">—</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PnlReport;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
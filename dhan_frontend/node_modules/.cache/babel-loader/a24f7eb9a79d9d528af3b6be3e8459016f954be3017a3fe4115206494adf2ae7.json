{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js\",\n  _s = $RefreshSig$();\n// **************************************************************************************\n// *********************************************************************************************************\n// **********************************************************************************************************\n// \n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000/ws\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       } \n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       console.log(\"****************** Error:\", err)\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     console.log(\"Updated PnL Data:\", pnlData);\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(\"/socket.io/?EIO=4&transport=websocket\", {\n//         transports: [\"websocket\"], // Force WebSocket transport\n\n//       });\n\n//       // Log WebSocket connection status\n//       socketRef.current.on(\"connect\", () => {\n//         console.log(\"WebSocket Connected\", socketRef);\n//         console.log(\"WebSocket Connecte=================d\", SOCKET_URL);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       // Listen for price updates\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         // Update the currentPrice for the corresponding order\n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol\n//               ? { ...order, currentPrice: data.currentPrice }  // Update currentPrice\n//               : order\n//           )\n//         );\n//       });\n//     }\n\n//     return () => {\n//       if (socketRef.current) {\n//         socketRef.current.disconnect();\n//         socketRef.current = null;\n//       }\n//     };\n//   }, []);\n\n//   //   return () => {\n//   //     socketRef.current?.disconnect();\n//   //     socketRef.current = null;\n//   //   };\n//   // },[]);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// // import { io } from \"socket.io-client\";\n\n// // Connect with WebSocket transport mode\n// const socket = io(\"http://localhost:5000\", {\n//   transports: [\"websocket\"], // Force WebSocket mode\n// });\n\n// socket.on(\"connect\", () => {\n//   console.log(\"Connected to WebSocket server\");\n// });\n\n// socket.on(\"price_update\", (data) => {\n//   console.log(\"Received price update:\", data);\n// });\n\n// socket.on(\"connect_error\", (err) => {\n//   console.error(\"Socket connection error:\", err);\n// });\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 300);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   useEffect(() => {\n//     console.log(\"Fetching PnL report...\");\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only if not already connected)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL, {\n//         transports: [\"websocket\"],\n//         reconnection: true, // Enable auto-reconnect\n//         reconnectionAttempts: 5, // Try reconnecting 5 times\n//         reconnectionDelay: 2000, // 2 seconds delay between reconnect attempts\n//       });\n\n//       // Log WebSocket events\n//       socketRef.current.on(\"connect\", () => console.log(\"WebSocket Connected\"));\n//       socketRef.current.on(\"disconnect\", () => console.warn(\"WebSocket Disconnected\"));\n//       socketRef.current.on(\"connect_error\", (err) => console.error(\"WebSocket Connection Error:\", err));\n\n//       // Listen for price updates\n//     // const socket = io(\"http://localhost:5000\"); \n//     //   socket.on(\"price_update\", (data) => {\n//     //   console.log(\"Received price update:\", data);\n//     //   if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//     //     const symbol = Object.keys(data)[0];\n//     //     const newPrice = Object.values(data)[0];\n\n//     //     setPnlData((prevData) =>\n//     //       prevData.map((order) =>\n//     //         order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//     //       )\n//     //     );\n//     //   } else {\n//     //     console.warn(\"Received invalid WebSocket data:\", data);\n//     //   }\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol ? { ...order, currentPrice: parseFloat(data.currentPrice) } : order\n//           )\n//         );\n//       });\n//     }\n\n//     return () => {  \n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Initial data from API\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData(); // Fetch initial orders from Flask\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report); // Update live data\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"8\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate total profit, total loss, and net PnL\n//     const totalProfit = pnlData\n//         .filter(order => order.pnl > 0)\n//         .reduce((sum, order) => sum + (order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const totalLoss = pnlData\n//         .filter(order => order.pnl < 0)\n//         .reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const netPnl = (totalProfit - totalLoss).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th> {/* New Column */}\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Total Profit & Loss */}\n//                             <tfoot className=\"bg-gray-900 text-white text-lg font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Profit:</td>\n//                                     <td className=\"px-4 py-3 text-green-500\">{totalProfit}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Loss:</td>\n//                                     <td className=\"px-4 py-3 text-red-500\">-{totalLoss}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Net PnL:</td>\n//                                     <td\n//                                         className={`px-4 py-3 font-bold ${\n//                                             netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                         }`}\n//                                     >\n//                                         {netPnl}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\nimport React, { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\nconst PnlReport = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch initial data from Flask API\n  const fetchInitialData = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n      const data = await response.json();\n      if (data.status === \"success\" && Array.isArray(data.orders)) {\n        setPnlData(data.orders); // Set API data\n      } else {\n        setError(\"Invalid API response structure.\");\n      }\n    } catch (err) {\n      setError(\"API request failed.\");\n    }\n    setLoading(false);\n  };\n  useEffect(() => {\n    fetchInitialData();\n\n    // Listen for live PnL updates from WebSocket\n    socket.on(\"pnl_update\", data => {\n      if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n        setPnlData(data.pnl_report);\n      } else {\n        setError(\"Invalid WebSocket data.\");\n      }\n    });\n    socket.on(\"connect_error\", err => {\n      console.error(\"Socket connection error:\", err);\n      setError(\"WebSocket connection failed.\");\n    });\n    return () => {\n      socket.off(\"pnl_update\");\n      socket.off(\"connect_error\");\n    };\n  }, []);\n\n  // Calculate totals for table columns\n  const totalQuantity = pnlData.reduce((sum, order) => sum + (order.quantity || 0), 0);\n  const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n  const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n  const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n  const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n  const netPnl = totalProfit - totalLoss;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83D\\uDCCA Live PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 875,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-300\",\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 877,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-semibold\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full text-sm text-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-blue-600 text-white uppercase text-xs\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Order ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 886,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Security ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 887,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 888,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 889,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Entry Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 890,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Latest Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 891,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 892,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 893,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 894,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 885,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"divide-y divide-gray-700\",\n            children: pnlData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"9\",\n                className: \"p-4 text-center text-gray-500\",\n                children: \"No orders available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 900,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 37\n            }, this) : pnlData.map(order => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"hover:bg-gray-700\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.order_id || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 907,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.security_id || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 908,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.transaction_type || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 909,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.quantity || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 910,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 911,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 914,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 font-bold text-lg ${order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 917,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: [order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\", \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 924,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 font-bold ${order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`,\n                children: order.pnl >= 0 ? \"Profit\" : \"Loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 927,\n                columnNumber: 45\n              }, this)]\n            }, order.order_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n            className: \"bg-gray-200 text-black font-bold\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"border-t border-gray-200 bg-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-15 py-1 text-right\",\n                colSpan: \"3\",\n                children: \"Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 941,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\",\n                children: totalQuantity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 942,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\",\n                children: totalEntryPrice.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 943,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\",\n                children: totalLatestPrice.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 944,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`,\n                children: netPnl.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 945,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 948,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 949,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 940,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 874,\n    columnNumber: 9\n  }, this);\n};\n_s(PnlReport, \"Itcd+4SLNDjb8y3nzbw1gmo0oS8=\");\n_c = PnlReport;\nexport default PnlReport;\nvar _c;\n$RefreshReg$(_c, \"PnlReport\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","socket","PnlReport","_s","pnlData","setPnlData","loading","setLoading","error","setError","fetchInitialData","response","fetch","data","json","status","Array","isArray","orders","err","on","pnl_report","console","off","totalQuantity","reduce","sum","order","quantity","totalEntryPrice","entry_price","totalLatestPrice","current_price","totalProfit","filter","pnl","totalLoss","Math","abs","netPnl","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","colSpan","map","order_id","security_id","transaction_type","undefined","toFixed","pnl_percentage","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js"],"sourcesContent":["\n\n// **************************************************************************************\n// *********************************************************************************************************\n// **********************************************************************************************************\n// \n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000/ws\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n  \n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       } \n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       console.log(\"****************** Error:\", err)\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     console.log(\"Updated PnL Data:\", pnlData);\n//     fetchPnLReport();\n  \n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(\"/socket.io/?EIO=4&transport=websocket\", {\n//         transports: [\"websocket\"], // Force WebSocket transport\n        \n//       });\n  \n//       // Log WebSocket connection status\n//       socketRef.current.on(\"connect\", () => {\n//         console.log(\"WebSocket Connected\", socketRef);\n//         console.log(\"WebSocket Connecte=================d\", SOCKET_URL);\n//       });\n  \n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n  \n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n  \n//       // Listen for price updates\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n  \n//         // Update the currentPrice for the corresponding order\n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol\n//               ? { ...order, currentPrice: data.currentPrice }  // Update currentPrice\n//               : order\n//           )\n//         );\n//       });\n//     }\n\n//     return () => {\n//       if (socketRef.current) {\n//         socketRef.current.disconnect();\n//         socketRef.current = null;\n//       }\n//     };\n//   }, []);\n  \n//   //   return () => {\n//   //     socketRef.current?.disconnect();\n//   //     socketRef.current = null;\n//   //   };\n//   // },[]);\n\n  \n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\n\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"ws://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n\n\n// // import { io } from \"socket.io-client\";\n\n// // Connect with WebSocket transport mode\n// const socket = io(\"http://localhost:5000\", {\n//   transports: [\"websocket\"], // Force WebSocket mode\n// });\n\n// socket.on(\"connect\", () => {\n//   console.log(\"Connected to WebSocket server\");\n// });\n\n// socket.on(\"price_update\", (data) => {\n//   console.log(\"Received price update:\", data);\n// });\n\n// socket.on(\"connect_error\", (err) => {\n//   console.error(\"Socket connection error:\", err);\n// });\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n  \n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n//   // const socket = io(\"http://localhost:5000\"); \n//   //   socket.on(\"price_update\", (data) => {\n//   //   console.log(\"Received price update:\", data);\n//   // });\n\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 300);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   useEffect(() => {\n//     console.log(\"Fetching PnL report...\");\n//     fetchPnLReport();\n  \n//     // Establish WebSocket connection (only if not already connected)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL, {\n//         transports: [\"websocket\"],\n//         reconnection: true, // Enable auto-reconnect\n//         reconnectionAttempts: 5, // Try reconnecting 5 times\n//         reconnectionDelay: 2000, // 2 seconds delay between reconnect attempts\n//       });\n  \n//       // Log WebSocket events\n//       socketRef.current.on(\"connect\", () => console.log(\"WebSocket Connected\"));\n//       socketRef.current.on(\"disconnect\", () => console.warn(\"WebSocket Disconnected\"));\n//       socketRef.current.on(\"connect_error\", (err) => console.error(\"WebSocket Connection Error:\", err));\n  \n//       // Listen for price updates\n//     // const socket = io(\"http://localhost:5000\"); \n//     //   socket.on(\"price_update\", (data) => {\n//     //   console.log(\"Received price update:\", data);\n//     //   if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//     //     const symbol = Object.keys(data)[0];\n//     //     const newPrice = Object.values(data)[0];\n\n//     //     setPnlData((prevData) =>\n//     //       prevData.map((order) =>\n//     //         order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//     //       )\n//     //     );\n//     //   } else {\n//     //     console.warn(\"Received invalid WebSocket data:\", data);\n//     //   }\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n  \n//         setPnlData((prevData) =>\n//           prevData.map((order) =>\n//             order.symbol === data.symbol ? { ...order, currentPrice: parseFloat(data.currentPrice) } : order\n//           )\n//         );\n//       });\n//     }\n  \n//     return () => {  \n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n  \n  \n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                  <tr className=\"bg-gray-800 font-bold text-white\">\n//                    <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                    </td>\n//                  <td className=\"border border-gray-600 p-2 text-red-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                      {pnlData.length > 0\n//                   ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                   : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Initial data from API\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData(); // Fetch initial orders from Flask\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report); // Update live data\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"8\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate total profit, total loss, and net PnL\n//     const totalProfit = pnlData\n//         .filter(order => order.pnl > 0)\n//         .reduce((sum, order) => sum + (order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const totalLoss = pnlData\n//         .filter(order => order.pnl < 0)\n//         .reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const netPnl = (totalProfit - totalLoss).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th> {/* New Column */}\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Total Profit & Loss */}\n//                             <tfoot className=\"bg-gray-900 text-white text-lg font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Profit:</td>\n//                                     <td className=\"px-4 py-3 text-green-500\">{totalProfit}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Loss:</td>\n//                                     <td className=\"px-4 py-3 text-red-500\">-{totalLoss}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Net PnL:</td>\n//                                     <td\n//                                         className={`px-4 py-3 font-bold ${\n//                                             netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                         }`}\n//                                     >\n//                                         {netPnl}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\nconst PnlReport = () => {\n    const [pnlData, setPnlData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Fetch initial data from Flask API\n    const fetchInitialData = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n            const data = await response.json();\n            if (data.status === \"success\" && Array.isArray(data.orders)) {\n                setPnlData(data.orders); // Set API data\n            } else {\n                setError(\"Invalid API response structure.\");\n            }\n        } catch (err) {\n            setError(\"API request failed.\");\n        }\n        setLoading(false);\n    };\n\n    useEffect(() => {\n        fetchInitialData();\n\n        // Listen for live PnL updates from WebSocket\n        socket.on(\"pnl_update\", (data) => {\n            if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n                setPnlData(data.pnl_report);\n            } else {\n                setError(\"Invalid WebSocket data.\");\n            }\n        });\n\n        socket.on(\"connect_error\", (err) => {\n            console.error(\"Socket connection error:\", err);\n            setError(\"WebSocket connection failed.\");\n        });\n\n        return () => {\n            socket.off(\"pnl_update\");\n            socket.off(\"connect_error\");\n        };\n    }, []);\n\n    // Calculate totals for table columns\n    const totalQuantity = pnlData.reduce((sum, order) => sum + (order.quantity || 0), 0);\n    const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n    const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n    const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n    const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n    const netPnl = totalProfit - totalLoss;\n    \n    return (\n        <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n            <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n            {loading ? (\n                <p className=\"text-gray-300\">Fetching data...</p>\n            ) : error ? (\n                <p className=\"text-red-500 font-semibold\">{error}</p>\n            ) : (\n                <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n                    <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm text-gray-300\">\n                            <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n                                <tr>\n                                    <th className=\"px-4 py-2\">Order ID</th>\n                                    <th className=\"px-4 py-2\">Security ID</th>\n                                    <th className=\"px-4 py-2\">Type</th>\n                                    <th className=\"px-4 py-2\">Quantity</th>\n                                    <th className=\"px-4 py-2\">Entry Price</th>\n                                    <th className=\"px-4 py-2\">Latest Price</th>\n                                    <th className=\"px-4 py-2\">PnL</th>\n                                    <th className=\"px-4 py-2\">PnL %</th>\n                                    <th className=\"px-4 py-2\">Status</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-gray-700\">\n                                {pnlData.length === 0 ? (\n                                    <tr>\n                                        <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n                                            No orders available.\n                                        </td>\n                                    </tr>\n                                ) : (\n                                    pnlData.map((order) => (\n                                        <tr key={order.order_id} className=\"hover:bg-gray-700\">\n                                            <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td\n                                                className={`px-4 py-2 font-bold text-lg ${\n                                                    order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n                                                }`}\n                                            >\n                                                {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n                                            </td>\n                                            <td\n                                                className={`px-4 py-2 font-bold ${\n                                                    order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n                                                }`}\n                                            >\n                                                {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n                                            </td>\n                                        </tr>\n                                    ))\n                                )}\n                            </tbody>\n                            {/* Footer Row for Totals */}\n                            <tfoot className=\"bg-gray-200 text-black font-bold\">\n                                <tr className=\"border-t border-gray-200 bg-gray-200\">\n                                    <td className=\"px-15 py-1 text-right\" colSpan=\"3\">Total:</td>\n                                    <td className=\"px-4 py-3\">{totalQuantity}</td>\n                                    <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n                                    <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n                                    <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>\n                                        {netPnl.toFixed(2)}\n                                    </td>\n                                    <td className=\"px-4 py-3\"></td>\n                                    <td className=\"px-4 py-3\"></td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PnlReport;\n"],"mappings":";;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAeA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAUA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\stock-alphavantage\\\\src\\\\components\\\\PnlReport.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const PnLReport = () => {\n//   const [orderId, setOrderId] = useState('');\n//   const [pnlData, setPnlData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const fetchPnLReport = async () => {\n//     if (!orderId) {\n//       setError(\"Order ID is required.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError('');\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/pnl_report?orderId=${orderId}`);\n//       setPnlData(response.data);\n//     } catch (err) {\n//       setError(\"Error fetching data from the backend.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Binance Order PnL Report</h1>\n//       <input \n//         type=\"text\" \n//         placeholder=\"Enter Order ID\" \n//         value={orderId} \n//         onChange={(e) => setOrderId(e.target.value)} \n//       />\n//       <button onClick={fetchPnLReport} disabled={loading}>\n//         {loading ? 'Loading...' : 'Get PnL Report'}\n//       </button>\n\n//       {error && <div style={{ color: 'red' }}>{error}</div>}\n\n//       {pnlData && (\n//         <div>\n//           <h2>Order PnL Details</h2>\n//           <p>Order ID: {pnlData.orderId}</p>\n//           <p>Symbol: {pnlData.symbol}</p>\n//           <p>Buy Price: {pnlData.buyPrice}</p>\n//           <p>Current Price: {pnlData.currentPrice}</p>\n//           <p>Quantity: {pnlData.quantity}</p>\n//           <p>Realized PnL: {pnlData.realizedPnL}</p>\n//           <p>Unrealized PnL: {pnlData.unrealizedPnL}</p>\n//           <p>PnL Percentage: {pnlData.pnlPercentage}%</p>\n//           <p>profit: {pnlData.profit}</p>\n//           <p>loss: {pnlData.loss}</p>\n//           <p>sellStatus: {pnlData.sellStatus}</p>\n\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [orderId, setOrderId] = useState('');\n//   const [pnlData, setPnlData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState(false); // Success message state\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const fetchPnLReport = async () => {\n//     if (!orderId) {\n//       setError(\"Order ID is required.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError('');\n//     setSuccess(false); // Reset success message\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/pnl_report?orderId=${orderId}`);\n//       setPnlData(response.data);\n//       setSuccess(true); // Show success message\n\n//       // Hide success message after 3 seconds\n//       setTimeout(() => setSuccess(false), 3000);\n\n//       setOrderId(''); // Clear input after fetching\n//     } catch (err) {\n//       setError(\"Error fetching data from the backend.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-md mx-auto\">\n//       <h1 className=\"text-2xl font-bold mb-4\">Binance Order PnL Report</h1>\n//       <input \n//         type=\"text\"\n//         placeholder=\"Enter Order ID\"\n//         value={orderId}\n//         onChange={(e) => setOrderId(e.target.value)}\n//         className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//       />\n//       <button \n//         onClick={fetchPnLReport} \n//         disabled={loading}\n//         className=\"w-full p-2 mt-3 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? 'Loading...' : 'Get PnL Report'}\n//       </button>\n\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <div className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</div>}\n//       {success && <div className=\"mt-4 p-2 bg-green-600 text-white rounded\">PnL Report Fetched Successfully!</div>}\n\n//       {/* Popup Message */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n\n//       {pnlData && (\n//         <div className=\"mt-4 p-4 bg-gray-700 rounded-lg\">\n//           <h2 className=\"text-xl font-bold\">Order PnL Details</h2>\n//           <p><strong>Order ID:</strong> {pnlData.orderId}</p>\n//           <p><strong>Symbol:</strong> {pnlData.symbol}</p>\n//           <p><strong>Buy Price:</strong> {pnlData.buyPrice}</p>\n//           <p><strong>Current Price:</strong> {pnlData.currentPrice}</p>\n//           <p><strong>Quantity:</strong> {pnlData.quantity}</p>\n//           <p><strong>Realized PnL:</strong> {pnlData.realizedPnL}</p>\n//           <p><strong>Unrealized PnL:</strong> {pnlData.unrealizedPnL}</p>\n//           <p><strong>PnL Percentage:</strong> {pnlData.pnlPercentage}%</p>\n//           <p><strong>Profit:</strong> {pnlData.profit}</p>\n//           <p><strong>Loss:</strong> {pnlData.loss}</p>\n//           <p><strong>Sell Status:</strong> {pnlData.sellStatus}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [orderId, setOrderId] = useState('');\n//   const [pnlData, setPnlData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n//   const [showPopup, setShowPopup] = useState(false); // Popup state\n\n//   const fetchPnLReport = async () => {\n//     if (!orderId.trim()) {\n//       setError(\"Order ID is required.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError('');\n//     setShowPopup(false); // Hide popup initially\n\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/pnl_report?orderId=${orderId}`);\n//       setPnlData(response.data);\n\n//       // Show popup message\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000); // Hide after 3 seconds\n\n//       setOrderId(''); // Clear input field\n//     } catch (err) {\n//       setError(\"Error fetching data from the backend.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-md mx-auto\">\n//       <h1 className=\"text-2xl font-bold mb-4\">Binance Order PnL Report</h1>\n\n//       <input \n//         type=\"text\"\n//         placeholder=\"Enter Order ID\"\n//         value={orderId}\n//         onChange={(e) => setOrderId(e.target.value)}\n//         className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//       />\n\n//       <button \n//         onClick={fetchPnLReport} \n//         disabled={loading}\n//         className=\"w-full p-2 mt-3 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? 'Loading...' : 'Get PnL Report'}\n//       </button>\n\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <div className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</div>}\n\n//       {/* Popup Message */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           PnL Report Fetched Successfully!\n//         </div>\n//       )}\n\n//       {pnlData && (\n//         <div className=\"mt-4 p-4 bg-gray-700 rounded-lg\">\n//           <h2 className=\"text-xl font-bold\">Order PnL Details</h2>\n//           <p><strong>Order ID:</strong> {pnlData.orderId}</p>\n//           <p><strong>Symbol:</strong> {pnlData.symbol}</p>\n//           <p><strong>Buy Price:</strong> {pnlData.buyPrice}</p>\n//           <p><strong>Current Price:</strong> {pnlData.currentPrice}</p>\n//           <p><strong>Quantity:</strong> {pnlData.quantity}</p>\n//           <p><strong>Realized PnL:</strong> {pnlData.realizedPnL}</p>\n//           <p><strong>Unrealized PnL:</strong> {pnlData.unrealizedPnL}</p>\n//           <p><strong>PnL Percentage:</strong> {pnlData.pnlPercentage}%</p>\n//           <p><strong>Profit:</strong> {pnlData.profit}</p>\n//           <p><strong>Loss:</strong> {pnlData.loss}</p>\n//           <p><strong>Sell Status:</strong> {pnlData.sellStatus}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [orderId, setOrderId] = useState(\"\");\n//   const [pnlData, setPnlData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n//   const [showPopup, setShowPopup] = useState(false); // Popup state\n\n//   const fetchPnLReport = async () => {\n//     if (!orderId.trim()) {\n//       setError(\"Order ID is required.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(\"\");\n//     setShowPopup(false); // Hide popup initially\n\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:5000/api/pnl_report?orderId=${orderId}`\n//       );\n//       setPnlData(response.data);\n\n//       // Show popup message\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000); // Hide after 3 seconds\n\n//       setOrderId(\"\"); // Clear input field\n//     } catch (err) {\n//       setError(\"Error fetching data from the backend.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-4xl mx-auto\">\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Order PnL Report\n//       </h1>\n\n//       <div className=\"flex space-x-2\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Order ID\"\n//           value={orderId}\n//           onChange={(e) => setOrderId(e.target.value)}\n//           className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//         />\n//         <button\n//           onClick={fetchPnLReport}\n//           disabled={loading}\n//           className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//         >\n//           {loading ? \"Loading...\" : \"Get PnL Report\"}\n//         </button>\n//       </div>\n\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && (\n//         <div className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</div>\n//       )}\n\n//       {/* Popup Message */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           PnL Report Fetched Successfully!\n//         </div>\n//       )}\n\n//       {/* Table View */}\n//       {pnlData && (\n//         <div className=\"mt-6 overflow-x-auto\">\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                 <th className=\"border border-gray-600 p-2\">Symbol</th>\n//                 <th className=\"border border-gray-600 p-2\">Buy Price</th>\n//                 <th className=\"border border-gray-600 p-2\">Current Price</th>\n//                 <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                 <th className=\"border border-gray-600 p-2\">Realized PnL</th>\n//                 <th className=\"border border-gray-600 p-2\">Unrealized PnL</th>\n//                 <th className=\"border border-gray-600 p-2\">PnL %</th>\n//                 <th className=\"border border-gray-600 p-2\">Profit</th>\n//                 <th className=\"border border-gray-600 p-2\">Loss</th>\n//                 <th className=\"border border-gray-600 p-2\">Sell Status</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               <tr className=\"bg-gray-800 text-white\">\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.orderId}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.symbol}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.buyPrice}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.currentPrice}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.quantity}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.realizedPnL}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.unrealizedPnL}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.pnlPercentage}%</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.profit}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.loss}</td>\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.sellStatus}</td>\n//               </tr>\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n\n//   // Fetch all active orders periodically\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\n//       setPnlData(response.data); // Assuming API returns an array of active orders\n//     } catch (err) {\n//       setError(\"Error fetching PnL report. Please try again.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport(); // Fetch on mount\n//     const interval = setInterval(fetchPnLReport, 20000); // Auto-refresh every 10s\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h1>\n\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 w-full mb-4\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <div className=\"p-2 bg-red-600 text-white rounded mb-4\">{error}</div>}\n\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"Realized PnL\", \"Unrealized PnL\", \"PnL %\", \"Profit\", \"Loss\", \"Sell Status\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-800 text-white\">\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.pnlPercentage}%</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.profit}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.loss}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n\n//   // Fetch all active orders periodically\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\n//       console.log(response.data); // Log the response to check its structure\n//       setPnlData(response.data); // Assuming API returns an array of active orders\n//     } catch (err) {\n//       setError(\"Error fetching PnL report. Please try again.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport(); // Fetch on mount\n//     const interval = setInterval(fetchPnLReport, 20000); // Auto-refresh every 20 seconds\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h1>\n\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 w-full mb-4\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <div className=\"p-2 bg-red-600 text-white rounded mb-4\">{error}</div>}\n\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"Realized PnL\", \"Unrealized PnL\", \"PnL %\", \"Profit\", \"Loss\", \"Sell Status\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-800 text-white\">\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.pnlPercentage}%</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.profit}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.loss}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n\n//   // Fetch all PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\n//       console.log(response.data); // Log the response to check its structure\n//       setPnlData(response.data); // Assuming API returns an array of orders\n//     } catch (err) {\n//       setError(\"Error fetching PnL report. Please try again.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport(); // Fetch on mount\n//     // const interval = setInterval(fetchPnLReport, 20000); // Auto-refresh every 20 seconds\n//     // return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h1>\n\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 w-full mb-4\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <div className=\"p-2 bg-red-600 text-white rounded mb-4\">{error}</div>}\n\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"Realized PnL\", \"Unrealized PnL\", \"PnL %\", \"Profit\", \"Loss\", \"Sell Status\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-800 text-white\">\n//                   <td className=\"border border-gray-600 p-2\">{order.timestamp}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.pnlPercentage.toFixed(2)}%</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.profit}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.loss}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n\n//   // Fetch all PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\n//       console.log(\"API Response:\", response.data); // Log the response to check its structure\n//       if (response.data && Array.isArray(response.data)) {\n//         setPnlData(response.data); // Assuming API returns an array of orders\n//       } else {\n//         setError(\"Unexpected response structure.\");\n//       }\n//     } catch (err) {\n//       setError(\"Error fetching PnL report. Please try again.\");\n//       console.error(\"Error fetching PnL report:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport(); // Fetch on mount\n//     const interval = setInterval(fetchPnLReport, 30000); // Auto-refresh every 30 seconds\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h1>\n\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 w-full mb-4\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <div className=\"p-2 bg-red-600 text-white rounded mb-4\">{error}</div>}\n\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price\",\n//                   \"Current Price\",\n//                   \"Quantity\",\n//                   \"Realized PnL\",\n//                   \"Unrealized PnL\",\n//                   \"PnL %\",\n//                   \"Profit\",\n//                   \"Loss\",\n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-800 text-white\">\n//                   <td className=\"border border-gray-600 p-2\">{order.timestamp}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\n//                   <td className=\"border border-gray-600 p-2\">\n//                     {order.pnlPercentage ? order.pnlPercentage.toFixed(2) : \"N/A\"}%\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2\">{order.profit}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.loss}</td>\n//                   <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PnLReport = () => {\n  _s();\n  const navigate = useNavigate();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showPopup, setShowPopup] = useState(false);\n  const fetchPnLReport = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\n      setPnlData(response.data); // Assuming response is an array of PnL data\n      setShowPopup(true);\n      setTimeout(() => {\n        setShowPopup(false);\n      }, 30000);\n    } catch (err) {\n      setError(\"Failed to fetch PnL report. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPnLReport();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-center\",\n      children: \"Binance Active Orders PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchPnLReport,\n      disabled: loading,\n      className: \"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\",\n      children: loading ? \"Refreshing...\" : \"Refresh PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      className: \"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\",\n      children: \"Back to Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 846,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 p-2 bg-red-600 text-white rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 854,\n      columnNumber: 17\n    }, this), pnlData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"w-full text-left border-collapse border border-gray-600\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-700 text-yellow-400\",\n            children: [\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"Realized PnL\", \"Unrealized PnL\", \"PnL %\", \"Profit\", \"Loss\", \"Sell Status\"].map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-600 p-2\",\n              children: header\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 876,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: pnlData.map((order, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-800 text-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 883,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.orderId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.symbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 885,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.buyPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 886,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.currentPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 887,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 888,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.realizedPnL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 889,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.unrealizedPnL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: [order.pnlPercentage.toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.profit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 892,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.loss\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 893,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: order.sellStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 894,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 882,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-400\",\n      children: \"No active orders found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 901,\n      columnNumber: 9\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\",\n      children: \"Data fetched successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 906,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 833,\n    columnNumber: 5\n  }, this);\n};\n_s(PnLReport, \"tUuwASU7v7BAlCASV6lYB53oYf8=\", false, function () {\n  return [useNavigate];\n});\n_c = PnLReport;\nexport default PnLReport;\nvar _c;\n$RefreshReg$(_c, \"PnLReport\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","PnLReport","_s","navigate","pnlData","setPnlData","loading","setLoading","error","setError","showPopup","setShowPopup","fetchPnLReport","response","get","data","setTimeout","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","map","header","index","order","timestamp","orderId","symbol","buyPrice","currentPrice","quantity","realizedPnL","unrealizedPnL","pnlPercentage","toFixed","profit","loss","sellStatus","_c","$RefreshReg$"],"sources":["D:/stock-alphavantage/src/components/PnlReport.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const PnLReport = () => {\r\n//   const [orderId, setOrderId] = useState('');\r\n//   const [pnlData, setPnlData] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState('');\r\n\r\n//   const fetchPnLReport = async () => {\r\n//     if (!orderId) {\r\n//       setError(\"Order ID is required.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setError('');\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:5000/api/pnl_report?orderId=${orderId}`);\r\n//       setPnlData(response.data);\r\n//     } catch (err) {\r\n//       setError(\"Error fetching data from the backend.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Binance Order PnL Report</h1>\r\n//       <input \r\n//         type=\"text\" \r\n//         placeholder=\"Enter Order ID\" \r\n//         value={orderId} \r\n//         onChange={(e) => setOrderId(e.target.value)} \r\n//       />\r\n//       <button onClick={fetchPnLReport} disabled={loading}>\r\n//         {loading ? 'Loading...' : 'Get PnL Report'}\r\n//       </button>\r\n\r\n//       {error && <div style={{ color: 'red' }}>{error}</div>}\r\n\r\n//       {pnlData && (\r\n//         <div>\r\n//           <h2>Order PnL Details</h2>\r\n//           <p>Order ID: {pnlData.orderId}</p>\r\n//           <p>Symbol: {pnlData.symbol}</p>\r\n//           <p>Buy Price: {pnlData.buyPrice}</p>\r\n//           <p>Current Price: {pnlData.currentPrice}</p>\r\n//           <p>Quantity: {pnlData.quantity}</p>\r\n//           <p>Realized PnL: {pnlData.realizedPnL}</p>\r\n//           <p>Unrealized PnL: {pnlData.unrealizedPnL}</p>\r\n//           <p>PnL Percentage: {pnlData.pnlPercentage}%</p>\r\n//           <p>profit: {pnlData.profit}</p>\r\n//           <p>loss: {pnlData.loss}</p>\r\n//           <p>sellStatus: {pnlData.sellStatus}</p>\r\n\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [orderId, setOrderId] = useState('');\r\n//   const [pnlData, setPnlData] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState('');\r\n//   const [success, setSuccess] = useState(false); // Success message state\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n  \r\n//   const fetchPnLReport = async () => {\r\n//     if (!orderId) {\r\n//       setError(\"Order ID is required.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setError('');\r\n//     setSuccess(false); // Reset success message\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:5000/api/pnl_report?orderId=${orderId}`);\r\n//       setPnlData(response.data);\r\n//       setSuccess(true); // Show success message\r\n\r\n//       // Hide success message after 3 seconds\r\n//       setTimeout(() => setSuccess(false), 3000);\r\n\r\n//       setOrderId(''); // Clear input after fetching\r\n//     } catch (err) {\r\n//       setError(\"Error fetching data from the backend.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-md mx-auto\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">Binance Order PnL Report</h1>\r\n//       <input \r\n//         type=\"text\"\r\n//         placeholder=\"Enter Order ID\"\r\n//         value={orderId}\r\n//         onChange={(e) => setOrderId(e.target.value)}\r\n//         className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//       />\r\n//       <button \r\n//         onClick={fetchPnLReport} \r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mt-3 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? 'Loading...' : 'Get PnL Report'}\r\n//       </button>\r\n\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {error && <div className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</div>}\r\n//       {success && <div className=\"mt-4 p-2 bg-green-600 text-white rounded\">PnL Report Fetched Successfully!</div>}\r\n\r\n//       {/* Popup Message */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Order created successfully!\r\n//         </div>\r\n//       )}\r\n\r\n//       {pnlData && (\r\n//         <div className=\"mt-4 p-4 bg-gray-700 rounded-lg\">\r\n//           <h2 className=\"text-xl font-bold\">Order PnL Details</h2>\r\n//           <p><strong>Order ID:</strong> {pnlData.orderId}</p>\r\n//           <p><strong>Symbol:</strong> {pnlData.symbol}</p>\r\n//           <p><strong>Buy Price:</strong> {pnlData.buyPrice}</p>\r\n//           <p><strong>Current Price:</strong> {pnlData.currentPrice}</p>\r\n//           <p><strong>Quantity:</strong> {pnlData.quantity}</p>\r\n//           <p><strong>Realized PnL:</strong> {pnlData.realizedPnL}</p>\r\n//           <p><strong>Unrealized PnL:</strong> {pnlData.unrealizedPnL}</p>\r\n//           <p><strong>PnL Percentage:</strong> {pnlData.pnlPercentage}%</p>\r\n//           <p><strong>Profit:</strong> {pnlData.profit}</p>\r\n//           <p><strong>Loss:</strong> {pnlData.loss}</p>\r\n//           <p><strong>Sell Status:</strong> {pnlData.sellStatus}</p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [orderId, setOrderId] = useState('');\r\n//   const [pnlData, setPnlData] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState('');\r\n//   const [showPopup, setShowPopup] = useState(false); // Popup state\r\n\r\n//   const fetchPnLReport = async () => {\r\n//     if (!orderId.trim()) {\r\n//       setError(\"Order ID is required.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setError('');\r\n//     setShowPopup(false); // Hide popup initially\r\n\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:5000/api/pnl_report?orderId=${orderId}`);\r\n//       setPnlData(response.data);\r\n\r\n//       // Show popup message\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000); // Hide after 3 seconds\r\n\r\n//       setOrderId(''); // Clear input field\r\n//     } catch (err) {\r\n//       setError(\"Error fetching data from the backend.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-md mx-auto\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">Binance Order PnL Report</h1>\r\n      \r\n//       <input \r\n//         type=\"text\"\r\n//         placeholder=\"Enter Order ID\"\r\n//         value={orderId}\r\n//         onChange={(e) => setOrderId(e.target.value)}\r\n//         className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//       />\r\n\r\n//       <button \r\n//         onClick={fetchPnLReport} \r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mt-3 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? 'Loading...' : 'Get PnL Report'}\r\n//       </button>\r\n\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {error && <div className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</div>}\r\n\r\n//       {/* Popup Message */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           PnL Report Fetched Successfully!\r\n//         </div>\r\n//       )}\r\n\r\n//       {pnlData && (\r\n//         <div className=\"mt-4 p-4 bg-gray-700 rounded-lg\">\r\n//           <h2 className=\"text-xl font-bold\">Order PnL Details</h2>\r\n//           <p><strong>Order ID:</strong> {pnlData.orderId}</p>\r\n//           <p><strong>Symbol:</strong> {pnlData.symbol}</p>\r\n//           <p><strong>Buy Price:</strong> {pnlData.buyPrice}</p>\r\n//           <p><strong>Current Price:</strong> {pnlData.currentPrice}</p>\r\n//           <p><strong>Quantity:</strong> {pnlData.quantity}</p>\r\n//           <p><strong>Realized PnL:</strong> {pnlData.realizedPnL}</p>\r\n//           <p><strong>Unrealized PnL:</strong> {pnlData.unrealizedPnL}</p>\r\n//           <p><strong>PnL Percentage:</strong> {pnlData.pnlPercentage}%</p>\r\n//           <p><strong>Profit:</strong> {pnlData.profit}</p>\r\n//           <p><strong>Loss:</strong> {pnlData.loss}</p>\r\n//           <p><strong>Sell Status:</strong> {pnlData.sellStatus}</p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [orderId, setOrderId] = useState(\"\");\r\n//   const [pnlData, setPnlData] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(\"\");\r\n//   const [showPopup, setShowPopup] = useState(false); // Popup state\r\n\r\n//   const fetchPnLReport = async () => {\r\n//     if (!orderId.trim()) {\r\n//       setError(\"Order ID is required.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setError(\"\");\r\n//     setShowPopup(false); // Hide popup initially\r\n\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:5000/api/pnl_report?orderId=${orderId}`\r\n//       );\r\n//       setPnlData(response.data);\r\n\r\n//       // Show popup message\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000); // Hide after 3 seconds\r\n\r\n//       setOrderId(\"\"); // Clear input field\r\n//     } catch (err) {\r\n//       setError(\"Error fetching data from the backend.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-4xl mx-auto\">\r\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Order PnL Report\r\n//       </h1>\r\n\r\n//       <div className=\"flex space-x-2\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter Order ID\"\r\n//           value={orderId}\r\n//           onChange={(e) => setOrderId(e.target.value)}\r\n//           className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//         />\r\n//         <button\r\n//           onClick={fetchPnLReport}\r\n//           disabled={loading}\r\n//           className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//         >\r\n//           {loading ? \"Loading...\" : \"Get PnL Report\"}\r\n//         </button>\r\n//       </div>\r\n\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {error && (\r\n//         <div className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</div>\r\n//       )}\r\n\r\n//       {/* Popup Message */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           PnL Report Fetched Successfully!\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Table View */}\r\n//       {pnlData && (\r\n//         <div className=\"mt-6 overflow-x-auto\">\r\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 <th className=\"border border-gray-600 p-2\">Order ID</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Symbol</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Buy Price</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Current Price</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Quantity</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Realized PnL</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Unrealized PnL</th>\r\n//                 <th className=\"border border-gray-600 p-2\">PnL %</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Profit</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Loss</th>\r\n//                 <th className=\"border border-gray-600 p-2\">Sell Status</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               <tr className=\"bg-gray-800 text-white\">\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.orderId}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.symbol}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.buyPrice}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.currentPrice}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.quantity}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.realizedPnL}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.unrealizedPnL}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.pnlPercentage}%</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.profit}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.loss}</td>\r\n//                 <td className=\"border border-gray-600 p-2\">{pnlData.sellStatus}</td>\r\n//               </tr>\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   // Fetch all active orders periodically\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(\"\");\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\r\n//       setPnlData(response.data); // Assuming API returns an array of active orders\r\n//     } catch (err) {\r\n//       setError(\"Error fetching PnL report. Please try again.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport(); // Fetch on mount\r\n//     const interval = setInterval(fetchPnLReport, 20000); // Auto-refresh every 10s\r\n//     return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h1>\r\n\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 w-full mb-4\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {error && <div className=\"p-2 bg-red-600 text-white rounded mb-4\">{error}</div>}\r\n\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"Realized PnL\", \"Unrealized PnL\", \"PnL %\", \"Profit\", \"Loss\", \"Sell Status\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-800 text-white\">\r\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.pnlPercentage}%</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.profit}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.loss}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   // Fetch all active orders periodically\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(\"\");\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\r\n//       console.log(response.data); // Log the response to check its structure\r\n//       setPnlData(response.data); // Assuming API returns an array of active orders\r\n//     } catch (err) {\r\n//       setError(\"Error fetching PnL report. Please try again.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport(); // Fetch on mount\r\n//     const interval = setInterval(fetchPnLReport, 20000); // Auto-refresh every 20 seconds\r\n//     return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h1>\r\n\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 w-full mb-4\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {error && <div className=\"p-2 bg-red-600 text-white rounded mb-4\">{error}</div>}\r\n\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"Realized PnL\", \"Unrealized PnL\", \"PnL %\", \"Profit\", \"Loss\", \"Sell Status\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-800 text-white\">\r\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.pnlPercentage}%</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.profit}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.loss}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   // Fetch all PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(\"\");\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\r\n//       console.log(response.data); // Log the response to check its structure\r\n//       setPnlData(response.data); // Assuming API returns an array of orders\r\n//     } catch (err) {\r\n//       setError(\"Error fetching PnL report. Please try again.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport(); // Fetch on mount\r\n//     // const interval = setInterval(fetchPnLReport, 20000); // Auto-refresh every 20 seconds\r\n//     // return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h1>\r\n\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 w-full mb-4\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {error && <div className=\"p-2 bg-red-600 text-white rounded mb-4\">{error}</div>}\r\n\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"Realized PnL\", \"Unrealized PnL\", \"PnL %\", \"Profit\", \"Loss\", \"Sell Status\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-800 text-white\">\r\n//                   <td className=\"border border-gray-600 p-2\">{order.timestamp}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.pnlPercentage.toFixed(2)}%</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.profit}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.loss}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   // Fetch all PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(\"\");\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\r\n//       console.log(\"API Response:\", response.data); // Log the response to check its structure\r\n//       if (response.data && Array.isArray(response.data)) {\r\n//         setPnlData(response.data); // Assuming API returns an array of orders\r\n//       } else {\r\n//         setError(\"Unexpected response structure.\");\r\n//       }\r\n//     } catch (err) {\r\n//       setError(\"Error fetching PnL report. Please try again.\");\r\n//       console.error(\"Error fetching PnL report:\", err);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport(); // Fetch on mount\r\n//     const interval = setInterval(fetchPnLReport, 30000); // Auto-refresh every 30 seconds\r\n//     return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h1 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h1>\r\n\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"p-2 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 w-full mb-4\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {error && <div className=\"p-2 bg-red-600 text-white rounded mb-4\">{error}</div>}\r\n\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full text-left border-collapse border border-gray-600\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price\",\r\n//                   \"Current Price\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL\",\r\n//                   \"Unrealized PnL\",\r\n//                   \"PnL %\",\r\n//                   \"Profit\",\r\n//                   \"Loss\",\r\n//                   \"Sell Status\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-800 text-white\">\r\n//                   <td className=\"border border-gray-600 p-2\">{order.timestamp}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">\r\n//                     {order.pnlPercentage ? order.pnlPercentage.toFixed(2) : \"N/A\"}%\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.profit}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.loss}</td>\r\n//                   <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst PnLReport = () => {\r\n  const navigate = useNavigate();\r\n  const [pnlData, setPnlData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n\r\n  const fetchPnLReport = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\r\n      setPnlData(response.data); // Assuming response is an array of PnL data\r\n      setShowPopup(true);\r\n      setTimeout(() => {\r\n        setShowPopup(false);\r\n      }, 30000);\r\n    } catch (err) {\r\n      setError(\"Failed to fetch PnL report. Please try again.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPnLReport();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h2>\r\n\r\n      {/* Refresh Button */}\r\n      <button\r\n        onClick={fetchPnLReport}\r\n        disabled={loading}\r\n        className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n      >\r\n        {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n      </button>\r\n\r\n      {/* Back Button */}\r\n      <button\r\n        onClick={() => navigate(\"/\")}\r\n        className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n      >\r\n        Back to Dashboard\r\n      </button>\r\n\r\n      {/* Error Message */}\r\n      {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n      {/* Table with PnL Data */}\r\n      {pnlData.length > 0 ? (\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full text-left border-collapse border border-gray-600\">\r\n            <thead>\r\n              <tr className=\"bg-gray-700 text-yellow-400\">\r\n                {[\r\n                  \"Timestamp\",\r\n                  \"Order ID\",\r\n                  \"Symbol\",\r\n                  \"Buy Price\",\r\n                  \"Current Price\",\r\n                  \"Quantity\",\r\n                  \"Realized PnL\",\r\n                  \"Unrealized PnL\",\r\n                  \"PnL %\",\r\n                  \"Profit\",\r\n                  \"Loss\",\r\n                  \"Sell Status\",\r\n                ].map((header, index) => (\r\n                  <th key={index} className=\"border border-gray-600 p-2\">{header}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {pnlData.map((order, index) => (\r\n                <tr key={index} className=\"bg-gray-800 text-white\">\r\n                  <td className=\"border border-gray-600 p-2\">{order.timestamp}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.buyPrice}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.currentPrice}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.quantity}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.realizedPnL}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.unrealizedPnL}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.pnlPercentage.toFixed(2)}%</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.profit}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.loss}</td>\r\n                  <td className=\"border border-gray-600 p-2\">{order.sellStatus}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n      )}\r\n\r\n      {/* Success Popup */}\r\n      {showPopup && (\r\n        <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n          Data fetched successfully!\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PnLReport;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAUA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAGA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
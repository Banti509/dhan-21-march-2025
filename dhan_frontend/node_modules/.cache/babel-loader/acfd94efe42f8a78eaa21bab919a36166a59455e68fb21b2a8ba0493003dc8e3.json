{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PlaceOrder.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [symbol, setSymbol] = useState(\"12345\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(0.001);\n//   const [price, setPrice] = useState(\"\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const handlePlaceOrder = async () => {\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if (orderType === \"LIMIT\" && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const orderData = {\n//         security_id: symbol,\n//         side: side,\n//         type: orderType,\n//         quantity: quantity,\n//         price: orderType === \"LIMIT\" ? price : undefined,\n//         timeInForce: orderType === \"LIMIT\" ? timeInForce : undefined,\n//       };\n\n//       const response = await axios.post(\"http://localhost:5000/place-order\", orderData, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n\n//       if (response.data.status === \"offline\") {\n//         setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       } else if (response.data.status === \"success\") {\n//         setSuccessMessage(\"Order placed successfully.\");\n//       } else {\n//         setError(\"Failed to place order. Please try again.\");\n//       }\n//     } catch (err) {\n//       setError(`Error placing order. Please try again. ${err.message}`);\n//       console.log(\"====================\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">security_id:</label>\n//           <input\n//             type=\"text\"\n//             value={symbol}\n//             onChange={(e) => setSymbol(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Side:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//           </select>\n//         </div>\n//         {orderType === \"LIMIT\" && (\n//           <>\n//             {/* <div>\n//               <label className=\"block mb-1\">Price:</label>\n//               <input\n//                 type=\"number\"\n//                 value={price}\n//                 onChange={(e) => setPrice(parseFloat(e.target.value) || \"\")}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               />\n//             </div> */}\n//             <div>\n//               <label className=\"block mb-1\">Time In Force:</label>\n//               <select\n//                 value={timeInForce}\n//                 onChange={(e) => setTimeInForce(e.target.value)}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               >\n//                 <option value=\"GTC\">GTC (Good Till Cancelled)</option>\n//                 <option value=\"IOC\">IOC (Immediate Or Cancel)</option>\n//                 <option value=\"FOK\">FOK (Fill Or Kill)</option>\n//               </select>\n//             </div>\n//           </>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 0)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//               <label className=\"block mb-1\">Price:</label>\n//               <input\n//                 type=\"number\"\n//                 value={price}\n//                 onChange={(e) => setPrice(parseFloat(e.target.value) || 0)}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               />\n//             </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {/* Order Table */}\n//        {orders.length > 0 && (\n//          <div className=\"mt-6\">\n//            <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//            <div className=\"overflow-x-auto\">\n//              <table className=\"w-full border-collapse border border-gray-600\">\n//                 <thead>\n//                   <tr className=\"bg-gray-700 text-white\">\n//                     <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                     <th className=\"border border-gray-600 p-2\">Symbol</th>\n//                     <th className=\"border border-gray-600 p-2\">Side</th>\n//                     <th className=\"border border-gray-600 p-2\">Type</th>\n//                    <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                    <th className=\"border border-gray-600 p-2\">Price</th>\n//                    <th className=\"border border-gray-600 p-2\">Status</th>\n//                  </tr>\n//                </thead>\n//                <tbody>\n//                   {orders.map((order, index) => (\n//                     <tr key={index} className=\"bg-gray-800 text-white\">\n//                      <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.side}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.type}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.status}</td>\n//                    </tr>\n//                  ))}\n//               </tbody>\n//               </table>\n//            </div>\n//          </div>\n//        )}\n//        {showPopup && (\n//          <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//            Order created successfully!\n//          </div>\n//        )}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [security_id, setsecurity_id] = useState(\"12345\");\n//   const [exchange_segment, setexchange_segment] = useState(\"NSE\")\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(1);\n//   const [price, setPrice] = useState(\"\");\n//   const [triggerPrice, setTriggerPrice] = useState(\"\");\n//   const [productType, setProductType] = useState(\"INTRA\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const handlePlaceOrder = async () => {\n//     setError(null);\n//     setSuccessMessage(null);\n\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n//       return;\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && triggerPrice <= 0) {\n//       setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     try {\n//       const orderData = {\n//         security_id: security_id,\n//         exchange_segment: exchange_segment,  // NSE or BSE\n//         transaction_type: side,  // BUY or SELL\n//         quantity: quantity,\n//         order_type: orderType,   // Ensures all types are correctly passed\n//         price: [\"LIMIT\", \"STOP_LOSS\"].includes(orderType) ? price : undefined,  // Include price only for these types\n//         trigger_price: [\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) ? triggerPrice : undefined,  // Only for SL orders\n//         product_type: productType,\n//         timeInForce: orderType === \"LIMIT\" ? timeInForce : undefined,  // Only for LIMIT orders\n//       };\n\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n//       console.log(\"Order Response:\", response.data);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n\n//       if (response.data.status === \"offline\") {\n//         setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       } else if (response.data.status === \"success\") {\n//         setSuccessMessage(\"Order placed successfully.\");\n//       } else {\n//         setError(\"Failed to place order. Please try again.\");\n//       }\n//     } catch (err) {\n//       setError(`Error placing order: ${err.message}`);\n//       console.error(\"Order Error:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">Security ID:</label>\n//           <input\n//             type=\"text\"\n//             value={security_id}\n//             onChange={(e) => setsecurity_id(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Exchange Segment:</label>\n//           <select\n//             value={exchange_segment}\n//             onChange={(e) => setexchange_segment(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">NSE</option>\n//             <option value=\"SELL\">BSE</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Transaction Type:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"STOP_LOSS\">STOP-LOSS (SL)</option>\n//             <option value=\"STOP_LOSS_MARKET\">STOP-LOSS MARKET (SL-M)</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Product Type:</label>\n//           <select\n//             value={productType}\n//             onChange={(e) => setProductType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"INTRA\">INTRA</option>\n//             <option value=\"CNC\">CNC</option>\n//           </select>\n//         </div>\n//         {orderType !== \"MARKET\" && (\n//           <div>\n//             <label className=\"block mb-1\">Price:</label>\n//             <input\n//               type=\"number\"\n//               value={price}\n//               onChange={(e) => setPrice(parseFloat(e.target.value) || 0)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         {[\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (\n//           <div>\n//             <label className=\"block mb-1\">Trigger Price:</label>\n//             <input\n//               type=\"number\"\n//               value={triggerPrice}\n//               onChange={(e) => setTriggerPrice(parseFloat(e.target.value) || 0)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 1)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {/* Order Table */}\n//       {orders.length > 0 && (\n//         <div className=\"mt-6\">\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Security id</th>\n//                   <th className=\"border border-gray-600 p-2\">Side</th>\n//                   <th className=\"border border-gray-600 p-2\">Order Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\n//                   <th className=\"border border-gray-600 p-2\">Product Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                     <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.security_id}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.side}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.order_type}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.product_type}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.status}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         </div>\n//       )}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [security_id, setSecurityId] = useState(\"12345\");\n//   const [exchange_segment, setExchangeSegment] = useState(\"NSE\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(1);\n//   const [price, setPrice] = useState(\"\");\n//   const [triggerPrice, setTriggerPrice] = useState(\"\");\n//   const [productType, setProductType] = useState(\"INTRA\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const handlePlaceOrder = async () => {\n//     setError(null);\n//     setSuccessMessage(null);\n\n//     // Input validation\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && (!price || price <= 0)) {\n//       setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n//       return;\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (!triggerPrice || triggerPrice <= 0)) {\n//       setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     try {\n//       const orderData = {\n//         security_id,\n//         exchange_segment, // NSE or BSE\n//         transaction_type: side, // BUY or SELL\n//         quantity,\n//         order_type: orderType,\n//         price: [\"LIMIT\", \"STOP_LOSS\"].includes(orderType) ? price : undefined,\n//         trigger_price: [\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) ? triggerPrice : undefined,\n//         product_type: productType,\n//         timeInForce: orderType === \"LIMIT\" ? timeInForce : undefined,\n//       };\n\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n//         headers: { \"Content-Type\": \"application/json\" },\n//       });\n\n//       console.log(\"Order Response:\", response.data);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n\n//       if (response.data.status === \"offline\") {\n//         setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       } else if (response.data.status === \"success\") {\n//         setSuccessMessage(\"Order placed successfully.\");\n//       } else {\n//         setError(\"Failed to place order. Please try again.\");\n//       }\n//     } catch (err) {\n//       setError(`Error placing order: ${err.message}`);\n//       console.error(\"Order Error:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">Security ID:</label>\n//           <input\n//             type=\"text\"\n//             value={security_id}\n//             onChange={(e) => setSecurityId(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Exchange Segment:</label>\n//           <select\n//             value={exchange_segment}\n//             onChange={(e) => setExchangeSegment(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"NSE\">NSE</option>\n//             <option value=\"BSE\">BSE</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Transaction Type:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"STOP_LOSS\">STOP-LOSS (SL)</option>\n//             <option value=\"STOP_LOSS_MARKET\">STOP-LOSS MARKET (SL-M)</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Product Type:</label>\n//           <select\n//             value={productType}\n//             onChange={(e) => setProductType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"INTRA\">INTRA</option>\n//             <option value=\"CNC\">CNC</option>\n//           </select>\n//         </div>\n//         {orderType !== \"MARKET\" && (\n//           <div>\n//             <label className=\"block mb-1\">Price:</label>\n//             <input\n//               type=\"number\"\n//               value={price}\n//               onChange={(e) => setPrice(parseFloat(e.target.value) || 0)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         {[\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (\n//           <div>\n//             <label className=\"block mb-1\">Trigger Price:</label>\n//             <input\n//               type=\"number\"\n//               value={triggerPrice}\n//               onChange={(e) => setTriggerPrice(parseFloat(e.target.value) || 0)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 1)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//       {showPopup && <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">Order created successfully!</div>}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaceOrder = () => {\n  _s();\n  const [security_id, setSecurityId] = useState(\"12345\");\n  const [exchange_segment, setExchangeSegment] = useState(\"NSE\");\n  const [side, setSide] = useState(\"BUY\");\n  const [orderType, setOrderType] = useState(\"LIMIT\");\n  const [quantity, setQuantity] = useState(1);\n  const [price, setPrice] = useState(\"\");\n  const [triggerPrice, setTriggerPrice] = useState(\"\");\n  const [productType, setProductType] = useState(\"INTRA\");\n  const [timeInForce, setTimeInForce] = useState(\"GTC\");\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [orders, setOrders] = useState([]);\n\n  // Fetch existing orders on component mount\n  useEffect(() => {\n    const fetchOrders = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/orders\");\n        setOrders(response.data);\n      } catch (error) {\n        console.error(\"Error fetching orders:\", error);\n      }\n    };\n    fetchOrders();\n  }, []);\n  const handlePlaceOrder = async () => {\n    setError(null);\n    setSuccessMessage(null);\n    if (quantity <= 0) {\n      setError(\"Quantity must be greater than 0.\");\n      return;\n    }\n    if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && (!price || price <= 0)) {\n      setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n      return;\n    }\n    if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (!triggerPrice || triggerPrice <= 0)) {\n      setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const orderData = {\n        security_id,\n        exchange_segment,\n        transaction_type: side,\n        quantity,\n        order_type: orderType,\n        price: [\"LIMIT\", \"STOP_LOSS\"].includes(orderType) ? price : undefined,\n        trigger_price: [\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) ? triggerPrice : undefined,\n        product_type: productType,\n        timeInForce: orderType === \"LIMIT\" ? timeInForce : undefined\n      };\n      const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"Order Response:\", response.data);\n      setOrders(prevOrders => [...prevOrders, response.data]);\n      setSuccessMessage(\"Order placed successfully.\");\n    } catch (err) {\n      setError(`Error placing order: ${err.message}`);\n      console.error(\"Order Error:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlaceOrder,\n      disabled: loading,\n      className: \"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\",\n      children: loading ? \"Placing Order...\" : \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 p-2 bg-red-400 text-black rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 17\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 p-2 bg-green-600 text-white rounded\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 730,\n      columnNumber: 26\n    }, this), orders.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-bold mb-2\",\n        children: \"Order History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"w-full border-collapse border border-gray-600\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-700 text-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border border-gray-600\",\n              children: \"Security ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border border-gray-600\",\n              children: \"Exchange\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 739,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border border-gray-600\",\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 740,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border border-gray-600\",\n              children: \"Qty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border border-gray-600\",\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 border border-gray-600\",\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: orders.map((order, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-800\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border border-gray-600\",\n              children: order.security_id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border border-gray-600\",\n              children: order.exchange_segment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border border-gray-600\",\n              children: order.transaction_type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border border-gray-600\",\n              children: order.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border border-gray-600\",\n              children: order.price || \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 border border-gray-600\",\n              children: order.status || \"Pending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 724,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaceOrder, \"JeAEG2vnX83XHmBCPS0XT/vGDzk=\");\n_c = PlaceOrder;\nexport default PlaceOrder;\nvar _c;\n$RefreshReg$(_c, \"PlaceOrder\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","PlaceOrder","_s","security_id","setSecurityId","exchange_segment","setExchangeSegment","side","setSide","orderType","setOrderType","quantity","setQuantity","price","setPrice","triggerPrice","setTriggerPrice","productType","setProductType","timeInForce","setTimeInForce","error","setError","loading","setLoading","successMessage","setSuccessMessage","orders","setOrders","fetchOrders","response","get","data","console","handlePlaceOrder","includes","orderData","transaction_type","order_type","undefined","trigger_price","product_type","post","headers","log","prevOrders","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","map","order","index","status","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PlaceOrder.js"],"sourcesContent":["\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [symbol, setSymbol] = useState(\"12345\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(0.001);\n//   const [price, setPrice] = useState(\"\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n\n\n//   const handlePlaceOrder = async () => {\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if (orderType === \"LIMIT\" && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT orders.\");\n//       return;\n//     }\n  \n//     setLoading(true);\n//     setError(null);\n  \n//     try {\n//       const orderData = {\n//         security_id: symbol,\n//         side: side,\n//         type: orderType,\n//         quantity: quantity,\n//         price: orderType === \"LIMIT\" ? price : undefined,\n//         timeInForce: orderType === \"LIMIT\" ? timeInForce : undefined,\n//       };\n  \n//       const response = await axios.post(\"http://localhost:5000/place-order\", orderData, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n      \n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n  \n//       if (response.data.status === \"offline\") {\n//         setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       } else if (response.data.status === \"success\") {\n//         setSuccessMessage(\"Order placed successfully.\");\n//       } else {\n//         setError(\"Failed to place order. Please try again.\");\n//       }\n//     } catch (err) {\n//       setError(`Error placing order. Please try again. ${err.message}`);\n//       console.log(\"====================\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n  \n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">security_id:</label>\n//           <input\n//             type=\"text\"\n//             value={symbol}\n//             onChange={(e) => setSymbol(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Side:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//           </select>\n//         </div>\n//         {orderType === \"LIMIT\" && (\n//           <>\n//             {/* <div>\n//               <label className=\"block mb-1\">Price:</label>\n//               <input\n//                 type=\"number\"\n//                 value={price}\n//                 onChange={(e) => setPrice(parseFloat(e.target.value) || \"\")}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               />\n//             </div> */}\n//             <div>\n//               <label className=\"block mb-1\">Time In Force:</label>\n//               <select\n//                 value={timeInForce}\n//                 onChange={(e) => setTimeInForce(e.target.value)}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               >\n//                 <option value=\"GTC\">GTC (Good Till Cancelled)</option>\n//                 <option value=\"IOC\">IOC (Immediate Or Cancel)</option>\n//                 <option value=\"FOK\">FOK (Fill Or Kill)</option>\n//               </select>\n//             </div>\n//           </>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 0)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//               <label className=\"block mb-1\">Price:</label>\n//               <input\n//                 type=\"number\"\n//                 value={price}\n//                 onChange={(e) => setPrice(parseFloat(e.target.value) || 0)}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               />\n//             </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {/* Order Table */}\n//        {orders.length > 0 && (\n//          <div className=\"mt-6\">\n//            <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//            <div className=\"overflow-x-auto\">\n//              <table className=\"w-full border-collapse border border-gray-600\">\n//                 <thead>\n//                   <tr className=\"bg-gray-700 text-white\">\n//                     <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                     <th className=\"border border-gray-600 p-2\">Symbol</th>\n//                     <th className=\"border border-gray-600 p-2\">Side</th>\n//                     <th className=\"border border-gray-600 p-2\">Type</th>\n//                    <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                    <th className=\"border border-gray-600 p-2\">Price</th>\n//                    <th className=\"border border-gray-600 p-2\">Status</th>\n//                  </tr>\n//                </thead>\n//                <tbody>\n//                   {orders.map((order, index) => (\n//                     <tr key={index} className=\"bg-gray-800 text-white\">\n//                      <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.side}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.type}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\n//                      <td className=\"border border-gray-600 p-2\">{order.status}</td>\n//                    </tr>\n//                  ))}\n//               </tbody>\n//               </table>\n//            </div>\n//          </div>\n//        )}\n//        {showPopup && (\n//          <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//            Order created successfully!\n//          </div>\n//        )}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [security_id, setsecurity_id] = useState(\"12345\");\n//   const [exchange_segment, setexchange_segment] = useState(\"NSE\")\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(1);\n//   const [price, setPrice] = useState(\"\");\n//   const [triggerPrice, setTriggerPrice] = useState(\"\");\n//   const [productType, setProductType] = useState(\"INTRA\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const handlePlaceOrder = async () => {\n//     setError(null);\n//     setSuccessMessage(null);\n\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n//       return;\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && triggerPrice <= 0) {\n//       setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     try {\n//       const orderData = {\n//         security_id: security_id,\n//         exchange_segment: exchange_segment,  // NSE or BSE\n//         transaction_type: side,  // BUY or SELL\n//         quantity: quantity,\n//         order_type: orderType,   // Ensures all types are correctly passed\n//         price: [\"LIMIT\", \"STOP_LOSS\"].includes(orderType) ? price : undefined,  // Include price only for these types\n//         trigger_price: [\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) ? triggerPrice : undefined,  // Only for SL orders\n//         product_type: productType,\n//         timeInForce: orderType === \"LIMIT\" ? timeInForce : undefined,  // Only for LIMIT orders\n//       };\n      \n      \n\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n//       console.log(\"Order Response:\", response.data);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n\n//       if (response.data.status === \"offline\") {\n//         setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       } else if (response.data.status === \"success\") {\n//         setSuccessMessage(\"Order placed successfully.\");\n//       } else {\n//         setError(\"Failed to place order. Please try again.\");\n//       }\n//     } catch (err) {\n//       setError(`Error placing order: ${err.message}`);\n//       console.error(\"Order Error:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">Security ID:</label>\n//           <input\n//             type=\"text\"\n//             value={security_id}\n//             onChange={(e) => setsecurity_id(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Exchange Segment:</label>\n//           <select\n//             value={exchange_segment}\n//             onChange={(e) => setexchange_segment(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">NSE</option>\n//             <option value=\"SELL\">BSE</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Transaction Type:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"STOP_LOSS\">STOP-LOSS (SL)</option>\n//             <option value=\"STOP_LOSS_MARKET\">STOP-LOSS MARKET (SL-M)</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Product Type:</label>\n//           <select\n//             value={productType}\n//             onChange={(e) => setProductType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"INTRA\">INTRA</option>\n//             <option value=\"CNC\">CNC</option>\n//           </select>\n//         </div>\n//         {orderType !== \"MARKET\" && (\n//           <div>\n//             <label className=\"block mb-1\">Price:</label>\n//             <input\n//               type=\"number\"\n//               value={price}\n//               onChange={(e) => setPrice(parseFloat(e.target.value) || 0)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         {[\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (\n//           <div>\n//             <label className=\"block mb-1\">Trigger Price:</label>\n//             <input\n//               type=\"number\"\n//               value={triggerPrice}\n//               onChange={(e) => setTriggerPrice(parseFloat(e.target.value) || 0)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 1)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {/* Order Table */}\n//       {orders.length > 0 && (\n//         <div className=\"mt-6\">\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Security id</th>\n//                   <th className=\"border border-gray-600 p-2\">Side</th>\n//                   <th className=\"border border-gray-600 p-2\">Order Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\n//                   <th className=\"border border-gray-600 p-2\">Product Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                     <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.security_id}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.side}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.order_type}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.product_type}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.status}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         </div>\n//       )}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [security_id, setSecurityId] = useState(\"12345\");\n//   const [exchange_segment, setExchangeSegment] = useState(\"NSE\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(1);\n//   const [price, setPrice] = useState(\"\");\n//   const [triggerPrice, setTriggerPrice] = useState(\"\");\n//   const [productType, setProductType] = useState(\"INTRA\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [successMessage, setSuccessMessage] = useState(null);\n//   const [orders, setOrders] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const handlePlaceOrder = async () => {\n//     setError(null);\n//     setSuccessMessage(null);\n\n//     // Input validation\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && (!price || price <= 0)) {\n//       setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n//       return;\n//     }\n//     if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (!triggerPrice || triggerPrice <= 0)) {\n//       setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     try {\n//       const orderData = {\n//         security_id,\n//         exchange_segment, // NSE or BSE\n//         transaction_type: side, // BUY or SELL\n//         quantity,\n//         order_type: orderType,\n//         price: [\"LIMIT\", \"STOP_LOSS\"].includes(orderType) ? price : undefined,\n//         trigger_price: [\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) ? triggerPrice : undefined,\n//         product_type: productType,\n//         timeInForce: orderType === \"LIMIT\" ? timeInForce : undefined,\n//       };\n\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n//         headers: { \"Content-Type\": \"application/json\" },\n//       });\n\n//       console.log(\"Order Response:\", response.data);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n\n//       if (response.data.status === \"offline\") {\n//         setSuccessMessage(\"Market is closed. Order has been saved for later execution.\");\n//       } else if (response.data.status === \"success\") {\n//         setSuccessMessage(\"Order placed successfully.\");\n//       } else {\n//         setError(\"Failed to place order. Please try again.\");\n//       }\n//     } catch (err) {\n//       setError(`Error placing order: ${err.message}`);\n//       console.error(\"Order Error:\", err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">Security ID:</label>\n//           <input\n//             type=\"text\"\n//             value={security_id}\n//             onChange={(e) => setSecurityId(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Exchange Segment:</label>\n//           <select\n//             value={exchange_segment}\n//             onChange={(e) => setExchangeSegment(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"NSE\">NSE</option>\n//             <option value=\"BSE\">BSE</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Transaction Type:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"LIMIT\">LIMIT</option>\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"STOP_LOSS\">STOP-LOSS (SL)</option>\n//             <option value=\"STOP_LOSS_MARKET\">STOP-LOSS MARKET (SL-M)</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Product Type:</label>\n//           <select\n//             value={productType}\n//             onChange={(e) => setProductType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"INTRA\">INTRA</option>\n//             <option value=\"CNC\">CNC</option>\n//           </select>\n//         </div>\n//         {orderType !== \"MARKET\" && (\n//           <div>\n//             <label className=\"block mb-1\">Price:</label>\n//             <input\n//               type=\"number\"\n//               value={price}\n//               onChange={(e) => setPrice(parseFloat(e.target.value) || 0)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         {[\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (\n//           <div>\n//             <label className=\"block mb-1\">Trigger Price:</label>\n//             <input\n//               type=\"number\"\n//               value={triggerPrice}\n//               onChange={(e) => setTriggerPrice(parseFloat(e.target.value) || 0)}\n//               className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//             />\n//           </div>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 1)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n//       {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n//       {showPopup && <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">Order created successfully!</div>}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst PlaceOrder = () => {\n  const [security_id, setSecurityId] = useState(\"12345\");\n  const [exchange_segment, setExchangeSegment] = useState(\"NSE\");\n  const [side, setSide] = useState(\"BUY\");\n  const [orderType, setOrderType] = useState(\"LIMIT\");\n  const [quantity, setQuantity] = useState(1);\n  const [price, setPrice] = useState(\"\");\n  const [triggerPrice, setTriggerPrice] = useState(\"\");\n  const [productType, setProductType] = useState(\"INTRA\");\n  const [timeInForce, setTimeInForce] = useState(\"GTC\");\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [orders, setOrders] = useState([]);\n\n  // Fetch existing orders on component mount\n  useEffect(() => {\n    const fetchOrders = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/orders\");\n        setOrders(response.data);\n      } catch (error) {\n        console.error(\"Error fetching orders:\", error);\n      }\n    };\n    fetchOrders();\n  }, []);\n\n  const handlePlaceOrder = async () => {\n    setError(null);\n    setSuccessMessage(null);\n    \n    if (quantity <= 0) {\n      setError(\"Quantity must be greater than 0.\");\n      return;\n    }\n    if ([\"LIMIT\", \"STOP_LOSS\"].includes(orderType) && (!price || price <= 0)) {\n      setError(\"Price must be greater than 0 for LIMIT and STOP-LOSS orders.\");\n      return;\n    }\n    if ([\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) && (!triggerPrice || triggerPrice <= 0)) {\n      setError(\"Trigger price must be greater than 0 for STOP-LOSS orders.\");\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const orderData = {\n        security_id,\n        exchange_segment,\n        transaction_type: side,\n        quantity,\n        order_type: orderType,\n        price: [\"LIMIT\", \"STOP_LOSS\"].includes(orderType) ? price : undefined,\n        trigger_price: [\"STOP_LOSS\", \"STOP_LOSS_MARKET\"].includes(orderType) ? triggerPrice : undefined,\n        product_type: productType,\n        timeInForce: orderType === \"LIMIT\" ? timeInForce : undefined,\n      };\n\n      const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData, {\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n      console.log(\"Order Response:\", response.data);\n      setOrders((prevOrders) => [...prevOrders, response.data]);\n      setSuccessMessage(\"Order placed successfully.\");\n    } catch (err) {\n      setError(`Error placing order: ${err.message}`);\n      console.error(\"Order Error:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-4xl mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\n      <button onClick={handlePlaceOrder} disabled={loading} className=\"w-full p-2 mt-4 bg-green-500 text-black font-bold rounded hover:bg-green-600\">\n        {loading ? \"Placing Order...\" : \"Place Order\"}\n      </button>\n      {error && <p className=\"mt-4 p-2 bg-red-400 text-black rounded\">{error}</p>}\n      {successMessage && <p className=\"mt-4 p-2 bg-green-600 text-white rounded\">{successMessage}</p>}\n\n      {orders.length > 0 && (\n        <div className=\"mt-6\">\n          <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n          <table className=\"w-full border-collapse border border-gray-600\">\n            <thead>\n              <tr className=\"bg-gray-700 text-white\">\n                <th className=\"p-2 border border-gray-600\">Security ID</th>\n                <th className=\"p-2 border border-gray-600\">Exchange</th>\n                <th className=\"p-2 border border-gray-600\">Type</th>\n                <th className=\"p-2 border border-gray-600\">Qty</th>\n                <th className=\"p-2 border border-gray-600\">Price</th>\n                <th className=\"p-2 border border-gray-600\">Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order, index) => (\n                <tr key={index} className=\"bg-gray-800\">\n                  <td className=\"p-2 border border-gray-600\">{order.security_id}</td>\n                  <td className=\"p-2 border border-gray-600\">{order.exchange_segment}</td>\n                  <td className=\"p-2 border border-gray-600\">{order.transaction_type}</td>\n                  <td className=\"p-2 border border-gray-600\">{order.quantity}</td>\n                  <td className=\"p-2 border border-gray-600\">{order.price || \"-\"}</td>\n                  <td className=\"p-2 border border-gray-600\">{order.status || \"Pending\"}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlaceOrder;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
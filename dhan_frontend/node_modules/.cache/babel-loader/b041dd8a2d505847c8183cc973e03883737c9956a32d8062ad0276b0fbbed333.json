{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js\",\n  _s = $RefreshSig$();\n// ####################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! Status: ${response.status}`);\n//             }\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (data.status === \"success\" && data.live_prices) {\n//             setLivePrices(prevLivePrices => ({\n//                 ...prevLivePrices,\n//                 ...data.live_prices,\n//             }));\n//         } else {\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// ##########################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Function to fetch initial PnL data\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     // WebSocket update handler\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data); // Log the received data\n\n//         if (data?.status === \"success\" && data?.live_prices) {\n//             setLivePrices(prevLivePrices => {\n//                 const updatedPrices = { ...prevLivePrices, ...data.live_prices };\n//                 console.log(\"✅ Updated Prices:\", updatedPrices); // Log updated prices\n\n//                 // Update PnL Data with new prices\n//                 setPnlData(prevPnlData => {\n//                     return prevPnlData.map(order => {\n//                         const newPrice = updatedPrices[order.security_id] || order.price;\n//                         console.log(`🔹 Updating ${order.security_id}: ${order.price} -> ${newPrice}`);\n//                         return { ...order, latest_price: newPrice };\n//                     });\n//                 });\n\n//                 return updatedPrices;\n//             });\n//         } else {\n//             console.error(\"❌ Invalid WebSocket data received:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     // WebSocket connection setup\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"❌ WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, [handlePnLUpdate]);\n\n//     // Calculate total PnL\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000\", {\n  transports: [\"websocket\"],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 2000\n});\nconst PnlReport = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [livePrices, setLivePrices] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch Initial PnL Data\n  const fetchInitialData = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      console.log(\"✅ Initial API Data:\", data);\n      if (data.status === \"success\") {\n        setPnlData(data.orders || []);\n        setLivePrices(data.live_prices || {});\n      } else {\n        throw new Error(\"Invalid API response structure.\");\n      }\n    } catch (err) {\n      console.error(\"Error fetching initial data:\", err);\n      setError(\"Failed to fetch initial data.\");\n    }\n    setLoading(false);\n  };\n\n  // WebSocket Update Handler\n  const handlePnLUpdate = useCallback(data => {\n    console.log(\"🔄 WebSocket Received Update:\", data);\n    if (!data || data.status !== \"success\" || !data.live_prices) {\n      console.error(\"❌ Invalid WebSocket data received:\", data);\n      setError(\"Invalid WebSocket data.\");\n      return;\n    }\n\n    // Update Live Prices\n    setLivePrices(prev => {\n      const updatedPrices = {\n        ...prev,\n        ...data.live_prices\n      };\n      console.log(\"✅ Updated Live Prices:\", updatedPrices);\n      return updatedPrices;\n    });\n\n    // Update PnL Data with New Prices\n    setPnlData(prevPnlData => prevPnlData.map(order => ({\n      ...order,\n      latest_price: data.live_prices[order.security_id] || order.price\n    })));\n  }, []);\n\n  // WebSocket Connection Setup\n  useEffect(() => {\n    fetchInitialData();\n    console.log(\"✅ Setting up WebSocket listeners...\");\n    socket.on(\"pnl_update\", handlePnLUpdate);\n    socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected!\"));\n    socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n    socket.on(\"connect_error\", err => console.error(\"❌ WebSocket connection error:\", err));\n    return () => {\n      console.log(\"🛑 Cleaning up WebSocket listeners...\");\n      socket.off(\"pnl_update\", handlePnLUpdate);\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"connect_error\");\n    };\n  }, [handlePnLUpdate]);\n\n  // Calculate Total PnL\n  const totalPnL = pnlData.reduce((sum, order) => {\n    const currentPrice = livePrices[order.security_id] || order.price;\n    return sum + (currentPrice - order.price) * order.quantity;\n  }, 0).toFixed(2);\n  const totalPnLPercentage = pnlData.reduce((sum, order) => {\n    const currentPrice = livePrices[order.security_id] || order.price;\n    return sum + (currentPrice - order.price) / order.price * 100;\n  }, 0).toFixed(2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83D\\uDCCA Live PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-300\",\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-semibold\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full text-sm text-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-blue-600 text-white uppercase text-xs\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Order ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Security ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Entry Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Latest Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Profit/Loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"divide-y divide-gray-700\",\n            children: pnlData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"9\",\n                className: \"p-4 text-center text-gray-500\",\n                children: \"No orders available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 37\n            }, this) : pnlData.map(order => {\n              const currentPrice = livePrices[order.security_id] || order.price;\n              const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n              const pnlPercentage = ((currentPrice - order.price) / order.price * 100).toFixed(2);\n              const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"hover:bg-gray-700\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.order_id || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.security_id || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 459,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.transaction_type || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.quantity || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 461,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2\",\n                  children: order.price || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 462,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-4 py-2 text-yellow-400 font-semibold\",\n                  children: currentPrice\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: pnl\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: [pnlPercentage, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 465,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                  children: profitLoss\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 49\n                }, this)]\n              }, order.order_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 45\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n            className: \"bg-gray-700 text-white font-bold\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"6\",\n                className: \"px-6 py-2 text-left\",\n                children: \"Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: totalPnL\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: [totalPnLPercentage, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: \"\\u2014\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 9\n  }, this);\n};\n_s(PnlReport, \"MjKVYx6+pkbEh6wu3K+Jx77gHPs=\");\n_c = PnlReport;\nexport default PnlReport;\nvar _c;\n$RefreshReg$(_c, \"PnlReport\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","io","jsxDEV","_jsxDEV","socket","transports","reconnectionAttempts","reconnectionDelay","PnlReport","_s","pnlData","setPnlData","livePrices","setLivePrices","loading","setLoading","error","setError","fetchInitialData","response","fetch","ok","Error","status","data","json","console","log","orders","live_prices","err","handlePnLUpdate","prev","updatedPrices","prevPnlData","map","order","latest_price","security_id","price","on","off","totalPnL","reduce","sum","currentPrice","quantity","toFixed","totalPnLPercentage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","colSpan","pnl","pnlPercentage","profitLoss","order_id","transaction_type","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js"],"sourcesContent":["\n// ####################################################################################################################################\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) {\n//                 throw new Error(`HTTP error! Status: ${response.status}`);\n//             }\n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data);\n\n//         if (data.status === \"success\" && data.live_prices) {\n//             setLivePrices(prevLivePrices => ({\n//                 ...prevLivePrices,\n//                 ...data.live_prices,\n//             }));\n//         } else {\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//         };\n//     }, [handlePnLUpdate]);\n\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n// ##########################################################################################################################################\n\n\n\n\n// import React, { useEffect, useState, useCallback } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\", {\n//     transports: [\"websocket\"], \n//     reconnectionAttempts: 5,   \n//     reconnectionDelay: 2000,    \n// });\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [livePrices, setLivePrices] = useState({});  \n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Function to fetch initial PnL data\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            \n//             const data = await response.json();\n//             console.log(\"✅ Initial API Data:\", data);\n\n//             if (data.status === \"success\") {\n//                 setPnlData(data.orders || []);\n//                 setLivePrices(data.live_prices || {});\n//             } else {\n//                 throw new Error(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             console.error(\"Error fetching initial data:\", err);\n//             setError(\"Failed to fetch initial data.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     // WebSocket update handler\n//     const handlePnLUpdate = useCallback((data) => {\n//         console.log(\"🔄 WebSocket Received Update:\", data); // Log the received data\n    \n//         if (data?.status === \"success\" && data?.live_prices) {\n//             setLivePrices(prevLivePrices => {\n//                 const updatedPrices = { ...prevLivePrices, ...data.live_prices };\n//                 console.log(\"✅ Updated Prices:\", updatedPrices); // Log updated prices\n    \n//                 // Update PnL Data with new prices\n//                 setPnlData(prevPnlData => {\n//                     return prevPnlData.map(order => {\n//                         const newPrice = updatedPrices[order.security_id] || order.price;\n//                         console.log(`🔹 Updating ${order.security_id}: ${order.price} -> ${newPrice}`);\n//                         return { ...order, latest_price: newPrice };\n//                     });\n//                 });\n    \n//                 return updatedPrices;\n//             });\n//         } else {\n//             console.error(\"❌ Invalid WebSocket data received:\", data);\n//             setError(\"Invalid WebSocket data.\");\n//         }\n//     }, []);\n    \n    \n\n//     // WebSocket connection setup\n//     useEffect(() => {\n//         fetchInitialData();\n    \n//         socket.on(\"pnl_update\", handlePnLUpdate);\n//         socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected!\"));\n//         socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"❌ WebSocket connection error:\", err.message || err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n    \n//         return () => {\n//             socket.off(\"pnl_update\", handlePnLUpdate);\n//             socket.off(\"connect\");\n//             socket.off(\"disconnect\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, [handlePnLUpdate]);\n    \n\n//     // Calculate total PnL\n//     const totalPnL = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (currentPrice - order.price) * order.quantity;\n//     }, 0).toFixed(2);\n\n//     const totalPnLPercentage = pnlData.reduce((sum, order) => {\n//         const currentPrice = livePrices[order.security_id] || order.price;\n//         return sum + (((currentPrice - order.price) / order.price) * 100);\n//     }, 0).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Profit/Loss</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => {\n//                                         const currentPrice = livePrices[order.security_id] || order.price;\n//                                         const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n//                                         const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n//                                         const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n//                                         return (\n//                                             <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                                 <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n//                                                 <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n//                                                 <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n//                                             </tr>\n//                                         );\n//                                     })\n//                                 )}\n//                             </tbody>\n//                             <tfoot className=\"bg-gray-700 text-white font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total   :-</td>\n//                                     <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n//                                     <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n//                                     <td className=\"px-4 py-2\">—</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst socket = io(\"http://127.0.0.1:5000\", {\n    transports: [\"websocket\"], \n    reconnectionAttempts: 5,   \n    reconnectionDelay: 2000,    \n});\n\nconst PnlReport = () => {\n    const [pnlData, setPnlData] = useState([]);\n    const [livePrices, setLivePrices] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Fetch Initial PnL Data\n    const fetchInitialData = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            \n            const data = await response.json();\n            console.log(\"✅ Initial API Data:\", data);\n\n            if (data.status === \"success\") {\n                setPnlData(data.orders || []);\n                setLivePrices(data.live_prices || {});\n            } else {\n                throw new Error(\"Invalid API response structure.\");\n            }\n        } catch (err) {\n            console.error(\"Error fetching initial data:\", err);\n            setError(\"Failed to fetch initial data.\");\n        }\n        setLoading(false);\n    };\n\n    // WebSocket Update Handler\n    const handlePnLUpdate = useCallback((data) => {\n        console.log(\"🔄 WebSocket Received Update:\", data);\n\n        if (!data || data.status !== \"success\" || !data.live_prices) {\n            console.error(\"❌ Invalid WebSocket data received:\", data);\n            setError(\"Invalid WebSocket data.\");\n            return;\n        }\n\n        // Update Live Prices\n        setLivePrices(prev => {\n            const updatedPrices = { ...prev, ...data.live_prices };\n            console.log(\"✅ Updated Live Prices:\", updatedPrices);\n            return updatedPrices;\n        });\n\n        // Update PnL Data with New Prices\n        setPnlData(prevPnlData =>\n            prevPnlData.map(order => ({\n                ...order,\n                latest_price: data.live_prices[order.security_id] || order.price\n            }))\n        );\n    }, []);\n\n    // WebSocket Connection Setup\n    useEffect(() => {\n        fetchInitialData();\n    \n        console.log(\"✅ Setting up WebSocket listeners...\");\n        socket.on(\"pnl_update\", handlePnLUpdate);\n        socket.on(\"connect\", () => console.log(\"✅ WebSocket Connected!\"));\n        socket.on(\"disconnect\", () => console.log(\"❌ WebSocket Disconnected!\"));\n        socket.on(\"connect_error\", (err) => console.error(\"❌ WebSocket connection error:\", err));\n\n        return () => {\n            console.log(\"🛑 Cleaning up WebSocket listeners...\");\n            socket.off(\"pnl_update\", handlePnLUpdate);\n            socket.off(\"connect\");\n            socket.off(\"disconnect\");\n            socket.off(\"connect_error\");\n        };\n    }, [handlePnLUpdate]);\n\n    // Calculate Total PnL\n    const totalPnL = pnlData.reduce((sum, order) => {\n        const currentPrice = livePrices[order.security_id] || order.price;\n        return sum + (currentPrice - order.price) * order.quantity;\n    }, 0).toFixed(2);\n\n    const totalPnLPercentage = pnlData.reduce((sum, order) => {\n        const currentPrice = livePrices[order.security_id] || order.price;\n        return sum + (((currentPrice - order.price) / order.price) * 100);\n    }, 0).toFixed(2);\n\n    return (\n        <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n            <h2 className=\"text-2xl font-bold mb-4\">📊 Live PnL Report</h2>\n            {loading ? (\n                <p className=\"text-gray-300\">Fetching data...</p>\n            ) : error ? (\n                <p className=\"text-red-500 font-semibold\">{error}</p>\n            ) : (\n                <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n                    <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm text-gray-300\">\n                            <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n                                <tr>\n                                    <th className=\"px-4 py-2\">Order ID</th>\n                                    <th className=\"px-4 py-2\">Security ID</th>\n                                    <th className=\"px-4 py-2\">Type</th>\n                                    <th className=\"px-4 py-2\">Quantity</th>\n                                    <th className=\"px-4 py-2\">Entry Price</th>\n                                    <th className=\"px-4 py-2\">Latest Price</th>\n                                    <th className=\"px-4 py-2\">PnL</th>\n                                    <th className=\"px-4 py-2\">PnL %</th>\n                                    <th className=\"px-4 py-2\">Profit/Loss</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-gray-700\">\n                                {pnlData.length === 0 ? (\n                                    <tr>\n                                        <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n                                            No orders available.\n                                        </td>\n                                    </tr>\n                                ) : (\n                                    pnlData.map((order) => {\n                                        const currentPrice = livePrices[order.security_id] || order.price;\n                                        const pnl = ((currentPrice - order.price) * order.quantity).toFixed(2);\n                                        const pnlPercentage = (((currentPrice - order.price) / order.price) * 100).toFixed(2);\n                                        const profitLoss = pnl >= 0 ? \"Profit\" : \"Loss\";\n                                        return (\n                                            <tr key={order.order_id} className=\"hover:bg-gray-700\">\n                                                <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n                                                <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n                                                <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n                                                <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n                                                <td className=\"px-4 py-2\">{order.price || \"N/A\"}</td>\n                                                <td className=\"px-4 py-2 text-yellow-400 font-semibold\">{currentPrice}</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnl}</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{pnlPercentage}%</td>\n                                                <td className={`px-4 py-2 ${pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{profitLoss}</td>\n                                            </tr>\n                                        );\n                                    })\n                                )}\n                            </tbody>\n                            <tfoot className=\"bg-gray-700 text-white font-bold\">\n                                <tr>\n                                    <td colSpan=\"6\" className=\"px-6 py-2 text-left\">Total:</td>\n                                    <td className={`px-4 py-2 ${totalPnL >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnL}</td>\n                                    <td className={`px-4 py-2 ${totalPnLPercentage >= 0 ? \"text-green-500\" : \"text-red-500\"}`}>{totalPnLPercentage}%</td>\n                                    <td className=\"px-4 py-2\">—</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PnlReport;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
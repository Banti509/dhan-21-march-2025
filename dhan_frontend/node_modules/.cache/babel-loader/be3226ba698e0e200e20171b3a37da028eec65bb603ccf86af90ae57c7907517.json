{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Initial data from API\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData(); // Fetch initial orders from Flask\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report); // Update live data\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">ðŸ“Š Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"8\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate total profit, total loss, and net PnL\n//     const totalProfit = pnlData\n//         .filter(order => order.pnl > 0)\n//         .reduce((sum, order) => sum + (order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const totalLoss = pnlData\n//         .filter(order => order.pnl < 0)\n//         .reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const netPnl = (totalProfit - totalLoss).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">ðŸ“Š Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th> {/* New Column */}\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Total Profit & Loss */}\n//                             <tfoot className=\"bg-gray-900 text-white text-lg font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Profit:</td>\n//                                     <td className=\"px-4 py-3 text-green-500\">{totalProfit}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Loss:</td>\n//                                     <td className=\"px-4 py-3 text-red-500\">-{totalLoss}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Net PnL:</td>\n//                                     <td\n//                                         className={`px-4 py-3 font-bold ${\n//                                             netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                         }`}\n//                                     >\n//                                         {netPnl}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate totals for table columns\n//     // const totalQuantity = pnlData.reduce((sum, order) => sum + (order.quantity || 0), 0);\n//     const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n//     const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n//     const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n//     const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n//     const netPnl = totalProfit - totalLoss;\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">ðŸ“Š Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-300 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Totals */}\n//                             <tfoot className=\"bg-gray-200 text-black font-bold\">\n//                                 <tr className=\"border-t border-gray-200 bg-gray-200\">\n//                                     <td className=\"px-12 py- text-right\" colSpan=\"4\">Total:</td>\n//                                     {/* <td className=\"px-4 py-3\">{totalQuantity}</td> */}\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n//                                     <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>\n//                                         {netPnl.toFixed(2)}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">loss</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\nimport React, { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PnlReport = () => {\n  _s();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const socket = io(\"http://127.0.0.1:5000\", {\n      reconnectionAttempts: 5,\n      // Try reconnecting 5 times\n      reconnectionDelay: 2000 // Wait 2 seconds before retry\n    });\n\n    // Fetch initial PnL data\n    const fetchInitialData = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n        const data = await response.json();\n        if (data.status === \"success\" && Array.isArray(data.orders)) {\n          setPnlData(data.orders); // Set initial API data\n        } else {\n          setError(\"Invalid API response structure.\");\n        }\n      } catch (err) {\n        setError(\"API request failed.\");\n      }\n      setLoading(false);\n    };\n    fetchInitialData();\n\n    // Listen for real-time PnL updates from WebSocket\n    socket.on(\"pnl_update\", data => {\n      if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n        setPnlData(data.pnl_report);\n      } else {\n        setError(\"Invalid WebSocket data.\");\n      }\n    });\n\n    // Handle WebSocket errors\n    socket.on(\"connect_error\", err => {\n      console.error(\"Socket connection error:\", err);\n      setError(\"WebSocket connection failed.\");\n    });\n\n    // Cleanup WebSocket connection on unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  // Total PnL Calculations\n  const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n  const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n  const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n  const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n  const netPnl = totalProfit - totalLoss;\n  const pnlPercentage = totalEntryPrice > 0 ? (netPnl / totalEntryPrice * 100).toFixed(2) : \"0.00\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83D\\uDCCA Live PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-300\",\n      children: \"Fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-300 font-semibold\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full text-sm text-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-blue-600 text-white uppercase text-xs\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Order ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 528,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Security ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 529,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Entry Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Latest Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"PnL %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-4 py-2\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"divide-y divide-gray-700\",\n            children: pnlData.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"9\",\n                className: \"p-4 text-center text-gray-500\",\n                children: \"No orders available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 37\n            }, this) : pnlData.map(order => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"hover:bg-gray-700\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.order_id || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.security_id || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.transaction_type || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2\",\n                children: order.quantity || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 font-bold text-lg ${order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"}`,\n                children: order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 font-semibold\",\n                children: [order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\", \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-2 font-bold ${order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`,\n                children: order.pnl >= 0 ? \"Profit\" : \"Loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 45\n              }, this)]\n            }, order.order_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n            className: \"bg-gray-200 text-black font-bold\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"border-t border-gray-200 bg-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-12 py- text-right\",\n                colSpan: \"4\",\n                children: \"Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\",\n                children: totalEntryPrice.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 584,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\",\n                children: totalLatestPrice.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: `px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`,\n                children: netPnl.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 586,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\",\n                children: [pnlPercentage, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-3\",\n                children: netPnl >= 0 ? \"Profit\" : \"Loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 9\n  }, this);\n};\n_s(PnlReport, \"Itcd+4SLNDjb8y3nzbw1gmo0oS8=\");\n_c = PnlReport;\nexport default PnlReport;\nvar _c;\n$RefreshReg$(_c, \"PnlReport\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","PnlReport","_s","pnlData","setPnlData","loading","setLoading","error","setError","socket","reconnectionAttempts","reconnectionDelay","fetchInitialData","response","fetch","data","json","status","Array","isArray","orders","err","on","pnl_report","console","disconnect","totalEntryPrice","reduce","sum","order","entry_price","totalLatestPrice","current_price","totalProfit","filter","pnl","totalLoss","Math","abs","netPnl","pnlPercentage","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","colSpan","map","order_id","security_id","transaction_type","quantity","undefined","pnl_percentage","_c","$RefreshReg$"],"sources":["/home/hp/Documents/Dhan_Trading_Bot/dhan_frontend/src/components/PnlReport.js"],"sourcesContent":["\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Initial data from API\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData(); // Fetch initial orders from Flask\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report); // Update live data\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">ðŸ“Š Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-5xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"8\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate total profit, total loss, and net PnL\n//     const totalProfit = pnlData\n//         .filter(order => order.pnl > 0)\n//         .reduce((sum, order) => sum + (order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const totalLoss = pnlData\n//         .filter(order => order.pnl < 0)\n//         .reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0)\n//         .toFixed(2);\n\n//     const netPnl = (totalProfit - totalLoss).toFixed(2);\n\n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">ðŸ“Š Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-500 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th> {/* New Column */}\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Total Profit & Loss */}\n//                             <tfoot className=\"bg-gray-900 text-white text-lg font-bold\">\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Profit:</td>\n//                                     <td className=\"px-4 py-3 text-green-500\">{totalProfit}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Total Loss:</td>\n//                                     <td className=\"px-4 py-3 text-red-500\">-{totalLoss}</td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                                 <tr>\n//                                     <td colSpan=\"6\" className=\"px-4 py-3 text-right\">Net PnL:</td>\n//                                     <td\n//                                         className={`px-4 py-3 font-bold ${\n//                                             netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                         }`}\n//                                     >\n//                                         {netPnl}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                     <td className=\"px-4 py-3\"></td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { io } from \"socket.io-client\";\n\n// const socket = io(\"http://127.0.0.1:5000\"); // Connect WebSocket to Flask backend\n\n// const PnlReport = () => {\n//     const [pnlData, setPnlData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch initial data from Flask API\n//     const fetchInitialData = async () => {\n//         try {\n//             const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n//             const data = await response.json();\n//             if (data.status === \"success\" && Array.isArray(data.orders)) {\n//                 setPnlData(data.orders); // Set API data\n//             } else {\n//                 setError(\"Invalid API response structure.\");\n//             }\n//         } catch (err) {\n//             setError(\"API request failed.\");\n//         }\n//         setLoading(false);\n//     };\n\n//     useEffect(() => {\n//         fetchInitialData();\n\n//         // Listen for live PnL updates from WebSocket\n//         socket.on(\"pnl_update\", (data) => {\n//             if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n//                 setPnlData(data.pnl_report);\n//             } else {\n//                 setError(\"Invalid WebSocket data.\");\n//             }\n//         });\n\n//         socket.on(\"connect_error\", (err) => {\n//             console.error(\"Socket connection error:\", err);\n//             setError(\"WebSocket connection failed.\");\n//         });\n\n//         return () => {\n//             socket.off(\"pnl_update\");\n//             socket.off(\"connect_error\");\n//         };\n//     }, []);\n\n//     // Calculate totals for table columns\n//     // const totalQuantity = pnlData.reduce((sum, order) => sum + (order.quantity || 0), 0);\n//     const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n//     const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n//     const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n//     const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n//     const netPnl = totalProfit - totalLoss;\n    \n//     return (\n//         <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n//             <h2 className=\"text-2xl font-bold mb-4\">ðŸ“Š Live PnL Report</h2>\n//             {loading ? (\n//                 <p className=\"text-gray-300\">Fetching data...</p>\n//             ) : error ? (\n//                 <p className=\"text-red-300 font-semibold\">{error}</p>\n//             ) : (\n//                 <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n//                     <div className=\"overflow-x-auto\">\n//                         <table className=\"w-full text-sm text-gray-300\">\n//                             <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n//                                 <tr>\n//                                     <th className=\"px-4 py-2\">Order ID</th>\n//                                     <th className=\"px-4 py-2\">Security ID</th>\n//                                     <th className=\"px-4 py-2\">Type</th>\n//                                     <th className=\"px-4 py-2\">Quantity</th>\n//                                     <th className=\"px-4 py-2\">Entry Price</th>\n//                                     <th className=\"px-4 py-2\">Latest Price</th>\n//                                     <th className=\"px-4 py-2\">PnL</th>\n//                                     <th className=\"px-4 py-2\">PnL %</th>\n//                                     <th className=\"px-4 py-2\">Status</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody className=\"divide-y divide-gray-700\">\n//                                 {pnlData.length === 0 ? (\n//                                     <tr>\n//                                         <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n//                                             No orders available.\n//                                         </td>\n//                                     </tr>\n//                                 ) : (\n//                                     pnlData.map((order) => (\n//                                         <tr key={order.order_id} className=\"hover:bg-gray-700\">\n//                                             <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold text-lg ${\n//                                                     order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n//                                             </td>\n//                                             <td className=\"px-4 py-2 font-semibold\">\n//                                                 {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n//                                             </td>\n//                                             <td\n//                                                 className={`px-4 py-2 font-bold ${\n//                                                     order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n//                                                 }`}\n//                                             >\n//                                                 {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n//                                             </td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                             {/* Footer Row for Totals */}\n//                             <tfoot className=\"bg-gray-200 text-black font-bold\">\n//                                 <tr className=\"border-t border-gray-200 bg-gray-200\">\n//                                     <td className=\"px-12 py- text-right\" colSpan=\"4\">Total:</td>\n//                                     {/* <td className=\"px-4 py-3\">{totalQuantity}</td> */}\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n//                                     <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>\n//                                         {netPnl.toFixed(2)}\n//                                     </td>\n//                                     <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n//                                     <td className=\"px-4 py-3\">loss</td>\n//                                 </tr>\n//                             </tfoot>\n//                         </table>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default PnlReport;\n\n\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst PnlReport = () => {\n    const [pnlData, setPnlData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const socket = io(\"http://127.0.0.1:5000\", {\n            reconnectionAttempts: 5, // Try reconnecting 5 times\n            reconnectionDelay: 2000, // Wait 2 seconds before retry\n        });\n\n        // Fetch initial PnL data\n        const fetchInitialData = async () => {\n            try {\n                const response = await fetch(\"http://127.0.0.1:5000/api/pnl-report\");\n                const data = await response.json();\n                if (data.status === \"success\" && Array.isArray(data.orders)) {\n                    setPnlData(data.orders); // Set initial API data\n                } else {\n                    setError(\"Invalid API response structure.\");\n                }\n            } catch (err) {\n                setError(\"API request failed.\");\n            }\n            setLoading(false);\n        };\n\n        fetchInitialData();\n\n        // Listen for real-time PnL updates from WebSocket\n        socket.on(\"pnl_update\", (data) => {\n            if (data.status === \"success\" && Array.isArray(data.pnl_report)) {\n                setPnlData(data.pnl_report);\n            } else {\n                setError(\"Invalid WebSocket data.\");\n            }\n        });\n\n        // Handle WebSocket errors\n        socket.on(\"connect_error\", (err) => {\n            console.error(\"Socket connection error:\", err);\n            setError(\"WebSocket connection failed.\");\n        });\n\n        // Cleanup WebSocket connection on unmount\n        return () => {\n            socket.disconnect();\n        };\n    }, []);\n\n    // Total PnL Calculations\n    const totalEntryPrice = pnlData.reduce((sum, order) => sum + (order.entry_price || 0), 0);\n    const totalLatestPrice = pnlData.reduce((sum, order) => sum + (order.current_price || 0), 0);\n    const totalProfit = pnlData.filter(order => order.pnl > 0).reduce((sum, order) => sum + (order.pnl || 0), 0);\n    const totalLoss = pnlData.filter(order => order.pnl < 0).reduce((sum, order) => sum + Math.abs(order.pnl || 0), 0);\n    const netPnl = totalProfit - totalLoss;\n    const pnlPercentage = totalEntryPrice > 0 ? ((netPnl / totalEntryPrice) * 100).toFixed(2) : \"0.00\";\n\n    return (\n        <div className=\"p-6 bg-gray-900 min-h-screen flex flex-col items-center text-white\">\n            <h2 className=\"text-2xl font-bold mb-4\">ðŸ“Š Live PnL Report</h2>\n            {loading ? (\n                <p className=\"text-gray-300\">Fetching data...</p>\n            ) : error ? (\n                <p className=\"text-red-300 font-semibold\">{error}</p>\n            ) : (\n                <div className=\"w-full max-w-6xl bg-gray-800 shadow-md rounded-lg overflow-hidden\">\n                    <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm text-gray-300\">\n                            <thead className=\"bg-blue-600 text-white uppercase text-xs\">\n                                <tr>\n                                    <th className=\"px-4 py-2\">Order ID</th>\n                                    <th className=\"px-4 py-2\">Security ID</th>\n                                    <th className=\"px-4 py-2\">Type</th>\n                                    <th className=\"px-4 py-2\">Quantity</th>\n                                    <th className=\"px-4 py-2\">Entry Price</th>\n                                    <th className=\"px-4 py-2\">Latest Price</th>\n                                    <th className=\"px-4 py-2\">PnL</th>\n                                    <th className=\"px-4 py-2\">PnL %</th>\n                                    <th className=\"px-4 py-2\">Status</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-gray-700\">\n                                {pnlData.length === 0 ? (\n                                    <tr>\n                                        <td colSpan=\"9\" className=\"p-4 text-center text-gray-500\">\n                                            No orders available.\n                                        </td>\n                                    </tr>\n                                ) : (\n                                    pnlData.map((order) => (\n                                        <tr key={order.order_id} className=\"hover:bg-gray-700\">\n                                            <td className=\"px-4 py-2\">{order.order_id || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.security_id || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.transaction_type || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2\">{order.quantity || \"N/A\"}</td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.entry_price !== undefined ? order.entry_price.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.current_price !== undefined ? order.current_price.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td\n                                                className={`px-4 py-2 font-bold text-lg ${\n                                                    order.pnl >= 0 ? \"text-green-500\" : \"text-red-500\"\n                                                }`}\n                                            >\n                                                {order.pnl !== undefined ? order.pnl.toFixed(2) : \"N/A\"}\n                                            </td>\n                                            <td className=\"px-4 py-2 font-semibold\">\n                                                {order.pnl_percentage !== undefined ? order.pnl_percentage.toFixed(2) : \"N/A\"}%\n                                            </td>\n                                            <td\n                                                className={`px-4 py-2 font-bold ${\n                                                    order.pnl >= 0 ? \"text-green-400\" : \"text-red-400\"\n                                                }`}\n                                            >\n                                                {order.pnl >= 0 ? \"Profit\" : \"Loss\"}\n                                            </td>\n                                        </tr>\n                                    ))\n                                )}\n                            </tbody>\n                            {/* Footer Row for Totals */}\n                            <tfoot className=\"bg-gray-200 text-black font-bold\">\n                                <tr className=\"border-t border-gray-200 bg-gray-200\">\n                                    <td className=\"px-12 py- text-right\" colSpan=\"4\">Total:</td>\n                                    <td className=\"px-4 py-3\">{totalEntryPrice.toFixed(2)}</td>\n                                    <td className=\"px-4 py-3\">{totalLatestPrice.toFixed(2)}</td>\n                                    <td className={`px-4 py-3 ${netPnl >= 0 ? \"text-green-400\" : \"text-red-400\"}`}>\n                                        {netPnl.toFixed(2)}\n                                    </td>\n                                    <td className=\"px-4 py-3\">{pnlPercentage}%</td>\n                                    <td className=\"px-4 py-3\">{netPnl >= 0 ? \"Profit\" : \"Loss\"}</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PnlReport;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
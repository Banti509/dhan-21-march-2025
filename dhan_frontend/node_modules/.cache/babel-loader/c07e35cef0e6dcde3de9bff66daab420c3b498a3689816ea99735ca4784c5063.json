{"ast":null,"code":"var _jsxFileName = \"D:\\\\stock-alphavantage\\\\src\\\\components\\\\PnlReport.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\n//       console.log(\"API Response:\", response.data); // Debugging API Response\n\n//       // ðŸ”¹ Check if the response is an object instead of an array\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data);\n//       } else if (typeof response.data === \"object\") {\n//         setPnlData([response.data]); // Wrap single object in an array\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => {\n//         setShowPopup(false);\n//       }, 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n//     // const interval = setInterval(fetchPnLReport, 20000); // Refresh every 20 sec\n\n//     // return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [socket, setSocket] = useState(null); // WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data);\n//       } else if (typeof response.data === \"object\") {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     const socketInstance = io(SOCKET_URL);\n//     setSocket(socketInstance);\n\n//     // Listen for real-time price updates\n//     socketInstance.on(\"price_update\", (data) => {\n//       console.log(\"WebSocket Price Update:\", data);\n\n//       // Update the price for matching orders\n//       setPnlData((prevData) =>\n//         prevData.map((order) =>\n//           order.symbol === Object.keys(data)[0] // Match the symbol\n//             ? { ...order, currentPrice: Object.values(data)[0] } // Update price\n//             : order\n//         )\n//       );\n//     });\n\n//     return () => {\n//       socketInstance.disconnect(); // Cleanup WebSocket connection\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"PnL %\", \n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">\n//                     {header}\n//                   </th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\n//                     {order.timestamp || \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\n//                     {order.orderId || \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.symbol || \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\n//                     {order.quantity || \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined\n//                       ? `${order.pnlPercentage.toFixed(2)}%`\n//                       : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.sellStatus || \"N/A\"}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState(() => []);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         // setPnlData(response.data);\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData\n//             .filter(order => order)\n//             .map((order) =>\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//             )\n//           );\n//         } else {\n//           console.warn(\"Received invalid WebSocket data:\", data);\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState(() => []);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         // setPnlData(response.data);\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData\n//             .filter(order => order)\n//             .map((order) =>\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//             )\n//           );\n//         } else {\n//           console.warn(\"Received invalid WebSocket data:\", data);\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                 <tr className=\"bg-gray-800 font-bold text-white\">\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null);\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData.map((order) => {\n//               if (order.symbol === symbol) {\n//                 const updatedCurrentPrice = newPrice;\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\n//                 const realizedPnL = order.realizedPnL || 0;\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\n\n//                 return {\n//                   ...order,\n//                   currentPrice: updatedCurrentPrice,\n//                   unrealizedPnL,\n//                   pnlPercentage,\n//                   profit,\n//                   loss,\n//                   realizedPnL,\n//                 };\n//               }\n//               return order;\n//             })\n//           );\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(4) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td> */}\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//   {(typeof order.pnlPercentage === \"number\" ? order.pnlPercentage : Number(order.pnlPercentage) || 0).toFixed(2)}%\n// </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n\n//             <tfoot>\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\nimport { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\nconst API_URL = \"http://localhost:5000/api/pnl_report\";\nconst SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\nconst SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\n\nconst PnLReport = () => {\n  _s();\n  const navigate = useNavigate();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showPopup, setShowPopup] = useState(false);\n  const [selling, setSelling] = useState(false); // Track sell button state\n  const socketRef = useRef(null);\n\n  // Fetch initial PnL report data\n  const fetchPnLReport = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(API_URL);\n      console.log(\"API Response:\", response.data);\n      if (Array.isArray(response.data)) {\n        setPnlData(response.data.filter(order => order));\n      } else if (typeof response.data === \"object\" && response.data !== null) {\n        setPnlData([response.data]);\n      } else {\n        setError(\"Invalid data format received from API.\");\n        setPnlData([]);\n      }\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 3000);\n    } catch (err) {\n      setError(\"Failed to fetch PnL report. Please try again.\");\n      setPnlData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPnLReport();\n\n    // Establish WebSocket connection\n    if (!socketRef.current) {\n      socketRef.current = io(SOCKET_URL);\n      socketRef.current.on(\"price_update\", data => {\n        console.log(\"WebSocket Price Update:\", data);\n        if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\n          const symbol = Object.keys(data)[0];\n          const newPrice = Object.values(data)[0];\n          setPnlData(prevData => prevData.map(order => {\n            if (order.symbol === symbol) {\n              const updatedCurrentPrice = newPrice;\n              const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\n              const pnlPercentage = (unrealizedPnL / (order.buyPrice * order.quantity) * 100).toFixed(2);\n              const realizedPnL = order.realizedPnL || 0;\n              const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\n              const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\n              return {\n                ...order,\n                currentPrice: updatedCurrentPrice,\n                unrealizedPnL,\n                pnlPercentage,\n                profit,\n                loss,\n                realizedPnL\n              };\n            }\n            return order;\n          }));\n        }\n      });\n      socketRef.current.on(\"connect_error\", err => {\n        console.error(\"WebSocket Connection Error:\", err);\n      });\n      socketRef.current.on(\"disconnect\", () => {\n        console.warn(\"WebSocket Disconnected\");\n      });\n    }\n    return () => {\n      var _socketRef$current;\n      (_socketRef$current = socketRef.current) === null || _socketRef$current === void 0 ? void 0 : _socketRef$current.disconnect();\n      socketRef.current = null;\n    };\n  }, []);\n\n  // Sell a single order\n  const handleSellOrder = async orderId => {\n    try {\n      setSelling(true);\n      await axios.post(SELL_API_URL, {\n        order_id: orderId\n      });\n      fetchPnLReport(); // Refresh PnL after selling\n    } catch (error) {\n      console.error(\"Error selling order:\", error);\n      setError(\"Failed to sell order.\");\n    } finally {\n      setSelling(false);\n    }\n  };\n\n  // Sell all orders\n  const handleSellAllOrders = async () => {\n    try {\n      setSelling(true);\n      await axios.post(SELL_ALL_API_URL);\n      fetchPnLReport(); // Refresh PnL after selling all\n    } catch (error) {\n      console.error(\"Error selling all orders:\", error);\n      setError(\"Failed to sell all orders.\");\n    } finally {\n      setSelling(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-center\",\n      children: \"Binance Active Orders PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1093,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchPnLReport,\n      disabled: loading,\n      className: \"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\",\n      children: loading ? /*#__PURE__*/_jsxDEV(FaSpinner, {\n        className: \"animate-spin mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 20\n      }, this) : \"Refresh PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1098,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      className: \"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\",\n      children: \"Back to Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1109,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 p-2 bg-red-600 text-white rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1117,\n      columnNumber: 17\n    }, this), pnlData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"min-w-full border border-gray-600 shadow-lg text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-700 text-yellow-400\",\n            children: [\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\"].map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-600 p-3 text-sm\",\n              children: header\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1126,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: pnlData.map((order, index) => {\n            var _order$buyPrice, _order$currentPrice, _order$quantity, _order$realizedPnL, _order$unrealizedPnL, _order$pnlPercentage, _order$profit, _order$loss;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"bg-gray-900 hover:bg-gray-700 transition\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs\",\n                children: order.timestamp || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1133,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs\",\n                children: order.orderId || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1134,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs font-bold\",\n                children: order.symbol || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1135,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs text-green-400\",\n                children: [\"$\", ((_order$buyPrice = order.buyPrice) === null || _order$buyPrice === void 0 ? void 0 : _order$buyPrice.toFixed(2)) || \"N/A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1136,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs text-blue-400\",\n                children: [\"$\", ((_order$currentPrice = order.currentPrice) === null || _order$currentPrice === void 0 ? void 0 : _order$currentPrice.toFixed(2)) || \"N/A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs\",\n                children: ((_order$quantity = order.quantity) === null || _order$quantity === void 0 ? void 0 : _order$quantity.toFixed(4)) || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1138,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs text-green-300\",\n                children: [\"$\", ((_order$realizedPnL = order.realizedPnL) === null || _order$realizedPnL === void 0 ? void 0 : _order$realizedPnL.toFixed(2)) || \"N/A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1139,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs text-red-300\",\n                children: [\"$\", ((_order$unrealizedPnL = order.unrealizedPnL) === null || _order$unrealizedPnL === void 0 ? void 0 : _order$unrealizedPnL.toFixed(2)) || \"N/A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1140,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs font-bold\",\n                children: [((_order$pnlPercentage = order.pnlPercentage) === null || _order$pnlPercentage === void 0 ? void 0 : _order$pnlPercentage.toFixed(2)) || \"N/A\", \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1141,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs text-green-500\",\n                children: [\"$\", ((_order$profit = order.profit) === null || _order$profit === void 0 ? void 0 : _order$profit.toFixed(2)) || \"N/A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1142,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs text-red-500\",\n                children: [\"$\", ((_order$loss = order.loss) === null || _order$loss === void 0 ? void 0 : _order$loss.toFixed(2)) || \"N/A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1143,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs font-bold\",\n                children: order.sellStatus || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1144,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSellOrder(order.orderId),\n                  className: \"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-700\",\n                  disabled: selling,\n                  children: \"Sell\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1147,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1146,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1132,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-700 font-bold text-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"6\",\n              className: \"border border-gray-600 p-2 text-center\",\n              children: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1160,\n              columnNumber: 18\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2 text-green-300\",\n              children: [\"$\", pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1161,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2 text-red-300\",\n              children: [\"$\", pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1164,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2 text-yellow-300\",\n              children: pnlData.length > 0 ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\" : \"N/A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1167,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2 text-green-500\",\n              children: [\"$\", pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1172,\n              columnNumber: 20\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2 text-red-500\",\n              children: [\"$\", pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1175,\n              columnNumber: 20\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-600 p-2\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSellAllOrders,\n                disabled: selling,\n                className: \"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\",\n                children: selling ? /*#__PURE__*/_jsxDEV(FaSpinner, {\n                  className: \"animate-spin mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1185,\n                  columnNumber: 32\n                }, this) : \"Sell All Orders\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1180,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1178,\n              columnNumber: 20\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1159,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1121,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-400\",\n      children: \"No active orders found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1193,\n      columnNumber: 9\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\",\n      children: \"Data fetched successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1197,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1092,\n    columnNumber: 5\n  }, this);\n};\n_s(PnLReport, \"cqrcJJJzKl5PuAjlThGny8WlzTM=\", false, function () {\n  return [useNavigate];\n});\n_c = PnLReport;\nexport default PnLReport;\nvar _c;\n$RefreshReg$(_c, \"PnLReport\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useNavigate","io","FaSpinner","jsxDEV","_jsxDEV","SOCKET_URL","API_URL","SELL_API_URL","SELL_ALL_API_URL","PnLReport","_s","navigate","pnlData","setPnlData","loading","setLoading","error","setError","showPopup","setShowPopup","selling","setSelling","socketRef","fetchPnLReport","response","get","console","log","data","Array","isArray","filter","order","setTimeout","err","current","on","Object","keys","length","symbol","newPrice","values","prevData","map","updatedCurrentPrice","unrealizedPnL","buyPrice","quantity","pnlPercentage","toFixed","realizedPnL","profit","loss","Math","abs","currentPrice","warn","_socketRef$current","disconnect","handleSellOrder","orderId","post","order_id","handleSellAllOrders","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","header","index","_order$buyPrice","_order$currentPrice","_order$quantity","_order$realizedPnL","_order$unrealizedPnL","_order$pnlPercentage","_order$profit","_order$loss","timestamp","sellStatus","colSpan","reduce","sum","parseFloat","_c","$RefreshReg$"],"sources":["D:/stock-alphavantage/src/components/PnlReport.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\r\n//       console.log(\"API Response:\", response.data); // Debugging API Response\r\n\r\n//       // ðŸ”¹ Check if the response is an object instead of an array\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data);\r\n//       } else if (typeof response.data === \"object\") {\r\n//         setPnlData([response.data]); // Wrap single object in an array\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => {\r\n//         setShowPopup(false);\r\n//       }, 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n//     // const interval = setInterval(fetchPnLReport, 20000); // Refresh every 20 sec\r\n\r\n//     // return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [socket, setSocket] = useState(null); // WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data);\r\n//       } else if (typeof response.data === \"object\") {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     const socketInstance = io(SOCKET_URL);\r\n//     setSocket(socketInstance);\r\n\r\n//     // Listen for real-time price updates\r\n//     socketInstance.on(\"price_update\", (data) => {\r\n//       console.log(\"WebSocket Price Update:\", data);\r\n\r\n//       // Update the price for matching orders\r\n//       setPnlData((prevData) =>\r\n//         prevData.map((order) =>\r\n//           order.symbol === Object.keys(data)[0] // Match the symbol\r\n//             ? { ...order, currentPrice: Object.values(data)[0] } // Update price\r\n//             : order\r\n//         )\r\n//       );\r\n//     });\r\n\r\n//     return () => {\r\n//       socketInstance.disconnect(); // Cleanup WebSocket connection\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"PnL %\", \r\n//                   \"Sell Status\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">\r\n//                     {header}\r\n//                   </th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\r\n//                     {order.timestamp || \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\r\n//                     {order.orderId || \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.symbol || \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\r\n//                     {order.quantity || \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined\r\n//                       ? `${order.pnlPercentage.toFixed(2)}%`\r\n//                       : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.sellStatus || \"N/A\"}\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState(() => []);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null); // Persistent WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         // setPnlData(response.data);\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection (only once)\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData\r\n//             .filter(order => order)\r\n//             .map((order) =>\r\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\r\n//             )\r\n//           );\r\n//         } else {\r\n//           console.warn(\"Received invalid WebSocket data:\", data);\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState(() => []);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null); // Persistent WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         // setPnlData(response.data);\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection (only once)\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData\r\n//             .filter(order => order)\r\n//             .map((order) =>\r\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\r\n//             )\r\n//           );\r\n//         } else {\r\n//           console.warn(\"Received invalid WebSocket data:\", data);\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             {/* Footer Row for Totals */}\r\n//               <tfoot>\r\n//                 <tr className=\"bg-gray-800 font-bold text-white\">\r\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\r\n//                 </tr>\r\n//               </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null);\r\n  \r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData.map((order) => {\r\n//               if (order.symbol === symbol) {\r\n//                 const updatedCurrentPrice = newPrice;\r\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\r\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\r\n//                 const realizedPnL = order.realizedPnL || 0;\r\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\r\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\r\n\r\n//                 return {\r\n//                   ...order,\r\n//                   currentPrice: updatedCurrentPrice,\r\n//                   unrealizedPnL,\r\n//                   pnlPercentage,\r\n//                   profit,\r\n//                   loss,\r\n//                   realizedPnL,\r\n//                 };\r\n//               }\r\n//               return order;\r\n//             })\r\n//           );\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(4) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td> */}\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//   {(typeof order.pnlPercentage === \"number\" ? order.pnlPercentage : Number(order.pnlPercentage) || 0).toFixed(2)}%\r\n// </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n\r\n//             <tfoot>\r\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\r\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\r\n//                 </tr>\r\n//               </tfoot>\r\n//           </table>\r\n\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { io } from \"socket.io-client\";\r\nimport { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\nconst SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\nconst API_URL = \"http://localhost:5000/api/pnl_report\";\r\nconst SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\r\nconst SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\r\n\r\nconst PnLReport = () => {\r\n  const navigate = useNavigate();\r\n  const [pnlData, setPnlData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [selling, setSelling] = useState(false); // Track sell button state\r\n  const socketRef = useRef(null);\r\n\r\n  // Fetch initial PnL report data\r\n  const fetchPnLReport = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(API_URL);\r\n      console.log(\"API Response:\", response.data);\r\n\r\n      if (Array.isArray(response.data)) {\r\n        setPnlData(response.data.filter(order => order));\r\n      } else if (typeof response.data === \"object\" && response.data !== null) {\r\n        setPnlData([response.data]);\r\n      } else {\r\n        setError(\"Invalid data format received from API.\");\r\n        setPnlData([]);\r\n      }\r\n\r\n      setShowPopup(true);\r\n      setTimeout(() => setShowPopup(false), 3000);\r\n    } catch (err) {\r\n      setError(\"Failed to fetch PnL report. Please try again.\");\r\n      setPnlData([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPnLReport();\r\n\r\n    // Establish WebSocket connection\r\n    if (!socketRef.current) {\r\n      socketRef.current = io(SOCKET_URL);\r\n\r\n      socketRef.current.on(\"price_update\", (data) => {\r\n        console.log(\"WebSocket Price Update:\", data);\r\n\r\n        if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\r\n          const symbol = Object.keys(data)[0];\r\n          const newPrice = Object.values(data)[0];\r\n\r\n          setPnlData((prevData) =>\r\n            prevData.map((order) => {\r\n              if (order.symbol === symbol) {\r\n                const updatedCurrentPrice = newPrice;\r\n                const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\r\n                const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\r\n                const realizedPnL = order.realizedPnL || 0;\r\n                const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\r\n                const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\r\n\r\n                return {\r\n                  ...order,\r\n                  currentPrice: updatedCurrentPrice,\r\n                  unrealizedPnL,\r\n                  pnlPercentage,\r\n                  profit,\r\n                  loss,\r\n                  realizedPnL,\r\n                };\r\n              }\r\n              return order;\r\n            })\r\n          );\r\n        }\r\n      });\r\n\r\n      socketRef.current.on(\"connect_error\", (err) => {\r\n        console.error(\"WebSocket Connection Error:\", err);\r\n      });\r\n\r\n      socketRef.current.on(\"disconnect\", () => {\r\n        console.warn(\"WebSocket Disconnected\");\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      socketRef.current?.disconnect();\r\n      socketRef.current = null;\r\n    };\r\n  }, []);\r\n\r\n  // Sell a single order\r\n  const handleSellOrder = async (orderId) => {\r\n    try {\r\n      setSelling(true);\r\n      await axios.post(SELL_API_URL, { order_id: orderId });\r\n      fetchPnLReport(); // Refresh PnL after selling\r\n    } catch (error) {\r\n      console.error(\"Error selling order:\", error);\r\n      setError(\"Failed to sell order.\");\r\n    } finally {\r\n      setSelling(false);\r\n    }\r\n  };\r\n\r\n  // Sell all orders\r\n  const handleSellAllOrders = async () => {\r\n    try {\r\n      setSelling(true);\r\n      await axios.post(SELL_ALL_API_URL);\r\n      fetchPnLReport(); // Refresh PnL after selling all\r\n    } catch (error) {\r\n      console.error(\"Error selling all orders:\", error);\r\n      setError(\"Failed to sell all orders.\");\r\n    } finally {\r\n      setSelling(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n        Binance Active Orders PnL Report\r\n      </h2>\r\n\r\n      {/* Refresh Button */}\r\n      <button\r\n        onClick={fetchPnLReport}\r\n        disabled={loading}\r\n        className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n      >\r\n        {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n      </button>\r\n\r\n      \r\n\r\n      {/* Back Button */}\r\n      <button\r\n        onClick={() => navigate(\"/\")}\r\n        className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n      >\r\n        Back to Dashboard\r\n      </button>\r\n\r\n      {/* Error Message */}\r\n      {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n      {/* Table with PnL Data */}\r\n      {pnlData.length > 0 ? (\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n            <thead>\r\n              <tr className=\"bg-gray-700 text-yellow-400\">\r\n              {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\"].map((header, index) => (\r\n                  <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {pnlData.map((order, index) => (\r\n                <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n                  <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(4) || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\r\n                  <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n\r\n                  <td className=\"border border-gray-600 p-2\">\r\n                    <button\r\n                      onClick={() => handleSellOrder(order.orderId)}\r\n                      className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-700\"\r\n                      disabled={selling}\r\n                    >\r\n                      Sell\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n            <tfoot>\r\n                <tr className=\"bg-gray-700 font-bold text-white\">\r\n                 <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n                  <td className=\"border border-gray-600 p-2 text-green-300\">\r\n                   ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n                  </td>\r\n                  <td className=\"border border-gray-600 p-2 text-red-300\">\r\n                    ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n                  </td>\r\n                  <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n                    {pnlData.length > 0\r\n                      ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n                      : \"N/A\"}\r\n                   </td>\r\n                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n                   </td>\r\n                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n                   </td>\r\n                   <td className=\"border border-gray-600 p-2\">\r\n                    {/* Sell All Orders Button */}\r\n                  <button\r\n                    onClick={handleSellAllOrders}\r\n                    disabled={selling}\r\n                    className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\"\r\n                  >\r\n                    {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\r\n                  </button>\r\n                  </td> \r\n                 </tr>\r\n                </tfoot>\r\n          </table>\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n      )}\r\n      {/* Success Popup */}\r\n     {showPopup && (\r\n        <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n          Data fetched successfully!\r\n        </div>\r\n      )}\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default PnLReport;\r\n"],"mappingsaacA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,EAAE,QAAQ,kBAAkB;AACrC,SAASC,SAAS,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,UAAU,GAAG,uBAAuB,CAAC,CAAC;AAC5C,MAAMC,OAAO,GAAG,sCAAsC;AACtD,MAAMC,YAAY,GAAG,sCAAsC,CAAC,CAAC;AAC7D,MAAMC,gBAAgB,GAAG,2CAA2C,CAAC,CAAC;;AAEtE,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM0B,SAAS,GAAGxB,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,MAAMyB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCR,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAACnB,OAAO,CAAC;MACzCoB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAACI,IAAI,CAAC;MAE3C,IAAIC,KAAK,CAACC,OAAO,CAACN,QAAQ,CAACI,IAAI,CAAC,EAAE;QAChCf,UAAU,CAACW,QAAQ,CAACI,IAAI,CAACG,MAAM,CAACC,KAAK,IAAIA,KAAK,CAAC,CAAC;MAClD,CAAC,MAAM,IAAI,OAAOR,QAAQ,CAACI,IAAI,KAAK,QAAQ,IAAIJ,QAAQ,CAACI,IAAI,KAAK,IAAI,EAAE;QACtEf,UAAU,CAAC,CAACW,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC7B,CAAC,MAAM;QACLX,QAAQ,CAAC,wCAAwC,CAAC;QAClDJ,UAAU,CAAC,EAAE,CAAC;MAChB;MAEAM,YAAY,CAAC,IAAI,CAAC;MAClBc,UAAU,CAAC,MAAMd,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAC7C,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZjB,QAAQ,CAAC,+CAA+C,CAAC;MACzDJ,UAAU,CAAC,EAAE,CAAC;IAChB,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd0B,cAAc,CAAC,CAAC;;IAEhB;IACA,IAAI,CAACD,SAAS,CAACa,OAAO,EAAE;MACtBb,SAAS,CAACa,OAAO,GAAGlC,EAAE,CAACI,UAAU,CAAC;MAElCiB,SAAS,CAACa,OAAO,CAACC,EAAE,CAAC,cAAc,EAAGR,IAAI,IAAK;QAC7CF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,IAAI,CAAC;QAE5C,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIS,MAAM,CAACC,IAAI,CAACV,IAAI,CAAC,CAACW,MAAM,GAAG,CAAC,EAAE;UACpE,MAAMC,MAAM,GAAGH,MAAM,CAACC,IAAI,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;UACnC,MAAMa,QAAQ,GAAGJ,MAAM,CAACK,MAAM,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;UAEvCf,UAAU,CAAE8B,QAAQ,IAClBA,QAAQ,CAACC,GAAG,CAAEZ,KAAK,IAAK;YACtB,IAAIA,KAAK,CAACQ,MAAM,KAAKA,MAAM,EAAE;cAC3B,MAAMK,mBAAmB,GAAGJ,QAAQ;cACpC,MAAMK,aAAa,GAAG,CAACD,mBAAmB,GAAGb,KAAK,CAACe,QAAQ,IAAIf,KAAK,CAACgB,QAAQ;cAC7E,MAAMC,aAAa,GAAG,CAAEH,aAAa,IAAId,KAAK,CAACe,QAAQ,GAAGf,KAAK,CAACgB,QAAQ,CAAC,GAAI,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC;cAC5F,MAAMC,WAAW,GAAGnB,KAAK,CAACmB,WAAW,IAAI,CAAC;cAC1C,MAAMC,MAAM,GAAGN,aAAa,GAAG,CAAC,GAAGA,aAAa,GAAG,CAAC;cACpD,MAAMO,IAAI,GAAGP,aAAa,GAAG,CAAC,GAAGQ,IAAI,CAACC,GAAG,CAACT,aAAa,CAAC,GAAG,CAAC;cAE5D,OAAO;gBACL,GAAGd,KAAK;gBACRwB,YAAY,EAAEX,mBAAmB;gBACjCC,aAAa;gBACbG,aAAa;gBACbG,MAAM;gBACNC,IAAI;gBACJF;cACF,CAAC;YACH;YACA,OAAOnB,KAAK;UACd,CAAC,CACH,CAAC;QACH;MACF,CAAC,CAAC;MAEFV,SAAS,CAACa,OAAO,CAACC,EAAE,CAAC,eAAe,EAAGF,GAAG,IAAK;QAC7CR,OAAO,CAACV,KAAK,CAAC,6BAA6B,EAAEkB,GAAG,CAAC;MACnD,CAAC,CAAC;MAEFZ,SAAS,CAACa,OAAO,CAACC,EAAE,CAAC,YAAY,EAAE,MAAM;QACvCV,OAAO,CAAC+B,IAAI,CAAC,wBAAwB,CAAC;MACxC,CAAC,CAAC;IACJ;IAEA,OAAO,MAAM;MAAA,IAAAC,kBAAA;MACX,CAAAA,kBAAA,GAAApC,SAAS,CAACa,OAAO,cAAAuB,kBAAA,uBAAjBA,kBAAA,CAAmBC,UAAU,CAAC,CAAC;MAC/BrC,SAAS,CAACa,OAAO,GAAG,IAAI;IAC1B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMyB,eAAe,GAAG,MAAOC,OAAO,IAAK;IACzC,IAAI;MACFxC,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMtB,KAAK,CAAC+D,IAAI,CAACvD,YAAY,EAAE;QAAEwD,QAAQ,EAAEF;MAAQ,CAAC,CAAC;MACrDtC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC,SAAS;MACRI,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM2C,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF3C,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMtB,KAAK,CAAC+D,IAAI,CAACtD,gBAAgB,CAAC;MAClCe,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,4BAA4B,CAAC;IACxC,CAAC,SAAS;MACRI,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEjB,OAAA;IAAK6D,SAAS,EAAC,mEAAmE;IAAAC,QAAA,gBAChF9D,OAAA;MAAI6D,SAAS,EAAC,qCAAqC;MAAAC,QAAA,EAAC;IAEpD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGLlE,OAAA;MACEmE,OAAO,EAAEhD,cAAe;MACxBiD,QAAQ,EAAE1D,OAAQ;MAClBmD,SAAS,EAAC,iHAAiH;MAAAC,QAAA,EAE1HpD,OAAO,gBAAGV,OAAA,CAACF,SAAS;QAAC+D,SAAS,EAAC;MAAmB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,GAAG;IAAoB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvE,CAAC,eAKTlE,OAAA;MACEmE,OAAO,EAAEA,CAAA,KAAM5D,QAAQ,CAAC,GAAG,CAAE;MAC7BsD,SAAS,EAAC,kEAAkE;MAAAC,QAAA,EAC7E;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGRtD,KAAK,iBAAIZ,OAAA;MAAG6D,SAAS,EAAC,wCAAwC;MAAAC,QAAA,EAAElD;IAAK;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAG1E1D,OAAO,CAAC2B,MAAM,GAAG,CAAC,gBACjBnC,OAAA;MAAK6D,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9B9D,OAAA;QAAO6D,SAAS,EAAC,yDAAyD;QAAAC,QAAA,gBACxE9D,OAAA;UAAA8D,QAAA,eACE9D,OAAA;YAAI6D,SAAS,EAAC,6BAA6B;YAAAC,QAAA,EAC1C,CAAC,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,eAAe,EAAE,mBAAmB,EAAE,UAAU,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,aAAa,CAAC,CAACtB,GAAG,CAAC,CAAC6B,MAAM,EAAEC,KAAK,kBACjMtE,OAAA;cAAgB6D,SAAS,EAAC,oCAAoC;cAAAC,QAAA,EAAEO;YAAM,GAA7DC,KAAK;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA6D,CAC5E;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRlE,OAAA;UAAA8D,QAAA,EACGtD,OAAO,CAACgC,GAAG,CAAC,CAACZ,KAAK,EAAE0C,KAAK;YAAA,IAAAC,eAAA,EAAAC,mBAAA,EAAAC,eAAA,EAAAC,kBAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,aAAA,EAAAC,WAAA;YAAA,oBACxB9E,OAAA;cAAgB6D,SAAS,EAAC,0CAA0C;cAAAC,QAAA,gBAClE9D,OAAA;gBAAI6D,SAAS,EAAC,oCAAoC;gBAAAC,QAAA,EAAElC,KAAK,CAACmD,SAAS,IAAI;cAAK;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAClFlE,OAAA;gBAAI6D,SAAS,EAAC,oCAAoC;gBAAAC,QAAA,EAAElC,KAAK,CAAC6B,OAAO,IAAI;cAAK;gBAAAM,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChFlE,OAAA;gBAAI6D,SAAS,EAAC,8CAA8C;gBAAAC,QAAA,EAAElC,KAAK,CAACQ,MAAM,IAAI;cAAK;gBAAA2B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACzFlE,OAAA;gBAAI6D,SAAS,EAAC,mDAAmD;gBAAAC,QAAA,GAAC,GAAC,EAAC,EAAAS,eAAA,GAAA3C,KAAK,CAACe,QAAQ,cAAA4B,eAAA,uBAAdA,eAAA,CAAgBzB,OAAO,CAAC,CAAC,CAAC,KAAI,KAAK;cAAA;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7GlE,OAAA;gBAAI6D,SAAS,EAAC,kDAAkD;gBAAAC,QAAA,GAAC,GAAC,EAAC,EAAAU,mBAAA,GAAA5C,KAAK,CAACwB,YAAY,cAAAoB,mBAAA,uBAAlBA,mBAAA,CAAoB1B,OAAO,CAAC,CAAC,CAAC,KAAI,KAAK;cAAA;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChHlE,OAAA;gBAAI6D,SAAS,EAAC,oCAAoC;gBAAAC,QAAA,EAAE,EAAAW,eAAA,GAAA7C,KAAK,CAACgB,QAAQ,cAAA6B,eAAA,uBAAdA,eAAA,CAAgB3B,OAAO,CAAC,CAAC,CAAC,KAAI;cAAK;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7FlE,OAAA;gBAAI6D,SAAS,EAAC,mDAAmD;gBAAAC,QAAA,GAAC,GAAC,EAAC,EAAAY,kBAAA,GAAA9C,KAAK,CAACmB,WAAW,cAAA2B,kBAAA,uBAAjBA,kBAAA,CAAmB5B,OAAO,CAAC,CAAC,CAAC,KAAI,KAAK;cAAA;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChHlE,OAAA;gBAAI6D,SAAS,EAAC,iDAAiD;gBAAAC,QAAA,GAAC,GAAC,EAAC,EAAAa,oBAAA,GAAA/C,KAAK,CAACc,aAAa,cAAAiC,oBAAA,uBAAnBA,oBAAA,CAAqB7B,OAAO,CAAC,CAAC,CAAC,KAAI,KAAK;cAAA;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChHlE,OAAA;gBAAI6D,SAAS,EAAC,8CAA8C;gBAAAC,QAAA,GAAE,EAAAc,oBAAA,GAAAhD,KAAK,CAACiB,aAAa,cAAA+B,oBAAA,uBAAnBA,oBAAA,CAAqB9B,OAAO,CAAC,CAAC,CAAC,KAAI,KAAK,EAAC,GAAC;cAAA;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC7GlE,OAAA;gBAAI6D,SAAS,EAAC,mDAAmD;gBAAAC,QAAA,GAAC,GAAC,EAAC,EAAAe,aAAA,GAAAjD,KAAK,CAACoB,MAAM,cAAA6B,aAAA,uBAAZA,aAAA,CAAc/B,OAAO,CAAC,CAAC,CAAC,KAAI,KAAK;cAAA;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC3GlE,OAAA;gBAAI6D,SAAS,EAAC,iDAAiD;gBAAAC,QAAA,GAAC,GAAC,EAAC,EAAAgB,WAAA,GAAAlD,KAAK,CAACqB,IAAI,cAAA6B,WAAA,uBAAVA,WAAA,CAAYhC,OAAO,CAAC,CAAC,CAAC,KAAI,KAAK;cAAA;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACvGlE,OAAA;gBAAI6D,SAAS,EAAC,8CAA8C;gBAAAC,QAAA,EAAElC,KAAK,CAACoD,UAAU,IAAI;cAAK;gBAAAjB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAE7FlE,OAAA;gBAAI6D,SAAS,EAAC,4BAA4B;gBAAAC,QAAA,eACxC9D,OAAA;kBACEmE,OAAO,EAAEA,CAAA,KAAMX,eAAe,CAAC5B,KAAK,CAAC6B,OAAO,CAAE;kBAC9CI,SAAS,EAAC,0DAA0D;kBACpEO,QAAQ,EAAEpD,OAAQ;kBAAA8C,QAAA,EACnB;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC;YAAA,GAtBEI,KAAK;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAuBV,CAAC;UAAA,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,eACRlE,OAAA;UAAA8D,QAAA,eACI9D,OAAA;YAAI6D,SAAS,EAAC,kCAAkC;YAAAC,QAAA,gBAC/C9D,OAAA;cAAIiF,OAAO,EAAC,GAAG;cAACpB,SAAS,EAAC,wCAAwC;cAAAC,QAAA,EAAC;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5ElE,OAAA;cAAI6D,SAAS,EAAC,2CAA2C;cAAAC,QAAA,GAAC,GACxD,EAACtD,OAAO,CAAC0E,MAAM,CAAC,CAACC,GAAG,EAAEvD,KAAK,KAAKuD,GAAG,IAAIvD,KAAK,CAACmB,WAAW,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC;YAAA;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3E,CAAC,eACLlE,OAAA;cAAI6D,SAAS,EAAC,yCAAyC;cAAAC,QAAA,GAAC,GACrD,EAACtD,OAAO,CAAC0E,MAAM,CAAC,CAACC,GAAG,EAAEvD,KAAK,KAAKuD,GAAG,IAAIvD,KAAK,CAACc,aAAa,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,CAAC;YAAA;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9E,CAAC,eACLlE,OAAA;cAAI6D,SAAS,EAAC,4CAA4C;cAAAC,QAAA,EACvDtD,OAAO,CAAC2B,MAAM,GAAG,CAAC,GACf,CAAC3B,OAAO,CAAC0E,MAAM,CAAC,CAACC,GAAG,EAAEvD,KAAK,KAAKuD,GAAG,IAAIC,UAAU,CAACxD,KAAK,CAACiB,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGrC,OAAO,CAAC2B,MAAM,EAAEW,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,GACnH;YAAK;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC,eACLlE,OAAA;cAAI6D,SAAS,EAAC,2CAA2C;cAAAC,QAAA,GAAC,GACvD,EAACtD,OAAO,CAAC0E,MAAM,CAAC,CAACC,GAAG,EAAEvD,KAAK,KAAKuD,GAAG,IAAIvD,KAAK,CAACoB,MAAM,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAACF,OAAO,CAAC,CAAC,CAAC;YAAA;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvE,CAAC,eACLlE,OAAA;cAAI6D,SAAS,EAAC,yCAAyC;cAAAC,QAAA,GAAC,GACrD,EAACtD,OAAO,CAAC0E,MAAM,CAAC,CAACC,GAAG,EAAEvD,KAAK,KAAKuD,GAAG,IAAIvD,KAAK,CAACqB,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAACH,OAAO,CAAC,CAAC,CAAC;YAAA;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrE,CAAC,eACLlE,OAAA;cAAI6D,SAAS,EAAC,4BAA4B;cAAAC,QAAA,eAE3C9D,OAAA;gBACEmE,OAAO,EAAEP,mBAAoB;gBAC7BQ,QAAQ,EAAEpD,OAAQ;gBAClB6C,SAAS,EAAC,0DAA0D;gBAAAC,QAAA,EAEnE9C,OAAO,gBAAGhB,OAAA,CAACF,SAAS;kBAAC+D,SAAS,EAAC;gBAAmB;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC,GAAG;cAAiB;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAENlE,OAAA;MAAG6D,SAAS,EAAC,2BAA2B;MAAAC,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACpE,EAEDpD,SAAS,iBACPd,OAAA;MAAK6D,SAAS,EAAC,wEAAwE;MAAAC,QAAA,EAAC;IAExF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAGV,CAAC;AAAC5D,EAAA,CAxOID,SAAS;EAAA,QACIT,WAAW;AAAA;AAAAyF,EAAA,GADxBhF,SAAS;AA0Of,eAAeA,SAAS;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
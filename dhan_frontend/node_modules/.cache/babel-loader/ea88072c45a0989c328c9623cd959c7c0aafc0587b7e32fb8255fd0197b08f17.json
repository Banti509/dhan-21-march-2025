{"ast":null,"code":"var _jsxFileName = \"D:\\\\stock-alphavantage\\\\src\\\\components\\\\PlaceOrder.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [symbol, setSymbol] = useState(\"BTCUSDT\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"MARKET\");\n//   const [quantity, setQuantity] = useState(0.001);\n//   const [price, setPrice] = useState(\"\"); // Price for LIMIT order\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\"); // Default for LIMIT order\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [orders, setOrders] = useState([]); // Store order history\n\n//   const handlePlaceOrder = async () => {\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n\n//     if (orderType === \"LIMIT\" && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const orderData = {\n//         symbol,\n//         side,\n//         type: orderType,\n//         quantity,\n//       };\n\n//       if (orderType === \"LIMIT\") {\n//         orderData.price = price;\n//         orderData.timeInForce = timeInForce;\n//       }\n\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData);\n\n//       // Add order to the table instead of saving to DB\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n\n//       setShowPopup(true); // Show success popup\n//       setTimeout(() => {\n//         setShowPopup(false);\n//       }, 3000);\n//     } catch (err) {\n//       setError(\"Failed to place the order. Please try again.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Create Binance Order</h2>\n\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">Symbol:</label>\n//           <input\n//             type=\"text\"\n//             value={symbol}\n//             onChange={(e) => setSymbol(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n\n//         <div>\n//           <label className=\"block mb-1\">Side:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"LIMIT\">LIMIT</option>\n//           </select>\n//         </div>\n\n//         {orderType === \"LIMIT\" && (\n//           <>\n//             <div>\n//               <label className=\"block mb-1\">Price:</label>\n//               <input\n//                 type=\"number\"\n//                 value={price}\n//                 onChange={(e) => setPrice(parseFloat(e.target.value) || \"\")}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               />\n//             </div>\n\n//             <div>\n//               <label className=\"block mb-1\">Time In Force:</label>\n//               <select\n//                 value={timeInForce}\n//                 onChange={(e) => setTimeInForce(e.target.value)}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               >\n//                 <option value=\"GTC\">GTC (Good Till Cancelled)</option>\n//                 <option value=\"IOC\">IOC (Immediate Or Cancel)</option>\n//                 <option value=\"FOK\">FOK (Fill Or Kill)</option>\n//               </select>\n//             </div>\n//           </>\n//         )}\n\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 0)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Order Table */}\n//       {orders.length > 0 && (\n//         <div className=\"mt-6\">\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//               <thead>\n//                 <tr className=\"bg-gray-700 text-white\">\n//                   <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                   <th className=\"border border-gray-600 p-2\">Symbol</th>\n//                   <th className=\"border border-gray-600 p-2\">Side</th>\n//                   <th className=\"border border-gray-600 p-2\">Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {orders.map((order, index) => (\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\n//                     <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.side}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.type}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.status}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Popup Message */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const PlaceOrder = () => {\n//   const navigate = useNavigate();\n//   const [symbol, setSymbol] = useState(\"BTCUSDT\");\n//   const [side, setSide] = useState(\"BUY\");\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\n//   const [quantity, setQuantity] = useState(0.001);\n//   const [price, setPrice] = useState(\"\");\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\n//   const [dryRun, setDryRun] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [orders, setOrders] = useState([]);\n\n//   const handlePlaceOrder = async () => {\n//     if (quantity <= 0) {\n//       setError(\"Quantity must be greater than 0.\");\n//       return;\n//     }\n//     if (orderType === \"LIMIT\" && price <= 0) {\n//       setError(\"Price must be greater than 0 for LIMIT orders.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const orderData = {\n//         symbol,\n//         side,\n//         type: orderType,\n//         quantity,\n//         dry_run: dryRun, // Toggle between real and dummy orders\n//       };\n\n//       if (orderType === \"LIMIT\") {\n//         orderData.price = price;\n//         orderData.timeInForce = timeInForce;\n//       }\n\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData);\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to place the order. Please try again.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4\">Create Binance Order</h2>\n//       <div className=\"grid grid-cols-2 gap-4\">\n//         <div>\n//           <label className=\"block mb-1\">Order Mode:</label>\n//           <select\n//             value={dryRun}\n//             onChange={(e) => setDryRun(e.target.value === \"true\")}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"false\">Real Order</option>\n//             <option value=\"true\">Dummy Order</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Symbol:</label>\n//           <input\n//             type=\"text\"\n//             value={symbol}\n//             onChange={(e) => setSymbol(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Side:</label>\n//           <select\n//             value={side}\n//             onChange={(e) => setSide(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"BUY\">BUY</option>\n//             <option value=\"SELL\">SELL</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label className=\"block mb-1\">Order Type:</label>\n//           <select\n//             value={orderType}\n//             onChange={(e) => setOrderType(e.target.value)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           >\n//             <option value=\"MARKET\">MARKET</option>\n//             <option value=\"LIMIT\">LIMIT</option>\n//           </select>\n//         </div>\n//         {orderType === \"LIMIT\" && (\n//           <>\n//             <div>\n//               <label className=\"block mb-1\">Price:</label>\n//               <input\n//                 type=\"number\"\n//                 value={price}\n//                 onChange={(e) => setPrice(parseFloat(e.target.value) || \"\")}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block mb-1\">Time In Force:</label>\n//               <select\n//                 value={timeInForce}\n//                 onChange={(e) => setTimeInForce(e.target.value)}\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//               >\n//                 <option value=\"GTC\">GTC (Good Till Cancelled)</option>\n//                 <option value=\"IOC\">IOC (Immediate Or Cancel)</option>\n//                 <option value=\"FOK\">FOK (Fill Or Kill)</option>\n//               </select>\n//             </div>\n//           </>\n//         )}\n//         <div>\n//           <label className=\"block mb-1\">Quantity:</label>\n//           <input\n//             type=\"number\"\n//             value={quantity}\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 0)}\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\n//           />\n//         </div>\n//       </div>\n//       <button\n//         onClick={handlePlaceOrder}\n//         disabled={loading}\n//         className=\"w-full p-2 mt-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\n//       </button>\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n//       {/* Order Table */}\n//       {orders.length > 0 && (\n//         <div className=\"mt-6\">\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border-collapse border border-gray-600\">\n//                <thead>\n//                  <tr className=\"bg-gray-700 text-white\">\n//                    <th className=\"border border-gray-600 p-2\">Order ID</th>\n//                    <th className=\"border border-gray-600 p-2\">Symbol</th>\n//                    <th className=\"border border-gray-600 p-2\">Side</th>\n//                    <th className=\"border border-gray-600 p-2\">Type</th>\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                  {orders.map((order, index) => (\n//                    <tr key={index} className=\"bg-gray-800 text-white\">\n//                     <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.side}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.type}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\n//                     <td className=\"border border-gray-600 p-2\">{order.status}</td>\n//                   </tr>\n//                 ))}\n//              </tbody>\n//              </table>\n//           </div>\n//         </div>\n//       )}\n\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Order created successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PlaceOrder;\n\nimport React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaceOrder = () => {\n  _s();\n  const [symbol, setSymbol] = useState(\"BTCUSDT\");\n  const [side, setSide] = useState(\"BUY\");\n  const [orderType, setOrderType] = useState(\"LIMIT\");\n  const [quantity, setQuantity] = useState(0.001);\n  const [price, setPrice] = useState(\"\"); // Price for LIMIT orders\n  const [orderMode, setOrderMode] = useState(\"real\"); // \"real\" or \"dummy\"\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [orders, setOrders] = useState([]);\n  const handlePlaceOrder = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const orderData = {\n        symbol,\n        side,\n        type: orderType,\n        quantity,\n        orderMode // Pass mode to API\n      };\n      if (orderType === \"LIMIT\") {\n        orderData.price = price;\n      }\n      const response = await axios.post(\"http://localhost:5000/place-order\", orderData);\n      setOrders(prevOrders => [...prevOrders, response.data]);\n    } catch (err) {\n      setError(\"Failed to place the order.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto bg-gray-800\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"mr-4\",\n        children: \"Order Mode:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: orderMode,\n        onChange: e => setOrderMode(e.target.value),\n        className: \"p-2 rounded bg-gray-700 border border-gray-600\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"real\",\n          children: \"Real Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"dummy\",\n          children: \"Dummy Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: symbol,\n      onChange: e => setSymbol(e.target.value),\n      placeholder: \"Symbol\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: side,\n      onChange: e => setSide(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"BUY\",\n        children: \"BUY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"SELL\",\n        children: \"SELL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: orderType,\n      onChange: e => setOrderType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"MARKET\",\n        children: \"MARKET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"LIMIT\",\n        children: \"LIMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this), orderType === \"LIMIT\" && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: price,\n      onChange: e => setPrice(e.target.value),\n      placeholder: \"Price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: quantity,\n      onChange: e => setQuantity(e.target.value),\n      placeholder: \"Quantity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlaceOrder,\n      disabled: loading,\n      className: \"bg-yellow-500 text-black p-2\",\n      children: loading ? \"Placing Order...\" : \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 17\n    }, this), orders.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-bold mb-2\",\n        children: \"Order History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full border-collapse border border-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"bg-gray-700 text-white\",\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-600 p-2\",\n                children: \"Order ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 20\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-600 p-2\",\n                children: \"Symbol\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 20\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-600 p-2\",\n                children: \"Side\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 500,\n                columnNumber: 20\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-600 p-2\",\n                children: \"Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 20\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-600 p-2\",\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-600 p-2\",\n                children: \"Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-600 p-2\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: orders.map((order, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"bg-gray-800 text-white\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: order.orderId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: order.symbol\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: order.side\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: order.type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: order.origQty\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: order.price || \"-\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: order.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 20\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaceOrder, \"PPfqWC+IkGFw02LfhX4yOhJE8ls=\");\n_c = PlaceOrder;\nexport default PlaceOrder;\nvar _c;\n$RefreshReg$(_c, \"PlaceOrder\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PlaceOrder","_s","symbol","setSymbol","side","setSide","orderType","setOrderType","quantity","setQuantity","price","setPrice","orderMode","setOrderMode","loading","setLoading","error","setError","orders","setOrders","handlePlaceOrder","orderData","type","response","post","prevOrders","data","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","disabled","length","map","order","index","orderId","origQty","status","_c","$RefreshReg$"],"sources":["D:/stock-alphavantage/src/components/PlaceOrder.js"],"sourcesContent":["\r\n\r\n// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n\r\n// const PlaceOrder = () => {\r\n//   const navigate = useNavigate();\r\n//   const [symbol, setSymbol] = useState(\"BTCUSDT\");\r\n//   const [side, setSide] = useState(\"BUY\");\r\n//   const [orderType, setOrderType] = useState(\"MARKET\");\r\n//   const [quantity, setQuantity] = useState(0.001);\r\n//   const [price, setPrice] = useState(\"\"); // Price for LIMIT order\r\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\"); // Default for LIMIT order\r\n//   const [error, setError] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [orders, setOrders] = useState([]); // Store order history\r\n\r\n//   const handlePlaceOrder = async () => {\r\n//     if (quantity <= 0) {\r\n//       setError(\"Quantity must be greater than 0.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (orderType === \"LIMIT\" && price <= 0) {\r\n//       setError(\"Price must be greater than 0 for LIMIT orders.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setError(null);\r\n\r\n//     try {\r\n//       const orderData = {\r\n//         symbol,\r\n//         side,\r\n//         type: orderType,\r\n//         quantity,\r\n//       };\r\n\r\n//       if (orderType === \"LIMIT\") {\r\n//         orderData.price = price;\r\n//         orderData.timeInForce = timeInForce;\r\n//       }\r\n\r\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData);\r\n\r\n//       // Add order to the table instead of saving to DB\r\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\r\n\r\n//       setShowPopup(true); // Show success popup\r\n//       setTimeout(() => {\r\n//         setShowPopup(false);\r\n//       }, 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to place the order. Please try again.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4\">Create Binance Order</h2>\r\n\r\n//       <div className=\"grid grid-cols-2 gap-4\">\r\n//         <div>\r\n//           <label className=\"block mb-1\">Symbol:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={symbol}\r\n//             onChange={(e) => setSymbol(e.target.value)}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label className=\"block mb-1\">Side:</label>\r\n//           <select\r\n//             value={side}\r\n//             onChange={(e) => setSide(e.target.value)}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           >\r\n//             <option value=\"BUY\">BUY</option>\r\n//             <option value=\"SELL\">SELL</option>\r\n//           </select>\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label className=\"block mb-1\">Order Type:</label>\r\n//           <select\r\n//             value={orderType}\r\n//             onChange={(e) => setOrderType(e.target.value)}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           >\r\n//             <option value=\"MARKET\">MARKET</option>\r\n//             <option value=\"LIMIT\">LIMIT</option>\r\n//           </select>\r\n//         </div>\r\n\r\n//         {orderType === \"LIMIT\" && (\r\n//           <>\r\n//             <div>\r\n//               <label className=\"block mb-1\">Price:</label>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 value={price}\r\n//                 onChange={(e) => setPrice(parseFloat(e.target.value) || \"\")}\r\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//               />\r\n//             </div>\r\n\r\n//             <div>\r\n//               <label className=\"block mb-1\">Time In Force:</label>\r\n//               <select\r\n//                 value={timeInForce}\r\n//                 onChange={(e) => setTimeInForce(e.target.value)}\r\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//               >\r\n//                 <option value=\"GTC\">GTC (Good Till Cancelled)</option>\r\n//                 <option value=\"IOC\">IOC (Immediate Or Cancel)</option>\r\n//                 <option value=\"FOK\">FOK (Fill Or Kill)</option>\r\n//               </select>\r\n//             </div>\r\n//           </>\r\n//         )}\r\n\r\n//         <div>\r\n//           <label className=\"block mb-1\">Quantity:</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             value={quantity}\r\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 0)}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           />\r\n//         </div>\r\n//       </div>\r\n\r\n//       <button\r\n//         onClick={handlePlaceOrder}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mt-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\r\n//       </button>\r\n\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Order Table */}\r\n//       {orders.length > 0 && (\r\n//         <div className=\"mt-6\">\r\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\r\n//           <div className=\"overflow-x-auto\">\r\n//             <table className=\"w-full border-collapse border border-gray-600\">\r\n//               <thead>\r\n//                 <tr className=\"bg-gray-700 text-white\">\r\n//                   <th className=\"border border-gray-600 p-2\">Order ID</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Symbol</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Side</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Type</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {orders.map((order, index) => (\r\n//                   <tr key={index} className=\"bg-gray-800 text-white\">\r\n//                     <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.side}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.type}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.status}</td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Popup Message */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Order created successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PlaceOrder;\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n\r\n// const PlaceOrder = () => {\r\n//   const navigate = useNavigate();\r\n//   const [symbol, setSymbol] = useState(\"BTCUSDT\");\r\n//   const [side, setSide] = useState(\"BUY\");\r\n//   const [orderType, setOrderType] = useState(\"LIMIT\");\r\n//   const [quantity, setQuantity] = useState(0.001);\r\n//   const [price, setPrice] = useState(\"\");\r\n//   const [timeInForce, setTimeInForce] = useState(\"GTC\");\r\n//   const [dryRun, setDryRun] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [orders, setOrders] = useState([]);\r\n\r\n//   const handlePlaceOrder = async () => {\r\n//     if (quantity <= 0) {\r\n//       setError(\"Quantity must be greater than 0.\");\r\n//       return;\r\n//     }\r\n//     if (orderType === \"LIMIT\" && price <= 0) {\r\n//       setError(\"Price must be greater than 0 for LIMIT orders.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setError(null);\r\n\r\n//     try {\r\n//       const orderData = {\r\n//         symbol,\r\n//         side,\r\n//         type: orderType,\r\n//         quantity,\r\n//         dry_run: dryRun, // Toggle between real and dummy orders\r\n//       };\r\n\r\n//       if (orderType === \"LIMIT\") {\r\n//         orderData.price = price;\r\n//         orderData.timeInForce = timeInForce;\r\n//       }\r\n\r\n//       const response = await axios.post(\"http://localhost:5000/api/place-order\", orderData);\r\n//       setOrders((prevOrders) => [...prevOrders, response.data]);\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to place the order. Please try again.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4\">Create Binance Order</h2>\r\n//       <div className=\"grid grid-cols-2 gap-4\">\r\n//         <div>\r\n//           <label className=\"block mb-1\">Order Mode:</label>\r\n//           <select\r\n//             value={dryRun}\r\n//             onChange={(e) => setDryRun(e.target.value === \"true\")}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           >\r\n//             <option value=\"false\">Real Order</option>\r\n//             <option value=\"true\">Dummy Order</option>\r\n//           </select>\r\n//         </div>\r\n//         <div>\r\n//           <label className=\"block mb-1\">Symbol:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={symbol}\r\n//             onChange={(e) => setSymbol(e.target.value)}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label className=\"block mb-1\">Side:</label>\r\n//           <select\r\n//             value={side}\r\n//             onChange={(e) => setSide(e.target.value)}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           >\r\n//             <option value=\"BUY\">BUY</option>\r\n//             <option value=\"SELL\">SELL</option>\r\n//           </select>\r\n//         </div>\r\n//         <div>\r\n//           <label className=\"block mb-1\">Order Type:</label>\r\n//           <select\r\n//             value={orderType}\r\n//             onChange={(e) => setOrderType(e.target.value)}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           >\r\n//             <option value=\"MARKET\">MARKET</option>\r\n//             <option value=\"LIMIT\">LIMIT</option>\r\n//           </select>\r\n//         </div>\r\n//         {orderType === \"LIMIT\" && (\r\n//           <>\r\n//             <div>\r\n//               <label className=\"block mb-1\">Price:</label>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 value={price}\r\n//                 onChange={(e) => setPrice(parseFloat(e.target.value) || \"\")}\r\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block mb-1\">Time In Force:</label>\r\n//               <select\r\n//                 value={timeInForce}\r\n//                 onChange={(e) => setTimeInForce(e.target.value)}\r\n//                 className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//               >\r\n//                 <option value=\"GTC\">GTC (Good Till Cancelled)</option>\r\n//                 <option value=\"IOC\">IOC (Immediate Or Cancel)</option>\r\n//                 <option value=\"FOK\">FOK (Fill Or Kill)</option>\r\n//               </select>\r\n//             </div>\r\n//           </>\r\n//         )}\r\n//         <div>\r\n//           <label className=\"block mb-1\">Quantity:</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             value={quantity}\r\n//             onChange={(e) => setQuantity(parseFloat(e.target.value) || 0)}\r\n//             className=\"w-full p-2 rounded bg-gray-700 border border-gray-600\"\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//       <button\r\n//         onClick={handlePlaceOrder}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mt-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? \"Placing Order...\" : \"Place Order\"}\r\n//       </button>\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mt-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n//       {/* Order Table */}\r\n//       {orders.length > 0 && (\r\n//         <div className=\"mt-6\">\r\n//           <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\r\n//           <div className=\"overflow-x-auto\">\r\n//             <table className=\"w-full border-collapse border border-gray-600\">\r\n//                <thead>\r\n//                  <tr className=\"bg-gray-700 text-white\">\r\n//                    <th className=\"border border-gray-600 p-2\">Order ID</th>\r\n//                    <th className=\"border border-gray-600 p-2\">Symbol</th>\r\n//                    <th className=\"border border-gray-600 p-2\">Side</th>\r\n//                    <th className=\"border border-gray-600 p-2\">Type</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Quantity</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Price</th>\r\n//                   <th className=\"border border-gray-600 p-2\">Status</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                  {orders.map((order, index) => (\r\n//                    <tr key={index} className=\"bg-gray-800 text-white\">\r\n//                     <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.side}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.type}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\r\n//                     <td className=\"border border-gray-600 p-2\">{order.status}</td>\r\n//                   </tr>\r\n//                 ))}\r\n//              </tbody>\r\n//              </table>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Order created successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PlaceOrder;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst PlaceOrder = () => {\r\n  const [symbol, setSymbol] = useState(\"BTCUSDT\");\r\n  const [side, setSide] = useState(\"BUY\");\r\n  const [orderType, setOrderType] = useState(\"LIMIT\");\r\n  const [quantity, setQuantity] = useState(0.001);\r\n  const [price, setPrice] = useState(\"\"); // Price for LIMIT orders\r\n  const [orderMode, setOrderMode] = useState(\"real\"); // \"real\" or \"dummy\"\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  const handlePlaceOrder = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const orderData = {\r\n        symbol,\r\n        side,\r\n        type: orderType,\r\n        quantity,\r\n        orderMode, // Pass mode to API\r\n      };\r\n\r\n      if (orderType === \"LIMIT\") {\r\n        orderData.price = price;\r\n      }\r\n\r\n      const response = await axios.post(\"http://localhost:5000/place-order\", orderData);\r\n      setOrders((prevOrders) => [...prevOrders, response.data]);\r\n    } catch (err) {\r\n      setError(\"Failed to place the order.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 rounded-lg shadow-lg text-white max-w-3xl mx-auto bg-gray-800\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Place Order</h2>\r\n\r\n      {/* Order Mode Selection */}\r\n      <div className=\"mb-4\">\r\n        <label className=\"mr-4\">Order Mode:</label>\r\n        <select\r\n          value={orderMode}\r\n          onChange={(e) => setOrderMode(e.target.value)}\r\n          className=\"p-2 rounded bg-gray-700 border border-gray-600\"\r\n        >\r\n          <option value=\"real\">Real Order</option>\r\n          <option value=\"dummy\">Dummy Order</option>\r\n        </select>\r\n      </div>\r\n\r\n      {/* Input Fields */}\r\n      <input type=\"text\" value={symbol} onChange={(e) => setSymbol(e.target.value)} placeholder=\"Symbol\" />\r\n      <select value={side} onChange={(e) => setSide(e.target.value)}>\r\n        <option value=\"BUY\">BUY</option>\r\n        <option value=\"SELL\">SELL</option>\r\n      </select>\r\n      <select value={orderType} onChange={(e) => setOrderType(e.target.value)}>\r\n        <option value=\"MARKET\">MARKET</option>\r\n        <option value=\"LIMIT\">LIMIT</option>\r\n      </select>\r\n      {orderType === \"LIMIT\" && <input type=\"number\" value={price} onChange={(e) => setPrice(e.target.value)} placeholder=\"Price\" />}\r\n      <input type=\"number\" value={quantity} onChange={(e) => setQuantity(e.target.value)} placeholder=\"Quantity\" />\r\n\r\n      <button onClick={handlePlaceOrder} disabled={loading} className=\"bg-yellow-500 text-black p-2\">\r\n        {loading ? \"Placing Order...\" : \"Place Order\"}\r\n      </button>\r\n\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n      {/* Order Table */}\r\n      {orders.length > 0 && (\r\n        <div className=\"mt-6\">\r\n          <h3 className=\"text-xl font-bold mb-2\">Order History</h3>\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full border-collapse border border-gray-600\">\r\n               <thead>\r\n                 <tr className=\"bg-gray-700 text-white\">\r\n                   <th className=\"border border-gray-600 p-2\">Order ID</th>\r\n                   <th className=\"border border-gray-600 p-2\">Symbol</th>\r\n                   <th className=\"border border-gray-600 p-2\">Side</th>\r\n                   <th className=\"border border-gray-600 p-2\">Type</th>\r\n                  <th className=\"border border-gray-600 p-2\">Quantity</th>\r\n                  <th className=\"border border-gray-600 p-2\">Price</th>\r\n                  <th className=\"border border-gray-600 p-2\">Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                 {orders.map((order, index) => (\r\n                   <tr key={index} className=\"bg-gray-800 text-white\">\r\n                    <td className=\"border border-gray-600 p-2\">{order.orderId}</td>\r\n                    <td className=\"border border-gray-600 p-2\">{order.symbol}</td>\r\n                    <td className=\"border border-gray-600 p-2\">{order.side}</td>\r\n                    <td className=\"border border-gray-600 p-2\">{order.type}</td>\r\n                    <td className=\"border border-gray-600 p-2\">{order.origQty}</td>\r\n                    <td className=\"border border-gray-600 p-2\">{order.price || \"-\"}</td>\r\n                    <td className=\"border border-gray-600 p-2\">{order.status}</td>\r\n                  </tr>\r\n                ))}\r\n             </tbody>\r\n             </table>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaceOrder;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
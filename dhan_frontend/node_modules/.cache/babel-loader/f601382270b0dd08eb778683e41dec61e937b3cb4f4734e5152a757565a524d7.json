{"ast":null,"code":"var _jsxFileName = \"D:\\\\stock-alphavantage\\\\src\\\\components\\\\PnlReport.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\n//       console.log(\"API Response:\", response.data); // Debugging API Response\n\n//       // ðŸ”¹ Check if the response is an object instead of an array\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data);\n//       } else if (typeof response.data === \"object\") {\n//         setPnlData([response.data]); // Wrap single object in an array\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => {\n//         setShowPopup(false);\n//       }, 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n//     // const interval = setInterval(fetchPnLReport, 20000); // Refresh every 20 sec\n\n//     // return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [socket, setSocket] = useState(null); // WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data);\n//       } else if (typeof response.data === \"object\") {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     const socketInstance = io(SOCKET_URL);\n//     setSocket(socketInstance);\n\n//     // Listen for real-time price updates\n//     socketInstance.on(\"price_update\", (data) => {\n//       console.log(\"WebSocket Price Update:\", data);\n\n//       // Update the price for matching orders\n//       setPnlData((prevData) =>\n//         prevData.map((order) =>\n//           order.symbol === Object.keys(data)[0] // Match the symbol\n//             ? { ...order, currentPrice: Object.values(data)[0] } // Update price\n//             : order\n//         )\n//       );\n//     });\n\n//     return () => {\n//       socketInstance.disconnect(); // Cleanup WebSocket connection\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\n//       >\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"PnL %\", \n//                   \"Sell Status\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">\n//                     {header}\n//                   </th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\n//                     {order.timestamp || \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\n//                     {order.orderId || \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.symbol || \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\n//                     {order.quantity || \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined\n//                       ? `${order.pnlPercentage.toFixed(2)}%`\n//                       : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.sellStatus || \"N/A\"}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState(() => []);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         // setPnlData(response.data);\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData\n//             .filter(order => order)\n//             .map((order) =>\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//             )\n//           );\n//         } else {\n//           console.warn(\"Received invalid WebSocket data:\", data);\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState(() => []);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null); // Persistent WebSocket instance\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         // setPnlData(response.data);\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection (only once)\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData\n//             .filter(order => order)\n//             .map((order) =>\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\n//             )\n//           );\n//         } else {\n//           console.warn(\"Received invalid WebSocket data:\", data);\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\n//                   \"Timestamp\",\n//                   \"Order ID\",\n//                   \"Symbol\",\n//                   \"Buy Price ($)\",\n//                   \"Current Price ($)\",\n//                   \"Quantity\",\n//                   \"Realized PnL ($)\",\n//                   \"Unrealized PnL ($)\",\n//                   \"PnL %\",\n//                   \"Profit ($)\",\n//                   \"Loss ($)\",\n//                   \"Sell Status\",\n//                   // \"Response\",\n//                 ].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\n//                 </tr>\n//               ))}\n//             </tbody>\n//             {/* Footer Row for Totals */}\n//               <tfoot>\n//                 <tr className=\"bg-gray-800 font-bold text-white\">\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const socketRef = useRef(null);\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData.map((order) => {\n//               if (order.symbol === symbol) {\n//                 const updatedCurrentPrice = newPrice;\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\n//                 const realizedPnL = order.realizedPnL || 0;\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\n\n//                 return {\n//                   ...order,\n//                   currentPrice: updatedCurrentPrice,\n//                   unrealizedPnL,\n//                   pnlPercentage,\n//                   profit,\n//                   loss,\n//                   realizedPnL,\n//                 };\n//               }\n//               return order;\n//             })\n//           );\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//                 {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(4) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td> */}\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\n//   {(typeof order.pnlPercentage === \"number\" ? order.pnlPercentage : Number(order.pnlPercentage) || 0).toFixed(2)}%\n// </td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n\n//             <tfoot>\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\n//                 </tr>\n//               </tfoot>\n//           </table>\n\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n\n//       {/* Success Popup */}\n//       {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n// const SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\n// const SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [selling, setSelling] = useState(false); // Track sell button state\n//   const socketRef = useRef(null);\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData.map((order) => {\n//               if (order.symbol === symbol) {\n//                 const updatedCurrentPrice = newPrice;\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\n//                 const realizedPnL = order.realizedPnL || 0;\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\n\n//                 return {\n//                   ...order,\n//                   currentPrice: updatedCurrentPrice,\n//                   unrealizedPnL,\n//                   pnlPercentage,\n//                   profit,\n//                   loss,\n//                   realizedPnL,\n//                 };\n//               }\n//               return order;\n//             })\n//           );\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   // Sell a single order\n//   const handleSellOrder = async (orderId) => {\n//     try {\n//       setSelling(true);\n//       await axios.post(SELL_API_URL, { order_id: orderId });\n//       fetchPnLReport(); // Refresh PnL after selling\n//     } catch (error) {\n//       console.error(\"Error selling order:\", error);\n//       setError(\"Failed to sell order.\");\n//     } finally {\n//       setSelling(false);\n//     }\n//   };\n\n//   // Sell all orders\n//   const handleSellAllOrders = async () => {\n//     try {\n//       setSelling(true);\n//       await axios.post(SELL_ALL_API_URL);\n//       fetchPnLReport(); // Refresh PnL after selling all\n//     } catch (error) {\n//       console.error(\"Error selling all orders:\", error);\n//       setError(\"Failed to sell all orders.\");\n//     } finally {\n//       setSelling(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//               {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\", \"Order Sell\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n\n//                   <td className=\"border border-gray-600 p-2\">\n//                     <button\n//                       onClick={() => handleSellOrder(order.orderId)}\n//                       className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-500\"\n//                       disabled={selling}\n//                     >\n//                       Sell\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\n//                  <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2 text-green-500\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2 text-red-500\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2\">\n//                     {/* Sell All Orders Button */}\n//                   <button\n//                     onClick={handleSellAllOrders}\n//                     disabled={selling}\n//                     className=\"bg-red-500 text-white px-2 py-2 rounded hover:bg-red-600\"\n//                   >\n//                     {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\n//                   </button>\n//                   </td> \n//                  </tr>\n//                 </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n//       {/* Success Popup */}\n//      {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n\n//   );\n// };\n\n// export default PnLReport;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import { io } from \"socket.io-client\";\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\n\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\n// const SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\n// const SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\n\n// const PnLReport = () => {\n//   const navigate = useNavigate();\n//   const [pnlData, setPnlData] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [selling, setSelling] = useState(false); // Track sell button state\n//   const socketRef = useRef(null);\n\n//   // Fetch initial PnL report data\n//   const fetchPnLReport = async () => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.get(API_URL);\n//       console.log(\"API Response:\", response.data);\n\n//       if (Array.isArray(response.data)) {\n//         setPnlData(response.data.filter(order => order));\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\n//         setPnlData([response.data]);\n//       } else {\n//         setError(\"Invalid data format received from API.\");\n//         setPnlData([]);\n//       }\n\n//       setShowPopup(true);\n//       setTimeout(() => setShowPopup(false), 3000);\n//     } catch (err) {\n//       setError(\"Failed to fetch PnL report. Please try again.\");\n//       setPnlData([]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPnLReport();\n\n//     // Establish WebSocket connection\n//     if (!socketRef.current) {\n//       socketRef.current = io(SOCKET_URL);\n\n//       socketRef.current.on(\"price_update\", (data) => {\n//         console.log(\"WebSocket Price Update:\", data);\n\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\n//           const symbol = Object.keys(data)[0];\n//           const newPrice = Object.values(data)[0];\n\n//           setPnlData((prevData) =>\n//             prevData.map((order) => {\n//               if (order.symbol === symbol) {\n//                 const updatedCurrentPrice = newPrice;\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\n//                 const realizedPnL = order.realizedPnL || 0;\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\n\n//                 return {\n//                   ...order,\n//                   currentPrice: updatedCurrentPrice,\n//                   unrealizedPnL,\n//                   pnlPercentage,\n//                   profit,\n//                   loss,\n//                   realizedPnL,\n//                 };\n//               }\n//               return order;\n//             })\n//           );\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (err) => {\n//         console.error(\"WebSocket Connection Error:\", err);\n//       });\n\n//       socketRef.current.on(\"disconnect\", () => {\n//         console.warn(\"WebSocket Disconnected\");\n//       });\n//     }\n\n//     return () => {\n//       socketRef.current?.disconnect();\n//       socketRef.current = null;\n//     };\n//   }, []);\n\n//   // Sell a single order\n//   // const handleSellOrder = async (orderId) => {\n//   //   try {\n//   //     setSelling(true);\n//   //     await axios.post(SELL_API_URL, { order_id: orderId });\n//   //     fetchPnLReport(); // Refresh PnL after selling\n//   //   } catch (error) {\n//   //     console.error(\"Error selling order:\", error);\n//   //     setError(\"Failed to sell order.\");\n//   //   } finally {\n//   //     setSelling(false);\n//   //   }\n//   // };\n\n//   const handleSellOrder = async (symbol, orderId) => {\n//     try {\n//       setSelling(true);\n//       setError(null);\n\n//       const response = await axios.post(SELL_API_URL, {\n//         symbol: symbol,\n//         order_id: orderId,\n//       });\n\n//       alert(`Sell Order Placed: ${response.data.message}`);\n//       console.log(response.data);\n\n//       // âœ… Refresh Orders after Selling (Call API to get updated list)\n//       fetchPnLReport(); \n//     } catch (error) {\n//       console.error(\"Error selling order:\", error);\n//       setError(\"Failed to sell order.\");\n//     } finally {\n//       setSelling(false);\n//     }\n//   };\n\n//   // Sell all orders\n//   const handleSellAllOrders = async () => {\n//     try {\n//       setSelling(true);\n//       await axios.post(SELL_ALL_API_URL);\n//       fetchPnLReport(); // Refresh PnL after selling all\n//     } catch (error) {\n//       console.error(\"Error selling all orders:\", error);\n//       setError(\"Failed to sell all orders.\");\n//     } finally {\n//       setSelling(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\n//         Binance Active Orders PnL Report\n//       </h2>\n\n//       {/* Refresh Button */}\n//       <button\n//         onClick={fetchPnLReport}\n//         disabled={loading}\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\n//       >\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\n//       </button>\n\n//       {/* Back Button */}\n//       <button\n//         onClick={() => navigate(\"/\")}\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\n//       >\n//         Back to Dashboard\n//       </button>\n\n//       {/* Error Message */}\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\n\n//       {/* Table with PnL Data */}\n//       {pnlData.length > 0 ? (\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\n//             <thead>\n//               <tr className=\"bg-gray-700 text-yellow-400\">\n//               {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\", \"Order Sell\"].map((header, index) => (\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {pnlData.map((order, index) => (\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\n\n//                   <td className=\"border border-gray-600 p-2\">\n//                     <button\n//                       onClick={() => handleSellOrder(order.orderId)}\n//                       className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-500\"\n//                       disabled={selling}\n//                     >\n//                       Sell\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\n//                  <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\n//                    ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\n//                   </td>\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\n//                     {pnlData.length > 0\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\n//                       : \"N/A\"}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2 text-green-500\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2 text-red-500\">\n//                      ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\n//                    </td>\n//                    <td className=\"border border-gray-600 p-2\">\n//                     {/* Sell All Orders Button */}\n//                   <button\n//                     onClick={handleSellAllOrders}\n//                     disabled={selling}\n//                     className=\"bg-red-500 text-white px-2 py-2 rounded hover:bg-red-600\"\n//                   >\n//                     {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\n//                   </button>\n//                   </td> \n//                  </tr>\n//                 </tfoot>\n//           </table>\n//         </div>\n//       ) : (\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\n//       )}\n//       {/* Success Popup */}\n//      {showPopup && (\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\n//           Data fetched successfully!\n//         </div>\n//       )}\n//     </div>\n\n//   );\n// };\n\n// export default PnLReport;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\nimport { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\nconst API_URL = \"http://localhost:5000/api/pnl_report\";\nconst SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\nconst SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\n\nconst PnLReport = () => {\n  _s();\n  const navigate = useNavigate();\n  const [pnlData, setPnlData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [sellingOrder, setSellingOrder] = useState(null); // Track which order is being sold\n  const socketRef = useRef(null);\n\n  // Fetch PnL report data\n  const fetchPnLReport = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(API_URL);\n      setPnlData(response.data || []);\n    } catch (err) {\n      setError(\"Failed to fetch PnL report.\");\n      setPnlData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPnLReport();\n    if (!socketRef.current) {\n      socketRef.current = io(SOCKET_URL);\n      socketRef.current.on(\"price_update\", data => {\n        console.log(\"WebSocket Price Update:\", data);\n        setPnlData(prevData => prevData.map(order => order.symbol === data.symbol ? {\n          ...order,\n          currentPrice: data.price\n        } : order));\n      });\n    }\n    return () => {\n      var _socketRef$current;\n      (_socketRef$current = socketRef.current) === null || _socketRef$current === void 0 ? void 0 : _socketRef$current.disconnect();\n      socketRef.current = null;\n    };\n  }, []);\n\n  // âœ… Handle Single Order Sell\n  const handleSellOrder = async (symbol, orderId) => {\n    if (!symbol || !orderId) {\n      setError(\"Invalid order details.\");\n      return;\n    }\n    try {\n      setSellingOrder(orderId); // Show loading for this order\n      const response = await axios.post(SELL_API_URL, {\n        symbol,\n        order_id: orderId\n      });\n      alert(`Sell Order Success: ${response.data.message}`);\n      fetchPnLReport(); // Refresh data after sell\n    } catch (error) {\n      console.error(\"Error selling order:\", error);\n      setError(\"Failed to sell order.\");\n    } finally {\n      setSellingOrder(null);\n    }\n  };\n\n  // âœ… Handle Sell All Orders\n  const handleSellAllOrders = async () => {\n    try {\n      setLoading(true);\n      await axios.post(SELL_ALL_API_URL);\n      fetchPnLReport();\n    } catch (error) {\n      console.error(\"Error selling all orders:\", error);\n      setError(\"Failed to sell all orders.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-center\",\n      children: \"Binance Active Orders PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1585,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchPnLReport,\n      disabled: loading,\n      className: \"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\",\n      children: loading ? /*#__PURE__*/_jsxDEV(FaSpinner, {\n        className: \"animate-spin mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1589,\n        columnNumber: 20\n      }, this) : \"Refresh PnL Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1588,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      className: \"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\",\n      children: \"Back to Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1593,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 p-2 bg-red-600 text-white rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1598,\n      columnNumber: 17\n    }, this), pnlData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"min-w-full border border-gray-600 shadow-lg text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-700 text-yellow-400\",\n            children: [\"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"PnL %\", \"Sell\"].map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-600 p-3 text-sm\",\n              children: header\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1607,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1605,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1604,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: (pnlData === null || pnlData === void 0 ? void 0 : pnlData.length) > 0 ? pnlData.filter(order => order && order.orderId) // âœ… Ensure order & orderId exist\n          .map((order, index) => {\n            var _order$quantity;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"bg-gray-900 hover:bg-gray-700 transition\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs\",\n                children: order.orderId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1617,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs font-bold\",\n                children: order.symbol || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1618,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs text-green-400\",\n                children: [\"$\", order.buyPrice ? order.buyPrice.toFixed(2) : \"0.00\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1619,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs text-blue-400\",\n                children: [\"$\", order.currentPrice ? order.currentPrice.toFixed(2) : \"0.00\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1622,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs\",\n                children: ((_order$quantity = order.quantity) === null || _order$quantity === void 0 ? void 0 : _order$quantity.toFixed(3)) || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1625,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2 text-xs font-bold\",\n                children: [order.pnlPercentage ? order.pnlPercentage.toFixed(2) : \"0.00\", \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1626,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-600 p-2\",\n                children: order.orderId ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSellOrder(order.symbol, order.orderId),\n                  className: \"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\",\n                  disabled: sellingOrder === order.orderId,\n                  children: sellingOrder === order.orderId ? \"Selling...\" : \"Sell\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1633,\n                  columnNumber: 15\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-gray-400\",\n                  children: \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1641,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1631,\n                columnNumber: 11\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1616,\n              columnNumber: 9\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"7\",\n              className: \"text-center text-gray-400 p-3\",\n              children: \"No active orders found.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1648,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1647,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1611,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1603,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1602,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-400\",\n      children: \"No active orders found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1658,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1584,\n    columnNumber: 5\n  }, this);\n};\n_s(PnLReport, \"W+9VTgXlMOHE0EclWRNX8iaANGo=\", false, function () {\n  return [useNavigate];\n});\n_c = PnLReport;\nexport default PnLReport;\nvar _c;\n$RefreshReg$(_c, \"PnLReport\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useNavigate","io","FaSpinner","jsxDEV","_jsxDEV","SOCKET_URL","API_URL","SELL_API_URL","SELL_ALL_API_URL","PnLReport","_s","navigate","pnlData","setPnlData","loading","setLoading","error","setError","sellingOrder","setSellingOrder","socketRef","fetchPnLReport","response","get","data","err","current","on","console","log","prevData","map","order","symbol","currentPrice","price","_socketRef$current","disconnect","handleSellOrder","orderId","post","order_id","alert","message","handleSellAllOrders","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","header","index","filter","_order$quantity","buyPrice","toFixed","quantity","pnlPercentage","colSpan","_c","$RefreshReg$"],"sources":["D:/stock-alphavantage/src/components/PnlReport.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/api/pnl_report\");\r\n//       console.log(\"API Response:\", response.data); // Debugging API Response\r\n\r\n//       // ðŸ”¹ Check if the response is an object instead of an array\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data);\r\n//       } else if (typeof response.data === \"object\") {\r\n//         setPnlData([response.data]); // Wrap single object in an array\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => {\r\n//         setShowPopup(false);\r\n//       }, 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n//     // const interval = setInterval(fetchPnLReport, 20000); // Refresh every 20 sec\r\n\r\n//     // return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [socket, setSocket] = useState(null); // WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data);\r\n//       } else if (typeof response.data === \"object\") {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     const socketInstance = io(SOCKET_URL);\r\n//     setSocket(socketInstance);\r\n\r\n//     // Listen for real-time price updates\r\n//     socketInstance.on(\"price_update\", (data) => {\r\n//       console.log(\"WebSocket Price Update:\", data);\r\n\r\n//       // Update the price for matching orders\r\n//       setPnlData((prevData) =>\r\n//         prevData.map((order) =>\r\n//           order.symbol === Object.keys(data)[0] // Match the symbol\r\n//             ? { ...order, currentPrice: Object.values(data)[0] } // Update price\r\n//             : order\r\n//         )\r\n//       );\r\n//     });\r\n\r\n//     return () => {\r\n//       socketInstance.disconnect(); // Cleanup WebSocket connection\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600\"\r\n//       >\r\n//         {loading ? \"Refreshing...\" : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"PnL %\", \r\n//                   \"Sell Status\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">\r\n//                     {header}\r\n//                   </th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\r\n//                     {order.timestamp || \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\r\n//                     {order.orderId || \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.symbol || \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">\r\n//                     {order.quantity || \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined\r\n//                       ? `${order.pnlPercentage.toFixed(2)}%`\r\n//                       : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.sellStatus || \"N/A\"}\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState(() => []);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null); // Persistent WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         // setPnlData(response.data);\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection (only once)\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData\r\n//             .filter(order => order)\r\n//             .map((order) =>\r\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\r\n//             )\r\n//           );\r\n//         } else {\r\n//           console.warn(\"Received invalid WebSocket data:\", data);\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // For loading spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState(() => []);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null); // Persistent WebSocket instance\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         // setPnlData(response.data);\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection (only once)\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0 && Object.values(data)[0] !== null) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData\r\n//             .filter(order => order)\r\n//             .map((order) =>\r\n//               order.symbol === symbol ? { ...order, currentPrice: newPrice } : order\r\n//             )\r\n//           );\r\n//         } else {\r\n//           console.warn(\"Received invalid WebSocket data:\", data);\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\r\n//                   \"Timestamp\",\r\n//                   \"Order ID\",\r\n//                   \"Symbol\",\r\n//                   \"Buy Price ($)\",\r\n//                   \"Current Price ($)\",\r\n//                   \"Quantity\",\r\n//                   \"Realized PnL ($)\",\r\n//                   \"Unrealized PnL ($)\",\r\n//                   \"PnL %\",\r\n//                   \"Profit ($)\",\r\n//                   \"Loss ($)\",\r\n//                   \"Sell Status\",\r\n//                   // \"Response\",\r\n//                 ].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n//                     {order.buyPrice ? `$${order.buyPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n//                     {order.currentPrice ? `$${order.currentPrice.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">\r\n//                     {order.realizedPnL ? `$${order.realizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">\r\n//                     {order.unrealizedPnL ? `$${order.unrealizedPnL.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//                     {order.pnlPercentage !== undefined ? `${order.pnlPercentage.toFixed(2)}%` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">\r\n//                     {order.profit ? `$${order.profit.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">\r\n//                     {order.loss ? `$${order.loss.toFixed(2)}` : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs\">{order.response || \"N/A\"}</td> */}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             {/* Footer Row for Totals */}\r\n//               <tfoot>\r\n//                 <tr className=\"bg-gray-800 font-bold text-white\">\r\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (order.pnlPercentage || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\r\n//                 </tr>\r\n//               </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const socketRef = useRef(null);\r\n  \r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData.map((order) => {\r\n//               if (order.symbol === symbol) {\r\n//                 const updatedCurrentPrice = newPrice;\r\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\r\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\r\n//                 const realizedPnL = order.realizedPnL || 0;\r\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\r\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\r\n\r\n//                 return {\r\n//                   ...order,\r\n//                   currentPrice: updatedCurrentPrice,\r\n//                   unrealizedPnL,\r\n//                   pnlPercentage,\r\n//                   profit,\r\n//                   loss,\r\n//                   realizedPnL,\r\n//                 };\r\n//               }\r\n//               return order;\r\n//             })\r\n//           );\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//                 {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(4) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   {/* <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td> */}\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n//   {(typeof order.pnlPercentage === \"number\" ? order.pnlPercentage : Number(order.pnlPercentage) || 0).toFixed(2)}%\r\n// </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n\r\n//             <tfoot>\r\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\r\n//                   <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-white\">-</td>\r\n//                 </tr>\r\n//               </tfoot>\r\n//           </table>\r\n\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n\r\n//       {/* Success Popup */}\r\n//       {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n// const SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\r\n// const SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [selling, setSelling] = useState(false); // Track sell button state\r\n//   const socketRef = useRef(null);\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData.map((order) => {\r\n//               if (order.symbol === symbol) {\r\n//                 const updatedCurrentPrice = newPrice;\r\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\r\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\r\n//                 const realizedPnL = order.realizedPnL || 0;\r\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\r\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\r\n\r\n//                 return {\r\n//                   ...order,\r\n//                   currentPrice: updatedCurrentPrice,\r\n//                   unrealizedPnL,\r\n//                   pnlPercentage,\r\n//                   profit,\r\n//                   loss,\r\n//                   realizedPnL,\r\n//                 };\r\n//               }\r\n//               return order;\r\n//             })\r\n//           );\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   // Sell a single order\r\n//   const handleSellOrder = async (orderId) => {\r\n//     try {\r\n//       setSelling(true);\r\n//       await axios.post(SELL_API_URL, { order_id: orderId });\r\n//       fetchPnLReport(); // Refresh PnL after selling\r\n//     } catch (error) {\r\n//       console.error(\"Error selling order:\", error);\r\n//       setError(\"Failed to sell order.\");\r\n//     } finally {\r\n//       setSelling(false);\r\n//     }\r\n//   };\r\n\r\n//   // Sell all orders\r\n//   const handleSellAllOrders = async () => {\r\n//     try {\r\n//       setSelling(true);\r\n//       await axios.post(SELL_ALL_API_URL);\r\n//       fetchPnLReport(); // Refresh PnL after selling all\r\n//     } catch (error) {\r\n//       console.error(\"Error selling all orders:\", error);\r\n//       setError(\"Failed to sell all orders.\");\r\n//     } finally {\r\n//       setSelling(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n      \r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//               {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\", \"Order Sell\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n\r\n//                   <td className=\"border border-gray-600 p-2\">\r\n//                     <button\r\n//                       onClick={() => handleSellOrder(order.orderId)}\r\n//                       className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-500\"\r\n//                       disabled={selling}\r\n//                     >\r\n//                       Sell\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             <tfoot>\r\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\r\n//                  <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                    ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2\">\r\n//                     {/* Sell All Orders Button */}\r\n//                   <button\r\n//                     onClick={handleSellAllOrders}\r\n//                     disabled={selling}\r\n//                     className=\"bg-red-500 text-white px-2 py-2 rounded hover:bg-red-600\"\r\n//                   >\r\n//                     {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\r\n//                   </button>\r\n//                   </td> \r\n//                  </tr>\r\n//                 </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n//       {/* Success Popup */}\r\n//      {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n    \r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { io } from \"socket.io-client\";\r\n// import { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\n// const SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\n// const API_URL = \"http://localhost:5000/api/pnl_report\";\r\n// const SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\r\n// const SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\r\n\r\n// const PnLReport = () => {\r\n//   const navigate = useNavigate();\r\n//   const [pnlData, setPnlData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [selling, setSelling] = useState(false); // Track sell button state\r\n//   const socketRef = useRef(null);\r\n\r\n//   // Fetch initial PnL report data\r\n//   const fetchPnLReport = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.get(API_URL);\r\n//       console.log(\"API Response:\", response.data);\r\n\r\n//       if (Array.isArray(response.data)) {\r\n//         setPnlData(response.data.filter(order => order));\r\n//       } else if (typeof response.data === \"object\" && response.data !== null) {\r\n//         setPnlData([response.data]);\r\n//       } else {\r\n//         setError(\"Invalid data format received from API.\");\r\n//         setPnlData([]);\r\n//       }\r\n\r\n//       setShowPopup(true);\r\n//       setTimeout(() => setShowPopup(false), 3000);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch PnL report. Please try again.\");\r\n//       setPnlData([]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchPnLReport();\r\n\r\n//     // Establish WebSocket connection\r\n//     if (!socketRef.current) {\r\n//       socketRef.current = io(SOCKET_URL);\r\n\r\n//       socketRef.current.on(\"price_update\", (data) => {\r\n//         console.log(\"WebSocket Price Update:\", data);\r\n\r\n//         if (data && typeof data === \"object\" && Object.keys(data).length > 0) {\r\n//           const symbol = Object.keys(data)[0];\r\n//           const newPrice = Object.values(data)[0];\r\n\r\n//           setPnlData((prevData) =>\r\n//             prevData.map((order) => {\r\n//               if (order.symbol === symbol) {\r\n//                 const updatedCurrentPrice = newPrice;\r\n//                 const unrealizedPnL = (updatedCurrentPrice - order.buyPrice) * order.quantity;\r\n//                 const pnlPercentage = ((unrealizedPnL / (order.buyPrice * order.quantity)) * 100).toFixed(2);\r\n//                 const realizedPnL = order.realizedPnL || 0;\r\n//                 const profit = unrealizedPnL > 0 ? unrealizedPnL : 0;\r\n//                 const loss = unrealizedPnL < 0 ? Math.abs(unrealizedPnL) : 0;\r\n\r\n//                 return {\r\n//                   ...order,\r\n//                   currentPrice: updatedCurrentPrice,\r\n//                   unrealizedPnL,\r\n//                   pnlPercentage,\r\n//                   profit,\r\n//                   loss,\r\n//                   realizedPnL,\r\n//                 };\r\n//               }\r\n//               return order;\r\n//             })\r\n//           );\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (err) => {\r\n//         console.error(\"WebSocket Connection Error:\", err);\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", () => {\r\n//         console.warn(\"WebSocket Disconnected\");\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       socketRef.current?.disconnect();\r\n//       socketRef.current = null;\r\n//     };\r\n//   }, []);\r\n\r\n//   // Sell a single order\r\n//   // const handleSellOrder = async (orderId) => {\r\n//   //   try {\r\n//   //     setSelling(true);\r\n//   //     await axios.post(SELL_API_URL, { order_id: orderId });\r\n//   //     fetchPnLReport(); // Refresh PnL after selling\r\n//   //   } catch (error) {\r\n//   //     console.error(\"Error selling order:\", error);\r\n//   //     setError(\"Failed to sell order.\");\r\n//   //   } finally {\r\n//   //     setSelling(false);\r\n//   //   }\r\n//   // };\r\n\r\n//   const handleSellOrder = async (symbol, orderId) => {\r\n//     try {\r\n//       setSelling(true);\r\n//       setError(null);\r\n\r\n//       const response = await axios.post(SELL_API_URL, {\r\n//         symbol: symbol,\r\n//         order_id: orderId,\r\n//       });\r\n\r\n//       alert(`Sell Order Placed: ${response.data.message}`);\r\n//       console.log(response.data);\r\n\r\n//       // âœ… Refresh Orders after Selling (Call API to get updated list)\r\n//       fetchPnLReport(); \r\n//     } catch (error) {\r\n//       console.error(\"Error selling order:\", error);\r\n//       setError(\"Failed to sell order.\");\r\n//     } finally {\r\n//       setSelling(false);\r\n//     }\r\n//   };\r\n\r\n//   // Sell all orders\r\n//   const handleSellAllOrders = async () => {\r\n//     try {\r\n//       setSelling(true);\r\n//       await axios.post(SELL_ALL_API_URL);\r\n//       fetchPnLReport(); // Refresh PnL after selling all\r\n//     } catch (error) {\r\n//       console.error(\"Error selling all orders:\", error);\r\n//       setError(\"Failed to sell all orders.\");\r\n//     } finally {\r\n//       setSelling(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n//         Binance Active Orders PnL Report\r\n//       </h2>\r\n\r\n//       {/* Refresh Button */}\r\n//       <button\r\n//         onClick={fetchPnLReport}\r\n//         disabled={loading}\r\n//         className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\"\r\n//       >\r\n//         {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n//       </button>\r\n\r\n      \r\n\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => navigate(\"/\")}\r\n//         className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n//       >\r\n//         Back to Dashboard\r\n//       </button>\r\n\r\n//       {/* Error Message */}\r\n//       {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n//       {/* Table with PnL Data */}\r\n//       {pnlData.length > 0 ? (\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n//             <thead>\r\n//               <tr className=\"bg-gray-700 text-yellow-400\">\r\n//               {[\"Timestamp\", \"Order ID\", \"Symbol\", \"Buy Price ($)\", \"Current Price ($)\", \"Quantity\", \"Realized PnL ($)\", \"Unrealized PnL ($)\", \"PnL %\", \"Profit ($)\", \"Loss ($)\", \"Sell Status\", \"Order Sell\"].map((header, index) => (\r\n//                   <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {pnlData.map((order, index) => (\r\n//                 <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.timestamp || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-400\">${order.buyPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">${order.currentPrice?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-300\">${order.realizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-300\">${order.unrealizedPnL?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.pnlPercentage?.toFixed(2) || \"N/A\"}%</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-green-500\">${order.profit?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs text-red-500\">${order.loss?.toFixed(2) || \"N/A\"}</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.sellStatus || \"N/A\"}</td>\r\n\r\n//                   <td className=\"border border-gray-600 p-2\">\r\n//                     <button\r\n//                       onClick={() => handleSellOrder(order.orderId)}\r\n//                       className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-500\"\r\n//                       disabled={selling}\r\n//                     >\r\n//                       Sell\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//             <tfoot>\r\n//                 <tr className=\"bg-gray-700 font-bold text-white\">\r\n//                  <td colSpan=\"6\" className=\"border border-gray-600 p-2 text-center\">Total</td>\r\n//                   <td className=\"border border-gray-600 p-2 text-green-300\">\r\n//                    ${pnlData.reduce((sum, order) => sum + (order.realizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-red-300\">\r\n//                     ${pnlData.reduce((sum, order) => sum + (order.unrealizedPnL || 0), 0).toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-600 p-2 text-yellow-300\">\r\n//                     {pnlData.length > 0\r\n//                       ? (pnlData.reduce((sum, order) => sum + (parseFloat(order.pnlPercentage) || 0), 0) / pnlData.length).toFixed(2) + \"%\"\r\n//                       : \"N/A\"}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2 text-green-500\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.profit || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2 text-red-500\">\r\n//                      ${pnlData.reduce((sum, order) => sum + (order.loss || 0), 0).toFixed(2)}\r\n//                    </td>\r\n//                    <td className=\"border border-gray-600 p-2\">\r\n//                     {/* Sell All Orders Button */}\r\n//                   <button\r\n//                     onClick={handleSellAllOrders}\r\n//                     disabled={selling}\r\n//                     className=\"bg-red-500 text-white px-2 py-2 rounded hover:bg-red-600\"\r\n//                   >\r\n//                     {selling ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Sell All Orders\"}\r\n//                   </button>\r\n//                   </td> \r\n//                  </tr>\r\n//                 </tfoot>\r\n//           </table>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n//       )}\r\n//       {/* Success Popup */}\r\n//      {showPopup && (\r\n//         <div className=\"fixed top-10 right-10 bg-green-500 text-white p-3 rounded-lg shadow-lg\">\r\n//           Data fetched successfully!\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n    \r\n//   );\r\n// };\r\n\r\n// export default PnLReport;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { io } from \"socket.io-client\";\r\nimport { FaSpinner } from \"react-icons/fa\"; // Loading Spinner\r\n\r\nconst SOCKET_URL = \"http://localhost:5000\"; // Flask WebSocket Server\r\nconst API_URL = \"http://localhost:5000/api/pnl_report\";\r\nconst SELL_API_URL = \"http://localhost:5000/api/sell_order\"; // Endpoint to sell one order\r\nconst SELL_ALL_API_URL = \"http://localhost:5000/api/sell_all_orders\"; // Endpoint to sell all orders\r\n\r\nconst PnLReport = () => {\r\n  const navigate = useNavigate();\r\n  const [pnlData, setPnlData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [sellingOrder, setSellingOrder] = useState(null); // Track which order is being sold\r\n  const socketRef = useRef(null);\r\n\r\n  // Fetch PnL report data\r\n  const fetchPnLReport = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(API_URL);\r\n      setPnlData(response.data || []);\r\n    } catch (err) {\r\n      setError(\"Failed to fetch PnL report.\");\r\n      setPnlData([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPnLReport();\r\n    if (!socketRef.current) {\r\n      socketRef.current = io(SOCKET_URL);\r\n      socketRef.current.on(\"price_update\", (data) => {\r\n        console.log(\"WebSocket Price Update:\", data);\r\n        setPnlData((prevData) =>\r\n          prevData.map((order) =>\r\n            order.symbol === data.symbol\r\n              ? { ...order, currentPrice: data.price }\r\n              : order\r\n          )\r\n        );\r\n      });\r\n    }\r\n    return () => {\r\n      socketRef.current?.disconnect();\r\n      socketRef.current = null;\r\n    };\r\n  }, []);\r\n\r\n  // âœ… Handle Single Order Sell\r\n  const handleSellOrder = async (symbol, orderId) => {\r\n    if (!symbol || !orderId) {\r\n      setError(\"Invalid order details.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSellingOrder(orderId); // Show loading for this order\r\n      const response = await axios.post(SELL_API_URL, { symbol, order_id: orderId });\r\n\r\n      alert(`Sell Order Success: ${response.data.message}`);\r\n      fetchPnLReport(); // Refresh data after sell\r\n    } catch (error) {\r\n      console.error(\"Error selling order:\", error);\r\n      setError(\"Failed to sell order.\");\r\n    } finally {\r\n      setSellingOrder(null);\r\n    }\r\n  };\r\n\r\n  // âœ… Handle Sell All Orders\r\n  const handleSellAllOrders = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await axios.post(SELL_ALL_API_URL);\r\n      fetchPnLReport();\r\n    } catch (error) {\r\n      console.error(\"Error selling all orders:\", error);\r\n      setError(\"Failed to sell all orders.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white max-w-6xl mx-auto\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Binance Active Orders PnL Report</h2>\r\n\r\n      {/* Refresh Button */}\r\n      <button onClick={fetchPnLReport} disabled={loading} className=\"w-full p-2 mb-4 bg-yellow-500 text-black font-bold rounded hover:bg-yellow-600 flex items-center justify-center\">\r\n        {loading ? <FaSpinner className=\"animate-spin mr-2\" /> : \"Refresh PnL Report\"}\r\n      </button>\r\n\r\n      {/* Back Button */}\r\n      <button onClick={() => navigate(\"/\")} className=\"w-full p-2 mb-3 bg-gray-500 text-white rounded hover:bg-gray-600\">\r\n        Back to Dashboard\r\n      </button>\r\n\r\n      {/* Error Message */}\r\n      {error && <p className=\"mt-4 p-2 bg-red-600 text-white rounded\">{error}</p>}\r\n\r\n      {/* PnL Table */}\r\n      {pnlData.length > 0 ? (\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full border border-gray-600 shadow-lg text-center\">\r\n            <thead>\r\n              <tr className=\"bg-gray-700 text-yellow-400\">\r\n                {[\"Order ID\", \"Symbol\", \"Buy Price\", \"Current Price\", \"Quantity\", \"PnL %\", \"Sell\"].map((header, index) => (\r\n                  <th key={index} className=\"border border-gray-600 p-3 text-sm\">{header}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n  {pnlData?.length > 0 ? (\r\n    pnlData\r\n      .filter(order => order && order.orderId) // âœ… Ensure order & orderId exist\r\n      .map((order, index) => (\r\n        <tr key={index} className=\"bg-gray-900 hover:bg-gray-700 transition\">\r\n          <td className=\"border border-gray-600 p-2 text-xs\">{order.orderId}</td>\r\n          <td className=\"border border-gray-600 p-2 text-xs font-bold\">{order.symbol || \"N/A\"}</td>\r\n          <td className=\"border border-gray-600 p-2 text-xs text-green-400\">\r\n            ${order.buyPrice ? order.buyPrice.toFixed(2) : \"0.00\"}\r\n          </td>\r\n          <td className=\"border border-gray-600 p-2 text-xs text-blue-400\">\r\n            ${order.currentPrice ? order.currentPrice.toFixed(2) : \"0.00\"}\r\n          </td>\r\n          <td className=\"border border-gray-600 p-2 text-xs\">{order.quantity?.toFixed(3) || \"N/A\"}</td>\r\n          <td className=\"border border-gray-600 p-2 text-xs font-bold\">\r\n            {order.pnlPercentage ? order.pnlPercentage.toFixed(2) : \"0.00\"}%\r\n          </td>\r\n\r\n          {/* âœ… Prevent Sell on Invalid Data */}\r\n          <td className=\"border border-gray-600 p-2\">\r\n            {order.orderId ? (\r\n              <button\r\n                onClick={() => handleSellOrder(order.symbol, order.orderId)}\r\n                className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\"\r\n                disabled={sellingOrder === order.orderId}\r\n              >\r\n                {sellingOrder === order.orderId ? \"Selling...\" : \"Sell\"}\r\n              </button>\r\n            ) : (\r\n              <span className=\"text-gray-400\">N/A</span>\r\n            )}\r\n          </td>\r\n        </tr>\r\n      ))\r\n  ) : (\r\n    <tr>\r\n      <td colSpan=\"7\" className=\"text-center text-gray-400 p-3\">\r\n        No active orders found.\r\n      </td>\r\n    </tr>\r\n  )}\r\n</tbody>\r\n\r\n          </table>\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-center text-gray-400\">No active orders found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PnLReport;\r\n"],"mappingsaacazB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,EAAE,QAAQ,kBAAkB;AACrC,SAASC,SAAS,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,UAAU,GAAG,uBAAuB,CAAC,CAAC;AAC5C,MAAMC,OAAO,GAAG,sCAAsC;AACtD,MAAMC,YAAY,GAAG,sCAAsC,CAAC,CAAC;AAC7D,MAAMC,gBAAgB,GAAG,2CAA2C,CAAC,CAAC;;AAEtE,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxD,MAAMwB,SAAS,GAAGtB,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,MAAMuB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCN,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAACjB,OAAO,CAAC;MACzCO,UAAU,CAACS,QAAQ,CAACE,IAAI,IAAI,EAAE,CAAC;IACjC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZR,QAAQ,CAAC,6BAA6B,CAAC;MACvCJ,UAAU,CAAC,EAAE,CAAC;IAChB,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACdwB,cAAc,CAAC,CAAC;IAChB,IAAI,CAACD,SAAS,CAACM,OAAO,EAAE;MACtBN,SAAS,CAACM,OAAO,GAAGzB,EAAE,CAACI,UAAU,CAAC;MAClCe,SAAS,CAACM,OAAO,CAACC,EAAE,CAAC,cAAc,EAAGH,IAAI,IAAK;QAC7CI,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEL,IAAI,CAAC;QAC5CX,UAAU,CAAEiB,QAAQ,IAClBA,QAAQ,CAACC,GAAG,CAAEC,KAAK,IACjBA,KAAK,CAACC,MAAM,KAAKT,IAAI,CAACS,MAAM,GACxB;UAAE,GAAGD,KAAK;UAAEE,YAAY,EAAEV,IAAI,CAACW;QAAM,CAAC,GACtCH,KACN,CACF,CAAC;MACH,CAAC,CAAC;IACJ;IACA,OAAO,MAAM;MAAA,IAAAI,kBAAA;MACX,CAAAA,kBAAA,GAAAhB,SAAS,CAACM,OAAO,cAAAU,kBAAA,uBAAjBA,kBAAA,CAAmBC,UAAU,CAAC,CAAC;MAC/BjB,SAAS,CAACM,OAAO,GAAG,IAAI;IAC1B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,eAAe,GAAG,MAAAA,CAAOL,MAAM,EAAEM,OAAO,KAAK;IACjD,IAAI,CAACN,MAAM,IAAI,CAACM,OAAO,EAAE;MACvBtB,QAAQ,CAAC,wBAAwB,CAAC;MAClC;IACF;IAEA,IAAI;MACFE,eAAe,CAACoB,OAAO,CAAC,CAAC,CAAC;MAC1B,MAAMjB,QAAQ,GAAG,MAAMvB,KAAK,CAACyC,IAAI,CAACjC,YAAY,EAAE;QAAE0B,MAAM;QAAEQ,QAAQ,EAAEF;MAAQ,CAAC,CAAC;MAE9EG,KAAK,CAAC,uBAAuBpB,QAAQ,CAACE,IAAI,CAACmB,OAAO,EAAE,CAAC;MACrDtB,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC,SAAS;MACRE,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAMyB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF7B,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMhB,KAAK,CAACyC,IAAI,CAAChC,gBAAgB,CAAC;MAClCa,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,4BAA4B,CAAC;IACxC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEX,OAAA;IAAKyC,SAAS,EAAC,mEAAmE;IAAAC,QAAA,gBAChF1C,OAAA;MAAIyC,SAAS,EAAC,qCAAqC;MAAAC,QAAA,EAAC;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzF9C,OAAA;MAAQ+C,OAAO,EAAE9B,cAAe;MAAC+B,QAAQ,EAAEtC,OAAQ;MAAC+B,SAAS,EAAC,iHAAiH;MAAAC,QAAA,EAC5KhC,OAAO,gBAAGV,OAAA,CAACF,SAAS;QAAC2C,SAAS,EAAC;MAAmB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,GAAG;IAAoB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvE,CAAC,eAGT9C,OAAA;MAAQ+C,OAAO,EAAEA,CAAA,KAAMxC,QAAQ,CAAC,GAAG,CAAE;MAACkC,SAAS,EAAC,kEAAkE;MAAAC,QAAA,EAAC;IAEnH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGRlC,KAAK,iBAAIZ,OAAA;MAAGyC,SAAS,EAAC,wCAAwC;MAAAC,QAAA,EAAE9B;IAAK;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAG1EtC,OAAO,CAACyC,MAAM,GAAG,CAAC,gBACjBjD,OAAA;MAAKyC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9B1C,OAAA;QAAOyC,SAAS,EAAC,yDAAyD;QAAAC,QAAA,gBACxE1C,OAAA;UAAA0C,QAAA,eACE1C,OAAA;YAAIyC,SAAS,EAAC,6BAA6B;YAAAC,QAAA,EACxC,CAAC,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,CAACf,GAAG,CAAC,CAACuB,MAAM,EAAEC,KAAK,kBACnGnD,OAAA;cAAgByC,SAAS,EAAC,oCAAoC;cAAAC,QAAA,EAAEQ;YAAM,GAA7DC,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA6D,CAC5E;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACR9C,OAAA;UAAA0C,QAAA,EACT,CAAAlC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEyC,MAAM,IAAG,CAAC,GAClBzC,OAAO,CACJ4C,MAAM,CAACxB,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAACO,OAAO,CAAC,CAAC;UAAA,CACxCR,GAAG,CAAC,CAACC,KAAK,EAAEuB,KAAK;YAAA,IAAAE,eAAA;YAAA,oBAChBrD,OAAA;cAAgByC,SAAS,EAAC,0CAA0C;cAAAC,QAAA,gBAClE1C,OAAA;gBAAIyC,SAAS,EAAC,oCAAoC;gBAAAC,QAAA,EAAEd,KAAK,CAACO;cAAO;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACvE9C,OAAA;gBAAIyC,SAAS,EAAC,8CAA8C;gBAAAC,QAAA,EAAEd,KAAK,CAACC,MAAM,IAAI;cAAK;gBAAAc,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACzF9C,OAAA;gBAAIyC,SAAS,EAAC,mDAAmD;gBAAAC,QAAA,GAAC,GAC/D,EAACd,KAAK,CAAC0B,QAAQ,GAAG1B,KAAK,CAAC0B,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM;cAAA;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnD,CAAC,eACL9C,OAAA;gBAAIyC,SAAS,EAAC,kDAAkD;gBAAAC,QAAA,GAAC,GAC9D,EAACd,KAAK,CAACE,YAAY,GAAGF,KAAK,CAACE,YAAY,CAACyB,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM;cAAA;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3D,CAAC,eACL9C,OAAA;gBAAIyC,SAAS,EAAC,oCAAoC;gBAAAC,QAAA,EAAE,EAAAW,eAAA,GAAAzB,KAAK,CAAC4B,QAAQ,cAAAH,eAAA,uBAAdA,eAAA,CAAgBE,OAAO,CAAC,CAAC,CAAC,KAAI;cAAK;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7F9C,OAAA;gBAAIyC,SAAS,EAAC,8CAA8C;gBAAAC,QAAA,GACzDd,KAAK,CAAC6B,aAAa,GAAG7B,KAAK,CAAC6B,aAAa,CAACF,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,EAAC,GACjE;cAAA;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAGL9C,OAAA;gBAAIyC,SAAS,EAAC,4BAA4B;gBAAAC,QAAA,EACvCd,KAAK,CAACO,OAAO,gBACZnC,OAAA;kBACE+C,OAAO,EAAEA,CAAA,KAAMb,eAAe,CAACN,KAAK,CAACC,MAAM,EAAED,KAAK,CAACO,OAAO,CAAE;kBAC5DM,SAAS,EAAC,0DAA0D;kBACpEO,QAAQ,EAAElC,YAAY,KAAKc,KAAK,CAACO,OAAQ;kBAAAO,QAAA,EAExC5B,YAAY,KAAKc,KAAK,CAACO,OAAO,GAAG,YAAY,GAAG;gBAAM;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACjD,CAAC,gBAET9C,OAAA;kBAAMyC,SAAS,EAAC,eAAe;kBAAAC,QAAA,EAAC;gBAAG;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM;cAC1C;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA,GA3BEK,KAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA4BV,CAAC;UAAA,CACN,CAAC,gBAEJ9C,OAAA;YAAA0C,QAAA,eACE1C,OAAA;cAAI0D,OAAO,EAAC,GAAG;cAACjB,SAAS,EAAC,+BAA+B;cAAAC,QAAA,EAAC;YAE1D;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QACL;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAES;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAEN9C,OAAA;MAAGyC,SAAS,EAAC,2BAA2B;MAAAC,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACpE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxC,EAAA,CA9JID,SAAS;EAAA,QACIT,WAAW;AAAA;AAAA+D,EAAA,GADxBtD,SAAS;AAgKf,eAAeA,SAAS;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}